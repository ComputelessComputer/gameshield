{"version":3,"sources":["../src/token-validator.ts","../src/verify-token.ts"],"names":["TokenValidator","options","token","tokenData","error","encodedData","jsonString","data","verifyToken"],"mappings":"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","file":"index.mjs","sourcesContent":["import { TokenData, VerificationResult, VerificationOptions } from './types';\nimport * as jwt from 'jsonwebtoken';\n\n/**\n * Class for validating GameShield tokens\n */\nexport class TokenValidator {\n  private readonly secretKey: string;\n  private readonly minConfidence: number;\n  private readonly checkExpiration: boolean;\n  private readonly customValidator?: (data: TokenData) => boolean | Promise<boolean>;\n  \n  /**\n   * Creates a new TokenValidator instance\n   * @param options Verification options\n   */\n  constructor(options: VerificationOptions = {}) {\n    this.secretKey = options.secretKey || 'gameshield-default-secret';\n    this.minConfidence = options.minConfidence ?? 0.7;\n    this.checkExpiration = options.checkExpiration ?? true;\n    this.customValidator = options.customValidator;\n  }\n  \n  /**\n   * Validates a GameShield token\n   * @param token Token string to validate\n   * @returns Verification result\n   */\n  public async validate(token: string): Promise<VerificationResult> {\n    // Check if token is provided\n    if (!token) {\n      return {\n        success: false,\n        error: 'Token is required'\n      };\n    }\n    \n    try {\n      // Check token format\n      if (!token.startsWith('GS_')) {\n        return {\n          success: false,\n          error: 'Invalid token format'\n        };\n      }\n      \n      // Extract token data\n      const tokenData = this.extractTokenData(token);\n      \n      if (!tokenData) {\n        return {\n          success: false,\n          error: 'Invalid token data'\n        };\n      }\n      \n      // Check token expiration\n      if (this.checkExpiration && tokenData.exp && tokenData.exp < Date.now()) {\n        return {\n          success: false,\n          error: 'Token has expired'\n        };\n      }\n      \n      // Check game result\n      if (!tokenData.gameResult.success) {\n        return {\n          success: false,\n          error: 'Game was not completed successfully'\n        };\n      }\n      \n      // Check behavior metrics\n      if (!tokenData.behaviorMetrics.isHuman || \n          tokenData.behaviorMetrics.confidence < this.minConfidence) {\n        return {\n          success: false,\n          error: 'Behavior analysis indicates bot-like behavior',\n          score: tokenData.behaviorMetrics.confidence\n        };\n      }\n      \n      // Run custom validator if provided\n      if (this.customValidator) {\n        const customResult = await Promise.resolve(this.customValidator(tokenData));\n        if (!customResult) {\n          return {\n            success: false,\n            error: 'Custom validation failed'\n          };\n        }\n      }\n      \n      // All checks passed\n      return {\n        success: true,\n        data: tokenData,\n        score: tokenData.behaviorMetrics.confidence\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Validation error: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n  \n  /**\n   * Extracts data from a token\n   * @param token Token string to extract data from\n   * @returns Decoded token data or null if invalid\n   */\n  private extractTokenData(token: string): TokenData | null {\n    try {\n      // Remove the prefix\n      const encodedData = token.substring(3); // 'GS_' prefix is 3 characters\n      \n      // In a real implementation, this would use JWT verification\n      // For now, we'll just decode the base64 string\n      const jsonString = atob(encodedData);\n      \n      // Parse the JSON data\n      const data = JSON.parse(jsonString) as TokenData;\n      \n      return data;\n    } catch (error) {\n      console.error('Error extracting token data:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Creates a signed JWT token from token data\n   * @param data Token data\n   * @returns Signed JWT token\n   */\n  public createSignedToken(data: TokenData): string {\n    return jwt.sign(data, this.secretKey, {\n      expiresIn: '5m' // Token expires in 5 minutes\n    });\n  }\n  \n  /**\n   * Verifies a signed JWT token\n   * @param token Signed JWT token\n   * @returns Decoded token data or null if invalid\n   */\n  public verifySignedToken(token: string): TokenData | null {\n    try {\n      const decoded = jwt.verify(token, this.secretKey) as TokenData;\n      return decoded;\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return null;\n    }\n  }\n}\n","import { VerificationResult, VerificationOptions } from './types';\nimport { TokenValidator } from './token-validator';\n\n/**\n * Verifies a GameShield token\n * @param token Token string to verify\n * @param options Verification options\n * @returns Verification result\n */\nexport async function verifyToken(\n  token: string,\n  options: VerificationOptions = {}\n): Promise<VerificationResult> {\n  // Create token validator\n  const validator = new TokenValidator(options);\n  \n  // Validate the token\n  return validator.validate(token);\n}\n"]}