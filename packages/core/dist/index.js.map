{"version":3,"sources":["../src/games/base-game.ts","../src/games/pong-game.ts","../src/games/game-factory.ts","../src/behavior-analyzer.ts","../src/token-manager.ts","../src/create-game-shield.ts"],"names":["BaseGame","options","f","size","percentage","resize","containerSize","maxSize","scale","success","score","data","timeTaken","result","error","PongGame","event","rect","difficulty","d","textStyle","angle","delta","targetY","randomOffset","aiTargetY","normalizedHitPosition","speedIncrease","currentSpeed","speedRatio","GameFactory","type","gameTypes","BehaviorAnalyzer","touch","container","movementSmoothness","reactionTime","interactionDensity","patternVariability","metrics","value","confidence","sum","totalAngularChange","totalDistance","i","prev","current","next","v1","v2","mag1","mag2","cosAngle","rawSmoothness","reactionTimes","gameEvent","nextInteraction","e","a","b","average","time","variance","allEvents","duration","eventsPerSecond","intervals","avgInterval","interval","intervalVariance","normalizedVariance","pattern","directionChanges","prevDirection","direction","maxChanges","TokenManager","tokenData","encodedData","jsonString","token","createGameShield","mergedOptions","behaviorAnalyzer","sessionId","generateSessionId","gameInstance","initGame","handleGameComplete","handleGameError","behaviorMetrics","reason"],"mappings":"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","file":"index.js","sourcesContent":["import * as PIXI from 'pixi.js';\nimport { Game, GameOptions, GameResult, Difficulty } from '../types';\n\n/**\n * Base abstract class for all games\n */\nexport abstract class BaseGame implements Game {\n  protected app: PIXI.Application;\n  protected container: HTMLElement;\n  protected size: number;\n  protected difficulty: Difficulty;\n  protected isRunning: boolean = false;\n  protected startTime: number = 0;\n  protected onComplete?: (result: GameResult) => void;\n  protected onError?: (error: Error) => void;\n\n  /**\n   * Creates a new game instance\n   * @param options Game options\n   */\n  constructor(options: GameOptions) {\n    this.container = options.container;\n    this.difficulty = options.difficulty || 'medium';\n    this.onComplete = options.onComplete;\n    this.onError = options.onError;\n    \n    // Convert size to number (pixels)\n    this.size = this.parseSize(options.size);\n    \n    // Create PIXI application\n    this.app = new PIXI.Application({\n      width: this.size,\n      height: this.size,\n      backgroundColor: 0x1a1a1a,\n      antialias: true,\n      resolution: window.devicePixelRatio || 1,\n    });\n    \n    // Add the PIXI canvas to the container\n    this.container.appendChild(this.app.view as HTMLCanvasElement);\n    \n    // Make the canvas responsive\n    this.makeResponsive();\n  }\n  \n  /**\n   * Parses size value to pixels\n   * @param size Size value (string or number)\n   * @returns Size in pixels\n   */\n  private parseSize(size: string | number): number {\n    if (typeof size === 'number') {\n      return size;\n    }\n    \n    // Parse string size (e.g., '400px', '100%')\n    if (size.endsWith('px')) {\n      return parseInt(size, 10);\n    }\n    \n    if (size.endsWith('%')) {\n      const percentage = parseInt(size, 10);\n      // Use the smaller of container width or height to maintain aspect ratio\n      const containerSize = Math.min(\n        this.container.clientWidth,\n        this.container.clientHeight\n      );\n      return (containerSize * percentage) / 100;\n    }\n    \n    // Default size if parsing fails\n    return 400;\n  }\n  \n  /**\n   * Makes the canvas responsive to container size changes\n   */\n  private makeResponsive(): void {\n    const resize = () => {\n      // Get the container size\n      const containerSize = Math.min(\n        this.container.clientWidth,\n        this.container.clientHeight\n      );\n      \n      // Limit to a maximum size of 500px\n      const maxSize = Math.min(containerSize, 500);\n      \n      // Update the canvas size\n      this.app.renderer.resize(maxSize, maxSize);\n      \n      // Scale the stage to fit the new size\n      const scale = maxSize / this.size;\n      this.app.stage.scale.set(scale);\n    };\n    \n    // Initial resize\n    resize();\n    \n    // Add resize listener\n    window.addEventListener('resize', resize);\n    \n    // Store the original size for reference\n    this.size = this.app.renderer.width;\n  }\n  \n  /**\n   * Initializes the game\n   */\n  public init(): void {\n    // Base initialization\n    this.app.ticker.add(this.update, this);\n  }\n  \n  /**\n   * Starts the game\n   */\n  public start(): void {\n    if (this.isRunning) {\n      return;\n    }\n    \n    this.isRunning = true;\n    this.startTime = Date.now();\n    this.app.ticker.start();\n  }\n  \n  /**\n   * Pauses the game\n   */\n  public pause(): void {\n    if (!this.isRunning) {\n      return;\n    }\n    \n    this.isRunning = false;\n    this.app.ticker.stop();\n  }\n  \n  /**\n   * Resumes the game after pausing\n   */\n  public resume(): void {\n    if (this.isRunning) {\n      return;\n    }\n    \n    this.isRunning = true;\n    this.app.ticker.start();\n  }\n  \n  /**\n   * Resets the game to its initial state\n   */\n  public abstract reset(): void;\n  \n  /**\n   * Destroys the game and cleans up resources\n   */\n  public destroy(): void {\n    // Stop the game\n    this.pause();\n    \n    // Remove the canvas from the container\n    if (this.app.view.parentNode) {\n      this.app.view.parentNode.removeChild(this.app.view);\n    }\n    \n    // Destroy the PIXI application\n    this.app.destroy(true, {\n      children: true,\n      texture: true,\n      baseTexture: true\n    });\n  }\n  \n  /**\n   * Update method called on each frame\n   * @param delta Time elapsed since last frame\n   */\n  protected abstract update(delta: number): void;\n  \n  /**\n   * Completes the game and calls the onComplete callback\n   * @param success Whether the game was completed successfully\n   * @param score Optional score or performance metric\n   * @param data Additional game-specific data\n   */\n  protected complete(success: boolean, score?: number, data?: Record<string, any>): void {\n    // Stop the game\n    this.pause();\n    \n    // Calculate time taken\n    const timeTaken = Date.now() - this.startTime;\n    \n    // Create result object\n    const result: GameResult = {\n      success,\n      score,\n      timeTaken,\n      data\n    };\n    \n    // Call the onComplete callback\n    if (this.onComplete) {\n      this.onComplete(result);\n    }\n  }\n  \n  /**\n   * Handles errors during gameplay\n   * @param error Error object\n   */\n  protected handleError(error: Error): void {\n    console.error('Game error:', error);\n    \n    // Call the onError callback\n    if (this.onError) {\n      this.onError(error);\n    }\n  }\n}\n","import * as PIXI from 'pixi.js';\nimport { BaseGame } from './base-game';\nimport { GameOptions, Difficulty } from '../types';\n\n/**\n * Pong game implementation\n */\nexport class PongGame extends BaseGame {\n  // Game elements\n  private paddle: PIXI.Graphics;\n  private ball: PIXI.Graphics;\n  private aiPaddle: PIXI.Graphics;\n  private scoreText: PIXI.Text;\n  \n  // Game settings\n  private paddleWidth: number = 15;\n  private paddleHeight: number = 80;\n  private ballSize: number = 15;\n  private ballSpeed: number = 5;\n  private ballVelocity: { x: number; y: number } = { x: 0, y: 0 };\n  private paddleSpeed: number = 8;\n  private aiPaddleSpeed: number = 4;\n  private score: number = 0;\n  private maxScore: number = 5;\n  private gameAreaPadding: number = 20;\n  \n  // Input tracking\n  private keys: { [key: string]: boolean } = {};\n  private mouseY: number | null = null;\n  private touchY: number | null = null;\n  \n  /**\n   * Creates a new Pong game instance\n   * @param options Game options\n   */\n  constructor(options: GameOptions) {\n    super(options);\n    \n    // Adjust difficulty settings\n    this.adjustDifficulty(options.difficulty || 'medium');\n    \n    // Initialize game\n    this.init();\n  }\n  \n  /**\n   * Adjusts game settings based on difficulty\n   * @param difficulty Difficulty level\n   */\n  private adjustDifficulty(difficulty: Difficulty): void {\n    switch (difficulty) {\n      case 'easy':\n        this.ballSpeed = 4;\n        this.aiPaddleSpeed = 3;\n        this.maxScore = 3;\n        break;\n      case 'medium':\n        this.ballSpeed = 5;\n        this.aiPaddleSpeed = 4;\n        this.maxScore = 5;\n        break;\n      case 'hard':\n        this.ballSpeed = 6;\n        this.aiPaddleSpeed = 5;\n        this.maxScore = 7;\n        break;\n    }\n  }\n  \n  /**\n   * Initializes the game\n   */\n  public init(): void {\n    super.init();\n    \n    // Create game elements\n    this.createGameElements();\n    \n    // Set up event listeners\n    this.setupEventListeners();\n    \n    // Reset game state\n    this.reset();\n  }\n  \n  /**\n   * Creates game elements\n   */\n  private createGameElements(): void {\n    // Create player paddle\n    this.paddle = new PIXI.Graphics();\n    this.paddle.beginFill(0xffffff);\n    this.paddle.drawRect(0, 0, this.paddleWidth, this.paddleHeight);\n    this.paddle.endFill();\n    this.paddle.x = this.gameAreaPadding;\n    this.paddle.y = (this.size - this.paddleHeight) / 2;\n    this.app.stage.addChild(this.paddle);\n    \n    // Create AI paddle\n    this.aiPaddle = new PIXI.Graphics();\n    this.aiPaddle.beginFill(0xffffff);\n    this.aiPaddle.drawRect(0, 0, this.paddleWidth, this.paddleHeight);\n    this.aiPaddle.endFill();\n    this.aiPaddle.x = this.size - this.paddleWidth - this.gameAreaPadding;\n    this.aiPaddle.y = (this.size - this.paddleHeight) / 2;\n    this.app.stage.addChild(this.aiPaddle);\n    \n    // Create ball\n    this.ball = new PIXI.Graphics();\n    this.ball.beginFill(0xffffff);\n    this.ball.drawRect(0, 0, this.ballSize, this.ballSize);\n    this.ball.endFill();\n    this.ball.x = (this.size - this.ballSize) / 2;\n    this.ball.y = (this.size - this.ballSize) / 2;\n    this.app.stage.addChild(this.ball);\n    \n    // Create score text\n    const textStyle = new PIXI.TextStyle({\n      fontFamily: 'Arial',\n      fontSize: 24,\n      fill: 0xffffff,\n      align: 'center'\n    });\n    this.scoreText = new PIXI.Text(`Score: 0/${this.maxScore}`, textStyle);\n    this.scoreText.x = (this.size - this.scoreText.width) / 2;\n    this.scoreText.y = 10;\n    this.app.stage.addChild(this.scoreText);\n  }\n  \n  /**\n   * Sets up event listeners for user input\n   */\n  private setupEventListeners(): void {\n    // Keyboard input\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n    \n    // Mouse input\n    this.container.addEventListener('mousemove', this.handleMouseMove);\n    \n    // Touch input\n    this.container.addEventListener('touchmove', this.handleTouchMove);\n    this.container.addEventListener('touchend', this.handleTouchEnd);\n  }\n  \n  /**\n   * Removes event listeners\n   */\n  private removeEventListeners(): void {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('keyup', this.handleKeyUp);\n    this.container.removeEventListener('mousemove', this.handleMouseMove);\n    this.container.removeEventListener('touchmove', this.handleTouchMove);\n    this.container.removeEventListener('touchend', this.handleTouchEnd);\n  }\n  \n  /**\n   * Resets the game to its initial state\n   */\n  public reset(): void {\n    // Reset score\n    this.score = 0;\n    this.updateScoreText();\n    \n    // Reset ball position\n    this.ball.x = (this.size - this.ballSize) / 2;\n    this.ball.y = (this.size - this.ballSize) / 2;\n    \n    // Reset ball velocity with random direction\n    const angle = Math.random() * Math.PI / 4 - Math.PI / 8 + (Math.random() > 0.5 ? 0 : Math.PI);\n    this.ballVelocity.x = Math.cos(angle) * this.ballSpeed;\n    this.ballVelocity.y = Math.sin(angle) * this.ballSpeed;\n    \n    // Reset paddles\n    this.paddle.y = (this.size - this.paddleHeight) / 2;\n    this.aiPaddle.y = (this.size - this.paddleHeight) / 2;\n    \n    // Reset input tracking\n    this.keys = {};\n    this.mouseY = null;\n    this.touchY = null;\n  }\n  \n  /**\n   * Updates the score text\n   */\n  private updateScoreText(): void {\n    this.scoreText.text = `Score: ${this.score}/${this.maxScore}`;\n    this.scoreText.x = (this.size - this.scoreText.width) / 2;\n  }\n  \n  /**\n   * Update method called on each frame\n   * @param delta Time elapsed since last frame\n   */\n  protected update(delta: number): void {\n    if (!this.isRunning) {\n      return;\n    }\n    \n    // Update player paddle position based on input\n    this.updatePlayerPaddle();\n    \n    // Update AI paddle position\n    this.updateAIPaddle();\n    \n    // Update ball position\n    this.updateBall();\n    \n    // Check for collisions\n    this.checkCollisions();\n    \n    // Check for scoring\n    this.checkScoring();\n  }\n  \n  /**\n   * Updates player paddle position based on input\n   */\n  private updatePlayerPaddle(): void {\n    // Keyboard input\n    if (this.keys['ArrowUp'] || this.keys['w']) {\n      this.paddle.y -= this.paddleSpeed;\n    }\n    if (this.keys['ArrowDown'] || this.keys['s']) {\n      this.paddle.y += this.paddleSpeed;\n    }\n    \n    // Mouse input\n    if (this.mouseY !== null) {\n      // Calculate the target position based on mouse Y\n      const targetY = this.mouseY - this.paddleHeight / 2;\n      // Smoothly move towards the target\n      this.paddle.y += (targetY - this.paddle.y) * 0.2;\n    }\n    \n    // Touch input\n    if (this.touchY !== null) {\n      // Calculate the target position based on touch Y\n      const targetY = this.touchY - this.paddleHeight / 2;\n      // Smoothly move towards the target\n      this.paddle.y += (targetY - this.paddle.y) * 0.2;\n    }\n    \n    // Keep paddle within bounds\n    this.paddle.y = Math.max(this.gameAreaPadding, Math.min(this.size - this.paddleHeight - this.gameAreaPadding, this.paddle.y));\n  }\n  \n  /**\n   * Updates AI paddle position\n   */\n  private updateAIPaddle(): void {\n    // Simple AI: follow the ball with some delay\n    const targetY = this.ball.y + this.ballSize / 2 - this.paddleHeight / 2;\n    \n    // Add some randomness to make it imperfect\n    const aiAccuracy = this.difficulty === 'hard' ? 0.9 : this.difficulty === 'medium' ? 0.7 : 0.5;\n    const randomOffset = (1 - aiAccuracy) * (Math.random() * 100 - 50);\n    \n    // Move towards the target\n    const aiTargetY = targetY + randomOffset;\n    \n    // Smoothly move towards the target\n    if (this.aiPaddle.y < aiTargetY) {\n      this.aiPaddle.y += Math.min(this.aiPaddleSpeed, aiTargetY - this.aiPaddle.y);\n    } else if (this.aiPaddle.y > aiTargetY) {\n      this.aiPaddle.y -= Math.min(this.aiPaddleSpeed, this.aiPaddle.y - aiTargetY);\n    }\n    \n    // Keep AI paddle within bounds\n    this.aiPaddle.y = Math.max(this.gameAreaPadding, Math.min(this.size - this.paddleHeight - this.gameAreaPadding, this.aiPaddle.y));\n  }\n  \n  /**\n   * Updates ball position\n   */\n  private updateBall(): void {\n    // Move the ball\n    this.ball.x += this.ballVelocity.x;\n    this.ball.y += this.ballVelocity.y;\n    \n    // Bounce off top and bottom walls\n    if (this.ball.y <= this.gameAreaPadding || this.ball.y + this.ballSize >= this.size - this.gameAreaPadding) {\n      this.ballVelocity.y = -this.ballVelocity.y;\n      \n      // Keep ball within bounds\n      if (this.ball.y <= this.gameAreaPadding) {\n        this.ball.y = this.gameAreaPadding;\n      } else if (this.ball.y + this.ballSize >= this.size - this.gameAreaPadding) {\n        this.ball.y = this.size - this.ballSize - this.gameAreaPadding;\n      }\n    }\n  }\n  \n  /**\n   * Checks for collisions between ball and paddles\n   */\n  private checkCollisions(): void {\n    // Check collision with player paddle\n    if (\n      this.ball.x <= this.paddle.x + this.paddleWidth &&\n      this.ball.x + this.ballSize >= this.paddle.x &&\n      this.ball.y + this.ballSize >= this.paddle.y &&\n      this.ball.y <= this.paddle.y + this.paddleHeight\n    ) {\n      // Bounce off player paddle\n      this.ball.x = this.paddle.x + this.paddleWidth;\n      this.ballVelocity.x = -this.ballVelocity.x;\n      \n      // Adjust angle based on where the ball hit the paddle\n      const hitPosition = (this.ball.y + this.ballSize / 2) - (this.paddle.y + this.paddleHeight / 2);\n      const normalizedHitPosition = hitPosition / (this.paddleHeight / 2);\n      this.ballVelocity.y = normalizedHitPosition * this.ballSpeed;\n      \n      // Slightly increase ball speed\n      const speedIncrease = 0.2;\n      const currentSpeed = Math.sqrt(this.ballVelocity.x * this.ballVelocity.x + this.ballVelocity.y * this.ballVelocity.y);\n      const speedRatio = (currentSpeed + speedIncrease) / currentSpeed;\n      this.ballVelocity.x *= speedRatio;\n      this.ballVelocity.y *= speedRatio;\n    }\n    \n    // Check collision with AI paddle\n    if (\n      this.ball.x + this.ballSize >= this.aiPaddle.x &&\n      this.ball.x <= this.aiPaddle.x + this.paddleWidth &&\n      this.ball.y + this.ballSize >= this.aiPaddle.y &&\n      this.ball.y <= this.aiPaddle.y + this.paddleHeight\n    ) {\n      // Bounce off AI paddle\n      this.ball.x = this.aiPaddle.x - this.ballSize;\n      this.ballVelocity.x = -this.ballVelocity.x;\n      \n      // Adjust angle based on where the ball hit the paddle\n      const hitPosition = (this.ball.y + this.ballSize / 2) - (this.aiPaddle.y + this.paddleHeight / 2);\n      const normalizedHitPosition = hitPosition / (this.paddleHeight / 2);\n      this.ballVelocity.y = normalizedHitPosition * this.ballSpeed;\n    }\n  }\n  \n  /**\n   * Checks for scoring conditions\n   */\n  private checkScoring(): void {\n    // Check if ball went past AI paddle (player scores)\n    if (this.ball.x + this.ballSize > this.size) {\n      this.score++;\n      this.updateScoreText();\n      \n      // Check if player won\n      if (this.score >= this.maxScore) {\n        this.complete(true, this.score);\n      } else {\n        this.resetBall();\n      }\n    }\n    \n    // Check if ball went past player paddle (AI scores)\n    if (this.ball.x < 0) {\n      // Reset ball\n      this.resetBall();\n    }\n  }\n  \n  /**\n   * Resets the ball position and velocity\n   */\n  private resetBall(): void {\n    // Reset ball position\n    this.ball.x = (this.size - this.ballSize) / 2;\n    this.ball.y = (this.size - this.ballSize) / 2;\n    \n    // Reset ball velocity with random direction\n    const angle = Math.random() * Math.PI / 4 - Math.PI / 8 + (Math.random() > 0.5 ? 0 : Math.PI);\n    this.ballVelocity.x = Math.cos(angle) * this.ballSpeed;\n    this.ballVelocity.y = Math.sin(angle) * this.ballSpeed;\n  }\n  \n  /**\n   * Destroys the game and cleans up resources\n   */\n  public destroy(): void {\n    // Remove event listeners\n    this.removeEventListeners();\n    \n    // Call parent destroy method\n    super.destroy();\n  }\n  \n  // Event handlers\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    this.keys[event.key] = true;\n  };\n  \n  private handleKeyUp = (event: KeyboardEvent): void => {\n    this.keys[event.key] = false;\n  };\n  \n  private handleMouseMove = (event: MouseEvent): void => {\n    // Get the canvas position\n    const rect = this.app.view.getBoundingClientRect();\n    // Calculate the relative mouse position within the canvas\n    this.mouseY = (event.clientY - rect.top) * (this.size / rect.height);\n  };\n  \n  private handleTouchMove = (event: TouchEvent): void => {\n    if (event.touches.length > 0) {\n      // Get the canvas position\n      const rect = this.app.view.getBoundingClientRect();\n      // Calculate the relative touch position within the canvas\n      this.touchY = (event.touches[0].clientY - rect.top) * (this.size / rect.height);\n      \n      // Prevent scrolling\n      event.preventDefault();\n    }\n  };\n  \n  private handleTouchEnd = (): void => {\n    this.touchY = null;\n  };\n}\n","import { Game, GameOptions, GameType } from '../types';\nimport { PongGame } from './pong-game';\n\n/**\n * Factory class for creating game instances\n */\nexport class GameFactory {\n  /**\n   * Creates a game instance based on the specified type and options\n   * @param type Type of game to create\n   * @param options Game options\n   * @returns Game instance\n   */\n  public static createGame(type: GameType, options: GameOptions): Game {\n    // If type is random, choose a random game type\n    if (type === 'random') {\n      const gameTypes: GameType[] = ['pong', 'snake', 'breakout', 'dino-run'];\n      type = gameTypes[Math.floor(Math.random() * gameTypes.length)];\n    }\n    \n    // Create the appropriate game instance\n    switch (type) {\n      case 'pong':\n        return new PongGame(options);\n      case 'snake':\n        // For now, return a placeholder implementation\n        // Will be replaced with actual implementation later\n        return this.createPlaceholderGame(type, options);\n      case 'breakout':\n        // For now, return a placeholder implementation\n        // Will be replaced with actual implementation later\n        return this.createPlaceholderGame(type, options);\n      case 'dino-run':\n        // For now, return a placeholder implementation\n        // Will be replaced with actual implementation later\n        return this.createPlaceholderGame(type, options);\n      default:\n        throw new Error(`Unsupported game type: ${type}`);\n    }\n  }\n  \n  /**\n   * Creates a placeholder game for types that aren't fully implemented yet\n   * @param type Type of game\n   * @param options Game options\n   * @returns Placeholder game instance\n   */\n  private static createPlaceholderGame(type: GameType, options: GameOptions): Game {\n    // For now, we'll use the Pong game as a placeholder\n    // This will be replaced with actual implementations later\n    console.warn(`Game type '${type}' not fully implemented yet. Using placeholder.`);\n    return new PongGame(options);\n  }\n}\n","import { BehaviorAnalyzerOptions, BehaviorMetrics } from './types';\n\n/**\n * BehaviorAnalyzer class for analyzing user behavior during gameplay\n * to determine if the user is human or a bot.\n */\nexport class BehaviorAnalyzer {\n  private options: Required<BehaviorAnalyzerOptions>;\n  private isTracking: boolean = false;\n  private startTime: number = 0;\n  private mousePositions: Array<{ x: number; y: number; timestamp: number }> = [];\n  private clickEvents: Array<{ x: number; y: number; timestamp: number }> = [];\n  private keyEvents: Array<{ key: string; timestamp: number }> = [];\n  private gameEvents: Array<{ type: string; timestamp: number; data?: any }> = [];\n\n  /**\n   * Creates a new BehaviorAnalyzer instance.\n   * @param options Configuration options for the behavior analyzer\n   */\n  constructor(options: BehaviorAnalyzerOptions = {}) {\n    // Set default options\n    this.options = {\n      movementSmoothnessThreshold: options.movementSmoothnessThreshold ?? 0.6,\n      reactionTimeThreshold: options.reactionTimeThreshold ?? 200,\n      interactionDensityThreshold: options.interactionDensityThreshold ?? 0.5,\n      patternVariabilityThreshold: options.patternVariabilityThreshold ?? 0.7\n    };\n  }\n\n  /**\n   * Starts tracking user behavior.\n   * @param container The HTML element to attach event listeners to\n   */\n  public startTracking(container: HTMLElement): void {\n    if (this.isTracking) {\n      return;\n    }\n\n    this.isTracking = true;\n    this.startTime = Date.now();\n    this.mousePositions = [];\n    this.clickEvents = [];\n    this.keyEvents = [];\n    this.gameEvents = [];\n\n    // Track mouse movements\n    container.addEventListener('mousemove', this.handleMouseMove);\n    \n    // Track mouse clicks\n    container.addEventListener('mousedown', this.handleMouseClick);\n    \n    // Track key presses\n    container.addEventListener('keydown', this.handleKeyDown);\n    \n    // Track touch events for mobile\n    container.addEventListener('touchstart', this.handleTouchStart);\n    container.addEventListener('touchmove', this.handleTouchMove);\n    container.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stops tracking user behavior.\n   * @param container The HTML element to remove event listeners from\n   */\n  public stopTracking(container: HTMLElement): void {\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.isTracking = false;\n\n    // Remove event listeners\n    container.removeEventListener('mousemove', this.handleMouseMove);\n    container.removeEventListener('mousedown', this.handleMouseClick);\n    container.removeEventListener('keydown', this.handleKeyDown);\n    container.removeEventListener('touchstart', this.handleTouchStart);\n    container.removeEventListener('touchmove', this.handleTouchMove);\n    container.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Records a game-specific event.\n   * @param type The type of event\n   * @param data Optional data associated with the event\n   */\n  public recordGameEvent(type: string, data?: any): void {\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.gameEvents.push({\n      type,\n      timestamp: Date.now(),\n      data\n    });\n  }\n\n  /**\n   * Analyzes the collected behavior data to determine if the user is human.\n   * @returns Behavior metrics with human determination\n   */\n  public analyze(): BehaviorMetrics {\n    // Calculate metrics\n    const movementSmoothness = this.calculateMovementSmoothness();\n    const reactionTime = this.calculateReactionTime();\n    const interactionDensity = this.calculateInteractionDensity();\n    const patternVariability = this.calculatePatternVariability();\n\n    // Calculate confidence based on all metrics\n    const metrics = [\n      movementSmoothness / this.options.movementSmoothnessThreshold,\n      this.options.reactionTimeThreshold / (reactionTime.average || this.options.reactionTimeThreshold),\n      interactionDensity.eventsPerSecond / this.options.interactionDensityThreshold,\n      patternVariability / this.options.patternVariabilityThreshold\n    ].filter(value => !isNaN(value) && isFinite(value));\n\n    // Average of all metrics, capped at 1.0\n    const confidence = Math.min(\n      metrics.reduce((sum, value) => sum + value, 0) / metrics.length,\n      1.0\n    );\n\n    // Determine if human based on confidence threshold\n    const isHuman = confidence >= 0.7;\n\n    return {\n      isHuman,\n      confidence,\n      movementSmoothness,\n      reactionTime,\n      interactionDensity: {\n        eventsPerSecond: interactionDensity.eventsPerSecond,\n        pattern: interactionDensity.pattern\n      },\n      patternVariability\n    };\n  }\n\n  /**\n   * Calculates the smoothness of mouse movements.\n   * @returns Smoothness score between 0 and 1\n   */\n  private calculateMovementSmoothness(): number {\n    if (this.mousePositions.length < 3) {\n      return 0;\n    }\n\n    let totalAngularChange = 0;\n    let totalDistance = 0;\n\n    for (let i = 1; i < this.mousePositions.length - 1; i++) {\n      const prev = this.mousePositions[i - 1];\n      const current = this.mousePositions[i];\n      const next = this.mousePositions[i + 1];\n\n      // Calculate vectors\n      const v1 = {\n        x: current.x - prev.x,\n        y: current.y - prev.y\n      };\n      const v2 = {\n        x: next.x - current.x,\n        y: next.y - current.y\n      };\n\n      // Calculate magnitudes\n      const mag1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y);\n      const mag2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\n\n      // Skip if no movement\n      if (mag1 === 0 || mag2 === 0) {\n        continue;\n      }\n\n      // Calculate dot product\n      const dotProduct = v1.x * v2.x + v1.y * v2.y;\n      \n      // Calculate cosine of angle between vectors\n      const cosAngle = dotProduct / (mag1 * mag2);\n      \n      // Calculate angle (in radians)\n      const angle = Math.acos(Math.max(-1, Math.min(1, cosAngle)));\n      \n      totalAngularChange += angle;\n      totalDistance += mag1;\n    }\n\n    // Normalize by total distance\n    if (totalDistance === 0) {\n      return 0;\n    }\n\n    // Calculate smoothness (inverse of angular change per unit distance)\n    // Higher values mean smoother movement\n    const rawSmoothness = 1 - (totalAngularChange / totalDistance / Math.PI);\n    \n    // Normalize to 0-1 range\n    return Math.max(0, Math.min(1, rawSmoothness));\n  }\n\n  /**\n   * Calculates reaction time metrics.\n   * @returns Object containing average reaction time and variance\n   */\n  private calculateReactionTime(): { average: number; variance: number } {\n    const reactionTimes: number[] = [];\n\n    // Calculate reaction times between game events and user responses\n    for (let i = 0; i < this.gameEvents.length; i++) {\n      const gameEvent = this.gameEvents[i];\n      \n      // Find the next user interaction after this game event\n      const nextInteraction = [...this.clickEvents, ...this.keyEvents]\n        .filter(e => e.timestamp > gameEvent.timestamp)\n        .sort((a, b) => a.timestamp - b.timestamp)[0];\n      \n      if (nextInteraction) {\n        const reactionTime = nextInteraction.timestamp - gameEvent.timestamp;\n        \n        // Only consider reasonable reaction times (100ms to 2000ms)\n        if (reactionTime >= 100 && reactionTime <= 2000) {\n          reactionTimes.push(reactionTime);\n        }\n      }\n    }\n\n    if (reactionTimes.length === 0) {\n      return { average: 0, variance: 0 };\n    }\n\n    // Calculate average\n    const average = reactionTimes.reduce((sum, time) => sum + time, 0) / reactionTimes.length;\n    \n    // Calculate variance\n    const variance = reactionTimes.reduce((sum, time) => sum + Math.pow(time - average, 2), 0) / reactionTimes.length;\n\n    return { average, variance };\n  }\n\n  /**\n   * Calculates interaction density metrics.\n   * @returns Object containing events per second and pattern classification\n   */\n  private calculateInteractionDensity(): { eventsPerSecond: number; pattern: 'human' | 'bot' | 'uncertain' } {\n    const allEvents = [\n      ...this.mousePositions,\n      ...this.clickEvents,\n      ...this.keyEvents\n    ].sort((a, b) => a.timestamp - b.timestamp);\n\n    if (allEvents.length < 2) {\n      return { eventsPerSecond: 0, pattern: 'uncertain' };\n    }\n\n    // Calculate total duration in seconds\n    const duration = (allEvents[allEvents.length - 1].timestamp - allEvents[0].timestamp) / 1000;\n    \n    if (duration === 0) {\n      return { eventsPerSecond: 0, pattern: 'uncertain' };\n    }\n\n    // Calculate events per second\n    const eventsPerSecond = allEvents.length / duration;\n\n    // Calculate time intervals between events\n    const intervals: number[] = [];\n    for (let i = 1; i < allEvents.length; i++) {\n      intervals.push(allEvents[i].timestamp - allEvents[i - 1].timestamp);\n    }\n\n    // Calculate variance of intervals\n    const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n    const intervalVariance = intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length;\n    \n    // Normalize variance\n    const normalizedVariance = Math.min(1, intervalVariance / (avgInterval * avgInterval));\n\n    // Determine pattern based on variance\n    // Bots often have very consistent timing (low variance)\n    let pattern: 'human' | 'bot' | 'uncertain';\n    if (normalizedVariance < 0.1) {\n      pattern = 'bot';\n    } else if (normalizedVariance > 0.3) {\n      pattern = 'human';\n    } else {\n      pattern = 'uncertain';\n    }\n\n    return { eventsPerSecond, pattern };\n  }\n\n  /**\n   * Calculates pattern variability in user interactions.\n   * @returns Variability score between 0 and 1\n   */\n  private calculatePatternVariability(): number {\n    if (this.mousePositions.length < 10) {\n      return 0;\n    }\n\n    // Calculate direction changes\n    let directionChanges = 0;\n    let prevDirection = { x: 0, y: 0 };\n\n    for (let i = 1; i < this.mousePositions.length; i++) {\n      const prev = this.mousePositions[i - 1];\n      const current = this.mousePositions[i];\n      \n      const direction = {\n        x: Math.sign(current.x - prev.x),\n        y: Math.sign(current.y - prev.y)\n      };\n      \n      // Check if direction changed\n      if (\n        (prevDirection.x !== 0 || prevDirection.y !== 0) && // Skip first comparison\n        (direction.x !== prevDirection.x || direction.y !== prevDirection.y)\n      ) {\n        directionChanges++;\n      }\n      \n      prevDirection = direction;\n    }\n\n    // Calculate normalized variability\n    // More direction changes indicate more human-like behavior\n    const maxChanges = this.mousePositions.length - 1;\n    const normalizedChanges = Math.min(directionChanges / (maxChanges * 0.5), 1);\n\n    return normalizedChanges;\n  }\n\n  // Event handlers\n  private handleMouseMove = (event: MouseEvent): void => {\n    if (!this.isTracking) {\n      return;\n    }\n\n    // Throttle recording to avoid excessive data\n    if (this.mousePositions.length === 0 || \n        Date.now() - this.mousePositions[this.mousePositions.length - 1].timestamp >= 50) {\n      this.mousePositions.push({\n        x: event.clientX,\n        y: event.clientY,\n        timestamp: Date.now()\n      });\n    }\n  };\n\n  private handleMouseClick = (event: MouseEvent): void => {\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.clickEvents.push({\n      x: event.clientX,\n      y: event.clientY,\n      timestamp: Date.now()\n    });\n  };\n\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.keyEvents.push({\n      key: event.key,\n      timestamp: Date.now()\n    });\n  };\n\n  private handleTouchStart = (event: TouchEvent): void => {\n    if (!this.isTracking || !event.touches[0]) {\n      return;\n    }\n\n    const touch = event.touches[0];\n    this.clickEvents.push({\n      x: touch.clientX,\n      y: touch.clientY,\n      timestamp: Date.now()\n    });\n  };\n\n  private handleTouchMove = (event: TouchEvent): void => {\n    if (!this.isTracking || !event.touches[0]) {\n      return;\n    }\n\n    const touch = event.touches[0];\n    // Throttle recording to avoid excessive data\n    if (this.mousePositions.length === 0 || \n        Date.now() - this.mousePositions[this.mousePositions.length - 1].timestamp >= 50) {\n      this.mousePositions.push({\n        x: touch.clientX,\n        y: touch.clientY,\n        timestamp: Date.now()\n      });\n    }\n  };\n\n  private handleTouchEnd = (event: TouchEvent): void => {\n    // Just record the event timestamp\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.gameEvents.push({\n      type: 'touchend',\n      timestamp: Date.now()\n    });\n  };\n}\n","import { GameResult, BehaviorMetrics, TokenData } from './types';\n\n/**\n * TokenManager class for generating and handling verification tokens\n */\nexport class TokenManager {\n  private static readonly TOKEN_PREFIX = 'GS_';\n  \n  /**\n   * Generates a verification token containing game results and behavior analysis\n   * @param data Token data including subject, game result, and behavior metrics\n   * @returns Encoded token string\n   */\n  public static generateToken(data: {\n    sub: string;\n    gameResult: GameResult;\n    behaviorMetrics: BehaviorMetrics;\n  }): string {\n    const tokenData: TokenData = {\n      sub: data.sub,\n      gameResult: data.gameResult,\n      behaviorMetrics: data.behaviorMetrics,\n      iat: Date.now(),\n      // Token expires in 5 minutes\n      exp: Date.now() + 5 * 60 * 1000\n    };\n    \n    // Encode the token data\n    const encodedData = this.encodeTokenData(tokenData);\n    \n    // Add the token prefix\n    return `${this.TOKEN_PREFIX}${encodedData}`;\n  }\n  \n  /**\n   * Encodes token data into a string\n   * @param data Token data to encode\n   * @returns Encoded token string\n   */\n  private static encodeTokenData(data: TokenData): string {\n    // Convert the data to JSON and encode as base64\n    const jsonString = JSON.stringify(data);\n    \n    // In a real implementation, this would include encryption and signing\n    // For now, we'll just use base64 encoding for demonstration\n    return btoa(jsonString);\n  }\n  \n  /**\n   * Validates a token format (not the contents)\n   * @param token Token string to validate\n   * @returns Whether the token format is valid\n   */\n  public static validateTokenFormat(token: string): boolean {\n    if (!token || typeof token !== 'string') {\n      return false;\n    }\n    \n    // Check if the token has the correct prefix\n    if (!token.startsWith(this.TOKEN_PREFIX)) {\n      return false;\n    }\n    \n    // Check if the token has content after the prefix\n    if (token.length <= this.TOKEN_PREFIX.length) {\n      return false;\n    }\n    \n    return true;\n  }\n  \n  /**\n   * Extracts data from a token\n   * @param token Token string to extract data from\n   * @returns Decoded token data or null if invalid\n   */\n  public static extractTokenData(token: string): TokenData | null {\n    if (!this.validateTokenFormat(token)) {\n      return null;\n    }\n    \n    try {\n      // Remove the prefix\n      const encodedData = token.substring(this.TOKEN_PREFIX.length);\n      \n      // Decode the base64 string\n      const jsonString = atob(encodedData);\n      \n      // Parse the JSON data\n      const data = JSON.parse(jsonString) as TokenData;\n      \n      return data;\n    } catch (error) {\n      console.error('Error extracting token data:', error);\n      return null;\n    }\n  }\n}\n","import { GameShield, GameShieldOptions, Game, GameResult } from './types';\nimport { GameFactory } from './games/game-factory';\nimport { BehaviorAnalyzer } from './behavior-analyzer';\nimport { TokenManager } from './token-manager';\n\n/**\n * Creates a new GameShield instance\n * @param options GameShield configuration options\n * @returns GameShield instance\n */\nexport function createGameShield(options: GameShieldOptions): GameShield {\n  // Default options\n  const defaultOptions: Partial<GameShieldOptions> = {\n    gameType: 'random',\n    size: '400px',\n    difficulty: 'medium'\n  };\n  \n  // Merge with provided options\n  const mergedOptions: GameShieldOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  \n  // Create behavior analyzer\n  const behaviorAnalyzer = new BehaviorAnalyzer();\n  \n  // Generate a unique session ID\n  const sessionId = generateSessionId();\n  \n  // Game instance reference\n  let gameInstance: Game | null = null;\n  \n  // Initialize the game\n  const initGame = () => {\n    // Create game instance\n    gameInstance = GameFactory.createGame(mergedOptions.gameType!, {\n      container: mergedOptions.container,\n      size: mergedOptions.size!,\n      difficulty: mergedOptions.difficulty,\n      onComplete: handleGameComplete,\n      onError: handleGameError\n    });\n    \n    // Start behavior tracking\n    behaviorAnalyzer.startTracking(mergedOptions.container);\n    \n    // Initialize and start the game\n    gameInstance.init();\n    gameInstance.start();\n  };\n  \n  // Handle game completion\n  const handleGameComplete = (result: GameResult) => {\n    if (!gameInstance) {\n      return;\n    }\n    \n    // Stop behavior tracking\n    behaviorAnalyzer.stopTracking(mergedOptions.container);\n    \n    // Analyze behavior\n    const behaviorMetrics = behaviorAnalyzer.analyze();\n    \n    // Generate verification token\n    const token = TokenManager.generateToken({\n      sub: sessionId,\n      gameResult: result,\n      behaviorMetrics\n    });\n    \n    // Call success callback if game was completed successfully\n    // and behavior analysis indicates a human user\n    if (result.success && behaviorMetrics.isHuman) {\n      if (mergedOptions.onSuccess) {\n        mergedOptions.onSuccess(token);\n      }\n    } else {\n      // Call failure callback\n      if (mergedOptions.onFailure) {\n        const reason = !result.success \n          ? 'Game not completed successfully' \n          : 'Behavior analysis indicates bot-like behavior';\n        mergedOptions.onFailure(reason);\n      }\n    }\n  };\n  \n  // Handle game errors\n  const handleGameError = (error: Error) => {\n    console.error('GameShield error:', error);\n    \n    // Stop behavior tracking\n    behaviorAnalyzer.stopTracking(mergedOptions.container);\n    \n    // Call failure callback\n    if (mergedOptions.onFailure) {\n      mergedOptions.onFailure(`Error: ${error.message}`);\n    }\n  };\n  \n  // Initialize the game\n  initGame();\n  \n  // Return GameShield instance\n  return {\n    reset: () => {\n      // Destroy existing game\n      if (gameInstance) {\n        behaviorAnalyzer.stopTracking(mergedOptions.container);\n        gameInstance.destroy();\n      }\n      \n      // Initialize a new game\n      initGame();\n    },\n    destroy: () => {\n      // Clean up resources\n      if (gameInstance) {\n        behaviorAnalyzer.stopTracking(mergedOptions.container);\n        gameInstance.destroy();\n        gameInstance = null;\n      }\n    }\n  };\n}\n\n/**\n * Generates a unique session ID\n * @returns Unique session ID\n */\nfunction generateSessionId(): string {\n  return 'gs_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n"]}