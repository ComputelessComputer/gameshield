{"version":3,"file":"index399.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nconst defaultMatrix = new Matrix();\nclass Bounds {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /** @default Infinity */\n    this.minX = Infinity;\n    /** @default Infinity */\n    this.minY = Infinity;\n    /** @default -Infinity */\n    this.maxX = -Infinity;\n    /** @default -Infinity */\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if bounds are empty.\n   * @returns - True if empty.\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /** The bounding rectangle of the bounds. */\n  get rectangle() {\n    if (!this._rectangle) {\n      this._rectangle = new Rectangle();\n    }\n    const rectangle = this._rectangle;\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      rectangle.x = 0;\n      rectangle.y = 0;\n      rectangle.width = 0;\n      rectangle.height = 0;\n    } else {\n      rectangle.copyFromBounds(this);\n    }\n    return rectangle;\n  }\n  /** Clears the bounds and resets. */\n  clear() {\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    return this;\n  }\n  /**\n   * Sets the bounds.\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  set(x0, y0, x1, y1) {\n    this.minX = x0;\n    this.minY = y0;\n    this.maxX = x1;\n    this.maxY = y1;\n  }\n  /**\n   * Adds sprite frame\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   * @param matrix\n   */\n  addFrame(x0, y0, x1, y1, matrix) {\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    let x = a * x0 + c * y0 + tx;\n    let y = b * x0 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Adds a rectangle to the bounds.\n   * @param rect - The rectangle to be added.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  addRect(rect, matrix) {\n    this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n  }\n  /**\n   * Adds other {@link Bounds}.\n   * @param bounds - The Bounds to be added\n   * @param matrix\n   */\n  addBounds(bounds, matrix) {\n    this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n  }\n  /**\n   * Adds other Bounds, masked with Bounds.\n   * @param mask - The Bounds to be added.\n   */\n  addBoundsMask(mask) {\n    this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n    this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n    this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n    this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n  }\n  /**\n   * Adds other Bounds, multiplied with matrix.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  applyMatrix(matrix) {\n    const minX = this.minX;\n    const minY = this.minY;\n    const maxX = this.maxX;\n    const maxY = this.maxY;\n    const { a, b, c, d, tx, ty } = matrix;\n    let x = a * minX + c * minY + tx;\n    let y = b * minX + d * minY + ty;\n    this.minX = x;\n    this.minY = y;\n    this.maxX = x;\n    this.maxY = y;\n    x = a * maxX + c * minY + tx;\n    y = b * maxX + d * minY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * minX + c * maxY + tx;\n    y = b * minX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * maxX + c * maxY + tx;\n    y = b * maxX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n  }\n  /**\n   * Resizes the bounds object to include the given rectangle.\n   * @param rect - The rectangle to be included.\n   */\n  fit(rect) {\n    if (this.minX < rect.left)\n      this.minX = rect.left;\n    if (this.maxX > rect.right)\n      this.maxX = rect.right;\n    if (this.minY < rect.top)\n      this.minY = rect.top;\n    if (this.maxY > rect.bottom)\n      this.maxY = rect.bottom;\n    return this;\n  }\n  /**\n   * Resizes the bounds object to include the given bounds.\n   * @param left - The left value of the bounds.\n   * @param right - The right value of the bounds.\n   * @param top - The top value of the bounds.\n   * @param bottom - The bottom value of the bounds.\n   */\n  fitBounds(left, right, top, bottom) {\n    if (this.minX < left)\n      this.minX = left;\n    if (this.maxX > right)\n      this.maxX = right;\n    if (this.minY < top)\n      this.minY = top;\n    if (this.maxY > bottom)\n      this.maxY = bottom;\n    return this;\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   */\n  pad(paddingX, paddingY = paddingX) {\n    this.minX -= paddingX;\n    this.maxX += paddingX;\n    this.minY -= paddingY;\n    this.maxY += paddingY;\n    return this;\n  }\n  /** Ceils the bounds. */\n  ceil() {\n    this.minX = Math.floor(this.minX);\n    this.minY = Math.floor(this.minY);\n    this.maxX = Math.ceil(this.maxX);\n    this.maxY = Math.ceil(this.maxY);\n    return this;\n  }\n  /** Clones the bounds. */\n  clone() {\n    return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n  }\n  /**\n   * Scales the bounds by the given values\n   * @param x - The X value to scale by.\n   * @param y - The Y value to scale by.\n   */\n  scale(x, y = x) {\n    this.minX *= x;\n    this.minY *= y;\n    this.maxX *= x;\n    this.maxY *= y;\n    return this;\n  }\n  /** the x value of the bounds. */\n  get x() {\n    return this.minX;\n  }\n  set x(value) {\n    const width = this.maxX - this.minX;\n    this.minX = value;\n    this.maxX = value + width;\n  }\n  /** the y value of the bounds. */\n  get y() {\n    return this.minY;\n  }\n  set y(value) {\n    const height = this.maxY - this.minY;\n    this.minY = value;\n    this.maxY = value + height;\n  }\n  /** the width value of the bounds. */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  set width(value) {\n    this.maxX = this.minX + value;\n  }\n  /** the height value of the bounds. */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  set height(value) {\n    this.maxY = this.minY + value;\n  }\n  /** the left value of the bounds. */\n  get left() {\n    return this.minX;\n  }\n  /** the right value of the bounds. */\n  get right() {\n    return this.maxX;\n  }\n  /** the top value of the bounds. */\n  get top() {\n    return this.minY;\n  }\n  /** the bottom value of the bounds. */\n  get bottom() {\n    return this.maxY;\n  }\n  /** Is the bounds positive. */\n  get isPositive() {\n    return this.maxX - this.minX > 0 && this.maxY - this.minY > 0;\n  }\n  get isValid() {\n    return this.minX + this.minY !== Infinity;\n  }\n  /**\n   * Adds screen vertices from array\n   * @param vertexData - calculated vertices\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   * @param matrix\n   */\n  addVertexData(vertexData, beginOffset, endOffset, matrix) {\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const localX = vertexData[i];\n      const localY = vertexData[i + 1];\n      const x = a * localX + c * localY + tx;\n      const y = b * localX + d * localY + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if the point is contained within the bounds.\n   * @param x - x coordinate\n   * @param y - y coordinate\n   */\n  containsPoint(x, y) {\n    if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y) {\n      return true;\n    }\n    return false;\n  }\n  toString() {\n    return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n  }\n  /**\n   * Copies the bounds from another bounds object.\n   * @param bounds - The bounds to copy from.\n   * @returns - This bounds object.\n   */\n  copyFrom(bounds) {\n    this.minX = bounds.minX;\n    this.minY = bounds.minY;\n    this.maxX = bounds.maxX;\n    this.maxY = bounds.maxY;\n    return this;\n  }\n}\n\nexport { Bounds };\n//# sourceMappingURL=Bounds.mjs.map\n"],"names":["defaultMatrix","Matrix","Bounds","minX","minY","maxX","maxY","Rectangle","rectangle","x0","y0","x1","y1","matrix","a","b","c","d","tx","ty","x","y","rect","bounds","mask","left","right","top","bottom","paddingX","paddingY","value","width","height","vertexData","beginOffset","endOffset","i","localX","localY"],"mappings":";;AAIA,MAAMA,IAAgB,IAAIC;AAC1B,MAAMC,EAAO;AAAA,EACX,YAAYC,IAAO,OAAUC,IAAO,OAAUC,IAAO,QAAWC,IAAO,QAAW;AAEhF,SAAK,OAAO,OAEZ,KAAK,OAAO,OAEZ,KAAK,OAAO,QAEZ,KAAK,OAAO,QACZ,KAAK,SAASN,GACd,KAAK,OAAOG,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,UAAU;AACR,WAAO,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAO,KAAK;AAAA,EAClD;AAAA;AAAA,EAED,IAAI,YAAY;AACd,IAAK,KAAK,eACR,KAAK,aAAa,IAAIC;AAExB,UAAMC,IAAY,KAAK;AACvB,WAAI,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAO,KAAK,QAC5CA,EAAU,IAAI,GACdA,EAAU,IAAI,GACdA,EAAU,QAAQ,GAClBA,EAAU,SAAS,KAEnBA,EAAU,eAAe,IAAI,GAExBA;AAAA,EACR;AAAA;AAAA,EAED,QAAQ;AACN,gBAAK,OAAO,OACZ,KAAK,OAAO,OACZ,KAAK,OAAO,QACZ,KAAK,OAAO,QACZ,KAAK,SAASR,GACP;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,IAAIS,GAAIC,GAAIC,GAAIC,GAAI;AAClB,SAAK,OAAOH,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,SAASH,GAAIC,GAAIC,GAAIC,GAAIC,GAAQ;AAC/B,IAAAA,MAAWA,IAAS,KAAK;AACzB,UAAMC,IAAID,EAAO,GACXE,IAAIF,EAAO,GACXG,IAAIH,EAAO,GACXI,IAAIJ,EAAO,GACXK,IAAKL,EAAO,IACZM,IAAKN,EAAO;AAClB,QAAIV,IAAO,KAAK,MACZC,IAAO,KAAK,MACZC,IAAO,KAAK,MACZC,IAAO,KAAK,MACZc,IAAIN,IAAIL,IAAKO,IAAIN,IAAKQ,GACtBG,IAAIN,IAAIN,IAAKQ,IAAIP,IAAKS;AAC1B,IAAIC,IAAIjB,MACNA,IAAOiB,IACLC,IAAIjB,MACNA,IAAOiB,IACLD,IAAIf,MACNA,IAAOe,IACLC,IAAIf,MACNA,IAAOe,IACTD,IAAIN,IAAIH,IAAKK,IAAIN,IAAKQ,GACtBG,IAAIN,IAAIJ,IAAKM,IAAIP,IAAKS,GAClBC,IAAIjB,MACNA,IAAOiB,IACLC,IAAIjB,MACNA,IAAOiB,IACLD,IAAIf,MACNA,IAAOe,IACLC,IAAIf,MACNA,IAAOe,IACTD,IAAIN,IAAIL,IAAKO,IAAIJ,IAAKM,GACtBG,IAAIN,IAAIN,IAAKQ,IAAIL,IAAKO,GAClBC,IAAIjB,MACNA,IAAOiB,IACLC,IAAIjB,MACNA,IAAOiB,IACLD,IAAIf,MACNA,IAAOe,IACLC,IAAIf,MACNA,IAAOe,IACTD,IAAIN,IAAIH,IAAKK,IAAIJ,IAAKM,GACtBG,IAAIN,IAAIJ,IAAKM,IAAIL,IAAKO,GAClBC,IAAIjB,MACNA,IAAOiB,IACLC,IAAIjB,MACNA,IAAOiB,IACLD,IAAIf,MACNA,IAAOe,IACLC,IAAIf,MACNA,IAAOe,IACT,KAAK,OAAOlB,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQgB,GAAMT,GAAQ;AACpB,SAAK,SAASS,EAAK,GAAGA,EAAK,GAAGA,EAAK,IAAIA,EAAK,OAAOA,EAAK,IAAIA,EAAK,QAAQT,CAAM;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAUU,GAAQV,GAAQ;AACxB,SAAK,SAASU,EAAO,MAAMA,EAAO,MAAMA,EAAO,MAAMA,EAAO,MAAMV,CAAM;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,cAAcW,GAAM;AAClB,SAAK,OAAO,KAAK,OAAOA,EAAK,OAAO,KAAK,OAAOA,EAAK,MACrD,KAAK,OAAO,KAAK,OAAOA,EAAK,OAAO,KAAK,OAAOA,EAAK,MACrD,KAAK,OAAO,KAAK,OAAOA,EAAK,OAAO,KAAK,OAAOA,EAAK,MACrD,KAAK,OAAO,KAAK,OAAOA,EAAK,OAAO,KAAK,OAAOA,EAAK;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,YAAYX,GAAQ;AAClB,UAAMV,IAAO,KAAK,MACZC,IAAO,KAAK,MACZC,IAAO,KAAK,MACZC,IAAO,KAAK,MACZ,EAAE,GAAAQ,GAAG,GAAAC,GAAG,GAAAC,GAAG,GAAAC,GAAG,IAAAC,GAAI,IAAAC,EAAI,IAAGN;AAC/B,QAAIO,IAAIN,IAAIX,IAAOa,IAAIZ,IAAOc,GAC1BG,IAAIN,IAAIZ,IAAOc,IAAIb,IAAOe;AAC9B,SAAK,OAAOC,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOD,GACZ,KAAK,OAAOC,GACZD,IAAIN,IAAIT,IAAOW,IAAIZ,IAAOc,GAC1BG,IAAIN,IAAIV,IAAOY,IAAIb,IAAOe,GAC1B,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOD,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrCD,IAAIN,IAAIX,IAAOa,IAAIV,IAAOY,GAC1BG,IAAIN,IAAIZ,IAAOc,IAAIX,IAAOa,GAC1B,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOD,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrCD,IAAIN,IAAIT,IAAOW,IAAIV,IAAOY,GAC1BG,IAAIN,IAAIV,IAAOY,IAAIX,IAAOa,GAC1B,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOD,IAAI,KAAK,OAAOA,IAAI,KAAK,MACrC,KAAK,OAAOC,IAAI,KAAK,OAAOA,IAAI,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAIC,GAAM;AACR,WAAI,KAAK,OAAOA,EAAK,SACnB,KAAK,OAAOA,EAAK,OACf,KAAK,OAAOA,EAAK,UACnB,KAAK,OAAOA,EAAK,QACf,KAAK,OAAOA,EAAK,QACnB,KAAK,OAAOA,EAAK,MACf,KAAK,OAAOA,EAAK,WACnB,KAAK,OAAOA,EAAK,SACZ;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,UAAUG,GAAMC,GAAOC,GAAKC,GAAQ;AAClC,WAAI,KAAK,OAAOH,MACd,KAAK,OAAOA,IACV,KAAK,OAAOC,MACd,KAAK,OAAOA,IACV,KAAK,OAAOC,MACd,KAAK,OAAOA,IACV,KAAK,OAAOC,MACd,KAAK,OAAOA,IACP;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAIC,GAAUC,IAAWD,GAAU;AACjC,gBAAK,QAAQA,GACb,KAAK,QAAQA,GACb,KAAK,QAAQC,GACb,KAAK,QAAQA,GACN;AAAA,EACR;AAAA;AAAA,EAED,OAAO;AACL,gBAAK,OAAO,KAAK,MAAM,KAAK,IAAI,GAChC,KAAK,OAAO,KAAK,MAAM,KAAK,IAAI,GAChC,KAAK,OAAO,KAAK,KAAK,KAAK,IAAI,GAC/B,KAAK,OAAO,KAAK,KAAK,KAAK,IAAI,GACxB;AAAA,EACR;AAAA;AAAA,EAED,QAAQ;AACN,WAAO,IAAI5B,EAAO,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAMkB,GAAGC,IAAID,GAAG;AACd,gBAAK,QAAQA,GACb,KAAK,QAAQC,GACb,KAAK,QAAQD,GACb,KAAK,QAAQC,GACN;AAAA,EACR;AAAA;AAAA,EAED,IAAI,IAAI;AACN,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,EAAEU,GAAO;AACX,UAAMC,IAAQ,KAAK,OAAO,KAAK;AAC/B,SAAK,OAAOD,GACZ,KAAK,OAAOA,IAAQC;AAAA,EACrB;AAAA;AAAA,EAED,IAAI,IAAI;AACN,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,EAAED,GAAO;AACX,UAAME,IAAS,KAAK,OAAO,KAAK;AAChC,SAAK,OAAOF,GACZ,KAAK,OAAOA,IAAQE;AAAA,EACrB;AAAA;AAAA,EAED,IAAI,QAAQ;AACV,WAAO,KAAK,OAAO,KAAK;AAAA,EACzB;AAAA,EACD,IAAI,MAAMF,GAAO;AACf,SAAK,OAAO,KAAK,OAAOA;AAAA,EACzB;AAAA;AAAA,EAED,IAAI,SAAS;AACX,WAAO,KAAK,OAAO,KAAK;AAAA,EACzB;AAAA,EACD,IAAI,OAAOA,GAAO;AAChB,SAAK,OAAO,KAAK,OAAOA;AAAA,EACzB;AAAA;AAAA,EAED,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAED,IAAI,QAAQ;AACV,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAED,IAAI,MAAM;AACR,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAED,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAED,IAAI,aAAa;AACf,WAAO,KAAK,OAAO,KAAK,OAAO,KAAK,KAAK,OAAO,KAAK,OAAO;AAAA,EAC7D;AAAA,EACD,IAAI,UAAU;AACZ,WAAO,KAAK,OAAO,KAAK,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,cAAcG,GAAYC,GAAaC,GAAWvB,GAAQ;AACxD,QAAIV,IAAO,KAAK,MACZC,IAAO,KAAK,MACZC,IAAO,KAAK,MACZC,IAAO,KAAK;AAChB,IAAAO,MAAWA,IAAS,KAAK;AACzB,UAAMC,IAAID,EAAO,GACXE,IAAIF,EAAO,GACXG,IAAIH,EAAO,GACXI,IAAIJ,EAAO,GACXK,IAAKL,EAAO,IACZM,IAAKN,EAAO;AAClB,aAASwB,IAAIF,GAAaE,IAAID,GAAWC,KAAK,GAAG;AAC/C,YAAMC,IAASJ,EAAWG,CAAC,GACrBE,IAASL,EAAWG,IAAI,CAAC,GACzBjB,IAAIN,IAAIwB,IAAStB,IAAIuB,IAASrB,GAC9BG,IAAIN,IAAIuB,IAASrB,IAAIsB,IAASpB;AACpC,MAAAhB,IAAOiB,IAAIjB,IAAOiB,IAAIjB,GACtBC,IAAOiB,IAAIjB,IAAOiB,IAAIjB,GACtBC,IAAOe,IAAIf,IAAOe,IAAIf,GACtBC,IAAOe,IAAIf,IAAOe,IAAIf;AAAA,IACvB;AACD,SAAK,OAAOH,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC,GACZ,KAAK,OAAOC;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,cAAcc,GAAGC,GAAG;AAClB,WAAI,KAAK,QAAQD,KAAK,KAAK,QAAQC,KAAK,KAAK,QAAQD,KAAK,KAAK,QAAQC;AAAA,EAIxE;AAAA,EACD,WAAW;AACT,WAAO,wBAAwB,KAAK,IAAI,SAAS,KAAK,IAAI,SAAS,KAAK,IAAI,SAAS,KAAK,IAAI,UAAU,KAAK,KAAK,WAAW,KAAK,MAAM;AAAA,EACzI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,SAASE,GAAQ;AACf,gBAAK,OAAOA,EAAO,MACnB,KAAK,OAAOA,EAAO,MACnB,KAAK,OAAOA,EAAO,MACnB,KAAK,OAAOA,EAAO,MACZ;AAAA,EACR;AACH;","x_google_ignoreList":[0]}