{"version":3,"file":"index12.js","sources":["../src/games/breakout-game.ts"],"sourcesContent":["import { Game, GameOptions } from '../types';\nimport * as PIXI from 'pixi.js';\n\ninterface Brick {\n  graphics: PIXI.Graphics;\n  health: number;\n}\n\n/**\n * BreakoutGame\n * \n * A simple Breakout game implementation for GameShield CAPTCHA.\n */\nexport class BreakoutGame implements Game {\n  private app: PIXI.Application | null = null;\n  private paddle: PIXI.Graphics | null = null;\n  private ball: PIXI.Graphics | null = null;\n  private bricks: Brick[] = [];\n  private scoreText: PIXI.Text | null = null;\n  private instructionText: PIXI.Text | null = null;\n  \n  private ballVelocity = { x: 0, y: 0 };\n  private score = 0;\n  private targetScore = 5; // Score needed to pass the CAPTCHA\n  private gameStarted = false;\n  private gameEnded = false;\n  \n  private readonly options: GameOptions;\n  \n  constructor(options: GameOptions) {\n    this.options = options;\n    \n    // Adjust difficulty\n    switch (options.difficulty) {\n      case 'easy':\n        this.targetScore = 5;\n        break;\n      case 'medium':\n        this.targetScore = 10;\n        break;\n      case 'hard':\n        this.targetScore = 15;\n        break;\n    }\n  }\n  \n  /**\n   * Mount the game to a container element\n   */\n  public async mount(container: HTMLElement): Promise<void> {\n    // Create PIXI application\n    this.app = new PIXI.Application({\n      width: this.options.width,\n      height: this.options.height,\n      backgroundColor: 0x1a1a1a,\n      resolution: window.devicePixelRatio || 1,\n      antialias: true\n    });\n    \n    // Add the canvas to the container\n    container.appendChild(this.app.view as unknown as HTMLCanvasElement);\n    \n    // Create game elements\n    this.createGameElements();\n    \n    // Add event listeners\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    \n    // Start game loop\n    this.app.ticker.add(this.gameLoop.bind(this));\n  }\n  \n  /**\n   * Destroy the game and clean up resources\n   */\n  public destroy(): void {\n    if (this.app) {\n      // Remove event listeners\n      window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n      window.removeEventListener('mousemove', this.handleMouseMove.bind(this));\n      \n      // Destroy PIXI application\n      this.app.destroy(true, { children: true, texture: true, baseTexture: true });\n      this.app = null;\n    }\n    \n    // Reset game state\n    this.paddle = null;\n    this.ball = null;\n    this.bricks = [];\n    this.scoreText = null;\n    this.instructionText = null;\n    this.gameStarted = false;\n    this.gameEnded = false;\n    this.score = 0;\n  }\n  \n  /**\n   * Create game elements\n   */\n  private createGameElements(): void {\n    if (!this.app) return;\n    \n    // Create paddle\n    this.paddle = new PIXI.Graphics();\n    this.paddle.beginFill(0xffffff);\n    this.paddle.drawRect(0, 0, 100, 10);\n    this.paddle.endFill();\n    this.paddle.x = this.app.screen.width / 2 - 50;\n    this.paddle.y = this.app.screen.height - 20;\n    this.app.stage.addChild(this.paddle);\n    \n    // Create ball\n    this.ball = new PIXI.Graphics();\n    this.ball.beginFill(0xffffff);\n    this.ball.drawCircle(0, 0, 8);\n    this.ball.endFill();\n    this.ball.x = this.app.screen.width / 2;\n    this.ball.y = this.app.screen.height - 40;\n    this.app.stage.addChild(this.ball);\n    \n    // Create bricks\n    this.createBricks();\n    \n    // Create score text\n    this.scoreText = new PIXI.Text(`Score: ${this.score}/${this.targetScore}`, {\n      fontFamily: 'Arial',\n      fontSize: 16,\n      fill: 0xffffff\n    });\n    this.scoreText.x = 10;\n    this.scoreText.y = 10;\n    this.app.stage.addChild(this.scoreText);\n    \n    // Create instruction text\n    this.instructionText = new PIXI.Text('Press SPACE to start', {\n      fontFamily: 'Arial',\n      fontSize: 20,\n      fill: 0xffffff\n    });\n    this.instructionText.x = this.app.screen.width / 2 - this.instructionText.width / 2;\n    this.instructionText.y = this.app.screen.height / 2;\n    this.app.stage.addChild(this.instructionText);\n  }\n  \n  /**\n   * Create brick layout\n   */\n  private createBricks(): void {\n    if (!this.app) return;\n    \n    const brickWidth = 50;\n    const brickHeight = 20;\n    const padding = 5;\n    const rows = 4;\n    const cols = Math.floor(this.app.screen.width / (brickWidth + padding));\n    const startX = (this.app.screen.width - (cols * (brickWidth + padding) - padding)) / 2;\n    const startY = 50;\n    \n    const colors = [0xff0000, 0xff7f00, 0xffff00, 0x00ff00, 0x0000ff, 0x4b0082, 0x9400d3];\n    \n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const brick = new PIXI.Graphics();\n        brick.beginFill(colors[row % colors.length]);\n        brick.drawRect(0, 0, brickWidth, brickHeight);\n        brick.endFill();\n        brick.x = startX + col * (brickWidth + padding);\n        brick.y = startY + row * (brickHeight + padding);\n        \n        this.app.stage.addChild(brick);\n        \n        this.bricks.push({\n          graphics: brick,\n          health: 1\n        });\n      }\n    }\n  }\n  \n  /**\n   * Reset ball position and velocity\n   */\n  private resetBall(): void {\n    if (!this.app || !this.ball || !this.paddle) return;\n    \n    this.ball.x = this.paddle.x + this.paddle.width / 2;\n    this.ball.y = this.paddle.y - 10;\n    \n    // Random angle, but always moving upward\n    const angle = Math.random() * Math.PI / 2 + Math.PI / 4; // π/4 to 3π/4\n    const speed = 5;\n    \n    this.ballVelocity = {\n      x: Math.cos(angle) * speed,\n      y: -Math.sin(angle) * speed\n    };\n  }\n  \n  /**\n   * Handle keyboard input\n   */\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (event.code === 'Space' && !this.gameStarted && !this.gameEnded) {\n      this.startGame();\n    }\n  }\n  \n  /**\n   * Handle mouse movement for paddle control\n   */\n  private handleMouseMove(event: MouseEvent): void {\n    if (!this.app || !this.paddle) return;\n    \n    const rect = (this.app.view as HTMLCanvasElement).getBoundingClientRect();\n    const relativeX = event.clientX - rect.left;\n    \n    // Move paddle with mouse\n    this.paddle.x = Math.max(0, Math.min(this.app.screen.width - this.paddle.width, relativeX - this.paddle.width / 2));\n  }\n  \n  /**\n   * Start the game\n   */\n  private startGame(): void {\n    if (!this.app || !this.instructionText) return;\n    \n    this.gameStarted = true;\n    this.resetBall();\n    this.app.stage.removeChild(this.instructionText);\n    this.instructionText = null;\n  }\n  \n  /**\n   * End the game\n   */\n  private endGame(success: boolean): void {\n    if (!this.app || this.gameEnded) return;\n    \n    this.gameEnded = true;\n    \n    // Create result text\n    const resultText = new PIXI.Text(\n      success ? 'CAPTCHA Passed!' : 'CAPTCHA Failed!',\n      {\n        fontFamily: 'Arial',\n        fontSize: 24,\n        fill: success ? 0x00ff00 : 0xff0000,\n        fontWeight: 'bold'\n      }\n    );\n    \n    resultText.x = this.app.screen.width / 2 - resultText.width / 2;\n    resultText.y = this.app.screen.height / 2 - resultText.height / 2;\n    this.app.stage.addChild(resultText);\n    \n    // Notify completion\n    setTimeout(() => {\n      this.options.onComplete({\n        success,\n        score: this.score\n      });\n    }, 1500);\n  }\n  \n  /**\n   * Game loop\n   */\n  private gameLoop(delta: number): void {\n    if (!this.app || !this.ball || !this.paddle || !this.scoreText) return;\n    \n    if (!this.gameStarted || this.gameEnded) return;\n    \n    // Move ball\n    this.ball.x += this.ballVelocity.x * delta;\n    this.ball.y += this.ballVelocity.y * delta;\n    \n    // Ball collision with walls\n    if (this.ball.x <= 0 || this.ball.x >= this.app.screen.width) {\n      this.ballVelocity.x *= -1;\n    }\n    \n    // Ball collision with ceiling\n    if (this.ball.y <= 0) {\n      this.ballVelocity.y *= -1;\n    }\n    \n    // Ball collision with floor (player loses)\n    if (this.ball.y >= this.app.screen.height) {\n      this.endGame(false);\n      return;\n    }\n    \n    // Ball collision with paddle\n    if (\n      this.ball.y >= this.paddle.y - this.ball.height / 2 &&\n      this.ball.y <= this.paddle.y + this.paddle.height &&\n      this.ball.x >= this.paddle.x &&\n      this.ball.x <= this.paddle.x + this.paddle.width\n    ) {\n      this.ballVelocity.y *= -1;\n      this.ball.y = this.paddle.y - this.ball.height / 2;\n      \n      // Add some angle based on where the ball hit the paddle\n      const hitPosition = (this.ball.x - this.paddle.x) / this.paddle.width;\n      this.ballVelocity.x = (hitPosition - 0.5) * 10;\n    }\n    \n    // Ball collision with bricks\n    for (let i = 0; i < this.bricks.length; i++) {\n      const brick = this.bricks[i];\n      \n      if (\n        this.ball.x >= brick.graphics.x - this.ball.width / 2 &&\n        this.ball.x <= brick.graphics.x + brick.graphics.width + this.ball.width / 2 &&\n        this.ball.y >= brick.graphics.y - this.ball.height / 2 &&\n        this.ball.y <= brick.graphics.y + brick.graphics.height + this.ball.height / 2\n      ) {\n        // Determine which side of the brick was hit\n        const overlapLeft = this.ball.x - (brick.graphics.x - this.ball.width / 2);\n        const overlapRight = (brick.graphics.x + brick.graphics.width + this.ball.width / 2) - this.ball.x;\n        const overlapTop = this.ball.y - (brick.graphics.y - this.ball.height / 2);\n        const overlapBottom = (brick.graphics.y + brick.graphics.height + this.ball.height / 2) - this.ball.y;\n        \n        // Find the smallest overlap\n        const minOverlap = Math.min(overlapLeft, overlapRight, overlapTop, overlapBottom);\n        \n        // Bounce based on which side was hit\n        if (minOverlap === overlapLeft || minOverlap === overlapRight) {\n          this.ballVelocity.x *= -1;\n        } else {\n          this.ballVelocity.y *= -1;\n        }\n        \n        // Damage brick\n        brick.health--;\n        \n        if (brick.health <= 0) {\n          // Remove brick\n          this.app.stage.removeChild(brick.graphics);\n          this.bricks.splice(i, 1);\n          i--;\n          \n          // Increase score\n          this.score++;\n          this.scoreText.text = `Score: ${this.score}/${this.targetScore}`;\n          \n          // Check if player has won\n          if (this.score >= this.targetScore || this.bricks.length === 0) {\n            this.endGame(true);\n            return;\n          }\n        }\n        \n        // Only handle one collision per frame\n        break;\n      }\n    }\n  }\n}\n"],"names":["BreakoutGame","options","container","PIXI.Application","PIXI.Graphics","PIXI.Text","brickWidth","brickHeight","padding","rows","cols","startX","startY","colors","row","col","brick","angle","speed","event","rect","relativeX","success","resultText","delta","hitPosition","i","overlapLeft","overlapRight","overlapTop","overlapBottom","minOverlap"],"mappings":"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"}