{"version":3,"file":"index175.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/batch/BatchShaderGenerator.mjs"],"sourcesContent":["import { Matrix } from \"@pixi/math\";\nimport { Program } from \"../shader/Program.mjs\";\nimport { Shader } from \"../shader/Shader.mjs\";\nimport { UniformGroup } from \"../shader/UniformGroup.mjs\";\nclass BatchShaderGenerator {\n  /**\n   * @param vertexSrc - Vertex shader\n   * @param fragTemplate - Fragment shader template\n   */\n  constructor(vertexSrc, fragTemplate) {\n    if (this.vertexSrc = vertexSrc, this.fragTemplate = fragTemplate, this.programCache = {}, this.defaultGroupCache = {}, !fragTemplate.includes(\"%count%\"))\n      throw new Error('Fragment template must contain \"%count%\".');\n    if (!fragTemplate.includes(\"%forloop%\"))\n      throw new Error('Fragment template must contain \"%forloop%\".');\n  }\n  generateShader(maxTextures) {\n    if (!this.programCache[maxTextures]) {\n      const sampleValues = new Int32Array(maxTextures);\n      for (let i = 0; i < maxTextures; i++)\n        sampleValues[i] = i;\n      this.defaultGroupCache[maxTextures] = UniformGroup.from({ uSamplers: sampleValues }, !0);\n      let fragmentSrc = this.fragTemplate;\n      fragmentSrc = fragmentSrc.replace(/%count%/gi, `${maxTextures}`), fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures)), this.programCache[maxTextures] = new Program(this.vertexSrc, fragmentSrc);\n    }\n    const uniforms = {\n      tint: new Float32Array([1, 1, 1, 1]),\n      translationMatrix: new Matrix(),\n      default: this.defaultGroupCache[maxTextures]\n    };\n    return new Shader(this.programCache[maxTextures], uniforms);\n  }\n  generateSampleSrc(maxTextures) {\n    let src = \"\";\n    src += `\n`, src += `\n`;\n    for (let i = 0; i < maxTextures; i++)\n      i > 0 && (src += `\nelse `), i < maxTextures - 1 && (src += `if(vTextureId < ${i}.5)`), src += `\n{`, src += `\n\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`, src += `\n}`;\n    return src += `\n`, src += `\n`, src;\n  }\n}\nexport {\n  BatchShaderGenerator\n};\n//# sourceMappingURL=BatchShaderGenerator.mjs.map\n"],"names":["BatchShaderGenerator","vertexSrc","fragTemplate","maxTextures","sampleValues","UniformGroup","fragmentSrc","Program","uniforms","Matrix","Shader","src","i"],"mappings":";;;;;;;;;;;;;AAIA,MAAMA,EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzB,YAAYC,GAAWC,GAAc;AACnC,QAAI,KAAK,YAAYD,GAAW,KAAK,eAAeC,GAAc,KAAK,eAAe,CAAE,GAAE,KAAK,oBAAoB,CAAA,GAAI,CAACA,EAAa,SAAS,SAAS;AACrJ,YAAM,IAAI,MAAM,2CAA2C;AAC7D,QAAI,CAACA,EAAa,SAAS,WAAW;AACpC,YAAM,IAAI,MAAM,6CAA6C;AAAA,EAChE;AAAA,EACD,eAAeC,GAAa;AAC1B,QAAI,CAAC,KAAK,aAAaA,CAAW,GAAG;AACnC,YAAMC,IAAe,IAAI,WAAWD,CAAW;AAC/C,eAAS,IAAI,GAAG,IAAIA,GAAa;AAC/B,QAAAC,EAAa,CAAC,IAAI;AACpB,WAAK,kBAAkBD,CAAW,IAAIE,EAAa,KAAK,EAAE,WAAWD,EAAY,GAAI,EAAE;AACvF,UAAIE,IAAc,KAAK;AACvB,MAAAA,IAAcA,EAAY,QAAQ,aAAa,GAAGH,CAAW,EAAE,GAAGG,IAAcA,EAAY,QAAQ,eAAe,KAAK,kBAAkBH,CAAW,CAAC,GAAG,KAAK,aAAaA,CAAW,IAAI,IAAII,EAAQ,KAAK,WAAWD,CAAW;AAAA,IAClO;AACD,UAAME,IAAW;AAAA,MACf,MAAM,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,MACnC,mBAAmB,IAAIC,EAAQ;AAAA,MAC/B,SAAS,KAAK,kBAAkBN,CAAW;AAAA,IACjD;AACI,WAAO,IAAIO,EAAO,KAAK,aAAaP,CAAW,GAAGK,CAAQ;AAAA,EAC3D;AAAA,EACD,kBAAkBL,GAAa;AAC7B,QAAIQ,IAAM;AACV,IAAAA,KAAO;AAAA,GACRA,KAAO;AAAA;AAEN,aAASC,IAAI,GAAGA,IAAIT,GAAaS;AAC/B,MAAAA,IAAI,MAAMD,KAAO;AAAA,SACdC,IAAIT,IAAc,MAAMQ,KAAO,mBAAmBC,CAAC,QAAQD,KAAO;AAAA,IACvEA,KAAO;AAAA,+BACoBC,CAAC,sBAAsBD,KAAO;AAAA;AAEzD,WAAOA,KAAO;AAAA,GACfA,KAAO;AAAA,GACPA;AAAA,EACA;AACH;","x_google_ignoreList":[0]}