{"version":3,"file":"index62.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/Renderer.mjs"],"sourcesContent":["import { RENDERER_TYPE } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Matrix } from \"@pixi/math\";\nimport { settings } from \"@pixi/settings\";\nimport { deprecation, isWebGLSupported } from \"@pixi/utils\";\nimport { UniformGroup } from \"./shader/UniformGroup.mjs\";\nimport { SystemManager } from \"./system/SystemManager.mjs\";\nconst _Renderer = class _Renderer2 extends SystemManager {\n  /**\n   * @param {PIXI.IRendererOptions} [options] - See {@link PIXI.settings.RENDER_OPTIONS} for defaults.\n   */\n  constructor(options) {\n    super(), this.type = RENDERER_TYPE.WEBGL, options = Object.assign({}, settings.RENDER_OPTIONS, options), this.gl = null, this.CONTEXT_UID = 0, this.globalUniforms = new UniformGroup({\n      projectionMatrix: new Matrix()\n    }, !0);\n    const systemConfig = {\n      runners: [\n        \"init\",\n        \"destroy\",\n        \"contextChange\",\n        \"resolutionChange\",\n        \"reset\",\n        \"update\",\n        \"postrender\",\n        \"prerender\",\n        \"resize\"\n      ],\n      systems: _Renderer2.__systems,\n      priority: [\n        \"_view\",\n        \"textureGenerator\",\n        \"background\",\n        \"_plugin\",\n        \"startup\",\n        // low level WebGL systems\n        \"context\",\n        \"state\",\n        \"texture\",\n        \"buffer\",\n        \"geometry\",\n        \"framebuffer\",\n        \"transformFeedback\",\n        // high level pixi specific rendering\n        \"mask\",\n        \"scissor\",\n        \"stencil\",\n        \"projection\",\n        \"textureGC\",\n        \"filter\",\n        \"renderTexture\",\n        \"batch\",\n        \"objectRenderer\",\n        \"_multisample\"\n      ]\n    };\n    this.setup(systemConfig), \"useContextAlpha\" in options && (deprecation(\"7.0.0\", \"options.useContextAlpha is deprecated, use options.premultipliedAlpha and options.backgroundAlpha instead\"), options.premultipliedAlpha = options.useContextAlpha && options.useContextAlpha !== \"notMultiplied\", options.backgroundAlpha = options.useContextAlpha === !1 ? 1 : options.backgroundAlpha), this._plugin.rendererPlugins = _Renderer2.__plugins, this.options = options, this.startup.run(this.options);\n  }\n  /**\n   * Create renderer if WebGL is available. Overrideable\n   * by the **@pixi/canvas-renderer** package to allow fallback.\n   * throws error if WebGL is not available.\n   * @param options\n   * @private\n   */\n  static test(options) {\n    return options?.forceCanvas ? !1 : isWebGLSupported();\n  }\n  /**\n   * Renders the object to its WebGL view.\n   * @param displayObject - The object to be rendered.\n   * @param {object} [options] - Object to use for render options.\n   * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n   * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n   * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n   * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n   */\n  render(displayObject, options) {\n    this.objectRenderer.render(displayObject, options);\n  }\n  /**\n   * Resizes the WebGL view to the specified width and height.\n   * @param desiredScreenWidth - The desired width of the screen.\n   * @param desiredScreenHeight - The desired height of the screen.\n   */\n  resize(desiredScreenWidth, desiredScreenHeight) {\n    this._view.resizeView(desiredScreenWidth, desiredScreenHeight);\n  }\n  /**\n   * Resets the WebGL state so you can render things however you fancy!\n   * @returns Returns itself.\n   */\n  reset() {\n    return this.runners.reset.emit(), this;\n  }\n  /** Clear the frame buffer. */\n  clear() {\n    this.renderTexture.bind(), this.renderTexture.clear();\n  }\n  /**\n   * Removes everything from the renderer (event listeners, spritebatch, etc...)\n   * @param [removeView=false] - Removes the Canvas element from the DOM.\n   *  See: https://github.com/pixijs/pixijs/issues/2233\n   */\n  destroy(removeView = !1) {\n    this.runners.destroy.items.reverse(), this.emitWithCustomOptions(this.runners.destroy, {\n      _view: removeView\n    }), super.destroy();\n  }\n  /** Collection of plugins */\n  get plugins() {\n    return this._plugin.plugins;\n  }\n  /** The number of msaa samples of the canvas. */\n  get multisample() {\n    return this._multisample.multisample;\n  }\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal.\n   * @member {number}\n   * @readonly\n   * @default 800\n   */\n  get width() {\n    return this._view.element.width;\n  }\n  /**\n   * Same as view.height, actual number of pixels in the canvas by vertical.\n   * @default 600\n   */\n  get height() {\n    return this._view.element.height;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this._view.resolution;\n  }\n  set resolution(value) {\n    this._view.resolution = value, this.runners.resolutionChange.emit(value);\n  }\n  /** Whether CSS dimensions of canvas view should be resized to screen dimensions automatically. */\n  get autoDensity() {\n    return this._view.autoDensity;\n  }\n  /** The canvas element that everything is drawn to.*/\n  get view() {\n    return this._view.element;\n  }\n  /**\n   * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n   *\n   * Its safe to use as filterArea or hitArea for the whole stage.\n   * @member {PIXI.Rectangle}\n   */\n  get screen() {\n    return this._view.screen;\n  }\n  /** the last object rendered by the renderer. Useful for other plugins like interaction managers */\n  get lastObjectRendered() {\n    return this.objectRenderer.lastObjectRendered;\n  }\n  /** Flag if we are rendering to the screen vs renderTexture */\n  get renderingToScreen() {\n    return this.objectRenderer.renderingToScreen;\n  }\n  /** When logging Pixi to the console, this is the name we will show */\n  get rendererLogId() {\n    return `WebGL ${this.context.webGLVersion}`;\n  }\n  /**\n   * This sets weather the screen is totally cleared between each frame withthe background color and alpha\n   * @deprecated since 7.0.0\n   */\n  get clearBeforeRender() {\n    return deprecation(\"7.0.0\", \"renderer.clearBeforeRender has been deprecated, please use renderer.background.clearBeforeRender instead.\"), this.background.clearBeforeRender;\n  }\n  /**\n   * Pass-thru setting for the canvas' context `alpha` property. This is typically\n   * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n   * @deprecated since 7.0.0\n   * @member {boolean}\n   */\n  get useContextAlpha() {\n    return deprecation(\"7.0.0\", \"renderer.useContextAlpha has been deprecated, please use renderer.context.premultipliedAlpha instead.\"), this.context.useContextAlpha;\n  }\n  /**\n   * readonly drawing buffer preservation\n   * we can only know this if Pixi created the context\n   * @deprecated since 7.0.0\n   */\n  get preserveDrawingBuffer() {\n    return deprecation(\"7.0.0\", \"renderer.preserveDrawingBuffer has been deprecated, we cannot truly know this unless pixi created the context\"), this.context.preserveDrawingBuffer;\n  }\n  /**\n   * The background color to fill if not transparent\n   * @member {number}\n   * @deprecated since 7.0.0\n   */\n  get backgroundColor() {\n    return deprecation(\"7.0.0\", \"renderer.backgroundColor has been deprecated, use renderer.background.color instead.\"), this.background.color;\n  }\n  set backgroundColor(value) {\n    deprecation(\"7.0.0\", \"renderer.backgroundColor has been deprecated, use renderer.background.color instead.\"), this.background.color = value;\n  }\n  /**\n   * The background color alpha. Setting this to 0 will make the canvas transparent.\n   * @member {number}\n   * @deprecated since 7.0.0\n   */\n  get backgroundAlpha() {\n    return deprecation(\"7.0.0\", \"renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.\"), this.background.alpha;\n  }\n  /**\n   * @deprecated since 7.0.0\n   */\n  set backgroundAlpha(value) {\n    deprecation(\"7.0.0\", \"renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.\"), this.background.alpha = value;\n  }\n  /**\n   * @deprecated since 7.0.0\n   */\n  get powerPreference() {\n    return deprecation(\"7.0.0\", \"renderer.powerPreference has been deprecated, we can only know this if pixi creates the context\"), this.context.powerPreference;\n  }\n  /**\n   * Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n   * @param displayObject - The displayObject the object will be generated from.\n   * @param {IGenerateTextureOptions} options - Generate texture options.\n   * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n   *        if no region is specified, defaults to the local bounds of the displayObject.\n   * @param {number} [options.resolution] - If not given, the renderer's resolution is used.\n   * @param {PIXI.MSAA_QUALITY} [options.multisample] - If not given, the renderer's multisample is used.\n   * @returns A texture of the graphics object.\n   */\n  generateTexture(displayObject, options) {\n    return this.textureGenerator.generateTexture(displayObject, options);\n  }\n};\n_Renderer.extension = {\n  type: ExtensionType.Renderer,\n  priority: 1\n}, /**\n* Collection of installed plugins. These are included by default in PIXI, but can be excluded\n* by creating a custom build. Consult the README for more information about creating custom\n* builds and excluding plugins.\n* @private\n*/\n_Renderer.__plugins = {}, /**\n* The collection of installed systems.\n* @private\n*/\n_Renderer.__systems = {};\nlet Renderer = _Renderer;\nextensions.handleByMap(ExtensionType.RendererPlugin, Renderer.__plugins);\nextensions.handleByMap(ExtensionType.RendererSystem, Renderer.__systems);\nextensions.add(Renderer);\nexport {\n  Renderer\n};\n//# sourceMappingURL=Renderer.mjs.map\n"],"names":["_Renderer","_Renderer2","SystemManager","options","RENDERER_TYPE","settings","UniformGroup","Matrix","systemConfig","deprecation","isWebGLSupported","displayObject","desiredScreenWidth","desiredScreenHeight","removeView","value","ExtensionType","Renderer","extensions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAMA,IAAY,MAAMC,UAAmBC,EAAc;AAAA;AAAA;AAAA;AAAA,EAIvD,YAAYC,GAAS;AACnB,aAAS,KAAK,OAAOC,EAAc,OAAOD,IAAU,OAAO,OAAO,CAAE,GAAEE,EAAS,gBAAgBF,CAAO,GAAG,KAAK,KAAK,MAAM,KAAK,cAAc,GAAG,KAAK,iBAAiB,IAAIG,EAAa;AAAA,MACpL,kBAAkB,IAAIC,EAAQ;AAAA,IACpC,GAAO,EAAE;AACL,UAAMC,IAAe;AAAA,MACnB,SAAS;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACD,SAASP,EAAW;AAAA,MACpB,UAAU;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA,QAEA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA,QAEA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACP;AACI,SAAK,MAAMO,CAAY,GAAG,qBAAqBL,MAAYM,EAAY,SAAS,2GAA2G,GAAGN,EAAQ,qBAAqBA,EAAQ,mBAAmBA,EAAQ,oBAAoB,iBAAiBA,EAAQ,kBAAkBA,EAAQ,oBAAoB,KAAK,IAAIA,EAAQ,kBAAkB,KAAK,QAAQ,kBAAkBF,EAAW,WAAW,KAAK,UAAUE,GAAS,KAAK,QAAQ,IAAI,KAAK,OAAO;AAAA,EACve;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,KAAKA,GAAS;AACnB,WAAOA,KAAA,QAAAA,EAAS,cAAc,KAAKO,EAAgB;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,OAAOC,GAAeR,GAAS;AAC7B,SAAK,eAAe,OAAOQ,GAAeR,CAAO;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAOS,GAAoBC,GAAqB;AAC9C,SAAK,MAAM,WAAWD,GAAoBC,CAAmB;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,WAAO,KAAK,QAAQ,MAAM,KAAI,GAAI;AAAA,EACnC;AAAA;AAAA,EAED,QAAQ;AACN,SAAK,cAAc,KAAI,GAAI,KAAK,cAAc;EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQC,IAAa,IAAI;AACvB,SAAK,QAAQ,QAAQ,MAAM,QAAO,GAAI,KAAK,sBAAsB,KAAK,QAAQ,SAAS;AAAA,MACrF,OAAOA;AAAA,IACb,CAAK,GAAG,MAAM;EACX;AAAA;AAAA,EAED,IAAI,UAAU;AACZ,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA;AAAA,EAED,IAAI,cAAc;AAChB,WAAO,KAAK,aAAa;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,QAAQ;AACV,WAAO,KAAK,MAAM,QAAQ;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,SAAS;AACX,WAAO,KAAK,MAAM,QAAQ;AAAA,EAC3B;AAAA;AAAA,EAED,IAAI,aAAa;AACf,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACD,IAAI,WAAWC,GAAO;AACpB,SAAK,MAAM,aAAaA,GAAO,KAAK,QAAQ,iBAAiB,KAAKA,CAAK;AAAA,EACxE;AAAA;AAAA,EAED,IAAI,cAAc;AAChB,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA;AAAA,EAED,IAAI,OAAO;AACT,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,SAAS;AACX,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA;AAAA,EAED,IAAI,qBAAqB;AACvB,WAAO,KAAK,eAAe;AAAA,EAC5B;AAAA;AAAA,EAED,IAAI,oBAAoB;AACtB,WAAO,KAAK,eAAe;AAAA,EAC5B;AAAA;AAAA,EAED,IAAI,gBAAgB;AAClB,WAAO,SAAS,KAAK,QAAQ,YAAY;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,oBAAoB;AACtB,WAAON,EAAY,SAAS,2GAA2G,GAAG,KAAK,WAAW;AAAA,EAC3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,kBAAkB;AACpB,WAAOA,EAAY,SAAS,uGAAuG,GAAG,KAAK,QAAQ;AAAA,EACpJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,wBAAwB;AAC1B,WAAOA,EAAY,SAAS,+GAA+G,GAAG,KAAK,QAAQ;AAAA,EAC5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,kBAAkB;AACpB,WAAOA,EAAY,SAAS,sFAAsF,GAAG,KAAK,WAAW;AAAA,EACtI;AAAA,EACD,IAAI,gBAAgBM,GAAO;AACzB,IAAAN,EAAY,SAAS,sFAAsF,GAAG,KAAK,WAAW,QAAQM;AAAA,EACvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,kBAAkB;AACpB,WAAON,EAAY,SAAS,sFAAsF,GAAG,KAAK,WAAW;AAAA,EACtI;AAAA;AAAA;AAAA;AAAA,EAID,IAAI,gBAAgBM,GAAO;AACzB,IAAAN,EAAY,SAAS,sFAAsF,GAAG,KAAK,WAAW,QAAQM;AAAA,EACvI;AAAA;AAAA;AAAA;AAAA,EAID,IAAI,kBAAkB;AACpB,WAAON,EAAY,SAAS,iGAAiG,GAAG,KAAK,QAAQ;AAAA,EAC9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,gBAAgBE,GAAeR,GAAS;AACtC,WAAO,KAAK,iBAAiB,gBAAgBQ,GAAeR,CAAO;AAAA,EACpE;AACH;AACAH,EAAU,YAAY;AAAA,EACpB,MAAMgB,EAAc;AAAA,EACpB,UAAU;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAMAhB,EAAU,YAAY,CAAE;AAAA;AAAA;AAAA;AAIxBA,EAAU,YAAY,CAAA;AACnB,IAACiB,IAAWjB;AACfkB,EAAW,YAAYF,EAAc,gBAAgBC,EAAS,SAAS;AACvEC,EAAW,YAAYF,EAAc,gBAAgBC,EAAS,SAAS;AACvEC,EAAW,IAAID,CAAQ;","x_google_ignoreList":[0]}