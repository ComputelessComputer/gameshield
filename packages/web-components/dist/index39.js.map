{"version":3,"file":"index39.js","sources":["../../../node_modules/.pnpm/earcut@2.2.4/node_modules/earcut/src/earcut.js"],"sourcesContent":["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n"],"names":["earcutModule","earcut","data","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","triangles","minX","minY","maxX","maxY","x","y","invSize","eliminateHoles","i","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","filterPoints","p","again","area","ear","pass","indexCurve","stop","prev","next","isEarHashed","isEar","cureLocalIntersections","splitEarcut","a","b","c","ax","bx","cx","ay","by","cy","x0","y0","x1","y1","pointInTriangle","minZ","zOrder","maxZ","n","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","compareX","eliminateHole","hole","bridge","findHoleBridge","bridgeReverse","hx","hy","qx","m","mx","my","tanMin","tan","sectorContainsSector","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","num","inside","a2","Node","b2","an","bp","polygonArea","trianglesArea","sum","j","result","holeIndex","d"],"mappings":"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","x_google_ignoreList":[0]}