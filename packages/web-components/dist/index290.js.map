{"version":3,"file":"index290.js","sources":["../../../node_modules/.pnpm/@pixi+graphics@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3__@pixi+sprit_3c40fa602f454a6b22dad0b27bc41147/node_modules/@pixi/graphics/lib/utils/buildLine.mjs"],"sourcesContent":["import { Point, SHAPES } from \"@pixi/core\";\nimport { LINE_CAP, LINE_JOIN, curves } from \"../const.mjs\";\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight, iy = y - ny * innerWeight, ox = x + nx * outerWeight, oy = y + ny * outerWeight;\n  let exx, eyy;\n  clockwise ? (exx = ny, eyy = -nx) : (exx = -ny, eyy = nx);\n  const eix = ix + exx, eiy = iy + eyy, eox = ox + exx, eoy = oy + eyy;\n  return verts.push(\n    eix,\n    eiy,\n    eox,\n    eoy\n  ), 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx, cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y), angle1 = Math.atan2(ex - cx, ey - cy);\n  clockwise && angle0 < angle1 ? angle0 += Math.PI * 2 : !clockwise && angle0 > angle1 && (angle1 += Math.PI * 2);\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0, absAngleDiff = Math.abs(angleDiff), radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y), segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1, angleInc = angleDiff / segCount;\n  if (startAngle += angleInc, clockwise) {\n    verts.push(\n      cx,\n      cy,\n      sx,\n      sy\n    );\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n      verts.push(\n        cx,\n        cy,\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n    verts.push(\n      cx,\n      cy,\n      ex,\n      ey\n    );\n  } else {\n    verts.push(\n      sx,\n      sy,\n      cx,\n      cy\n    );\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius,\n        cx,\n        cy\n      );\n    verts.push(\n      ex,\n      ey,\n      cx,\n      cy\n    );\n  }\n  return segCount * 2;\n}\nfunction buildNonNativeLine(graphicsData, graphicsGeometry) {\n  const shape = graphicsData.shape;\n  let points = graphicsData.points || shape.points.slice();\n  const eps = graphicsGeometry.closePointEps;\n  if (points.length === 0)\n    return;\n  const style = graphicsData.lineStyle, firstPoint = new Point(points[0], points[1]), lastPoint = new Point(points[points.length - 2], points[points.length - 1]), closedShape = shape.type !== SHAPES.POLY || shape.closeStroke, closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice(), closedPath && (points.pop(), points.pop(), lastPoint.set(points[points.length - 2], points[points.length - 1]));\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5, midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY), points.push(midPointX, midPointY);\n  }\n  const verts = graphicsGeometry.points, length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2, width = style.width / 2, widthSquared = width * width, miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0], y0 = points[1], x1 = points[2], y1 = points[3], x2 = 0, y2 = 0, perpx = -(y0 - y1), perpy = x0 - x1, perp1x = 0, perp1y = 0, dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist, perpy /= dist, perpx *= width, perpy *= width;\n  const ratio = style.alignment, innerWeight = (1 - ratio) * 2, outerWeight = ratio * 2;\n  closedShape || (style.cap === LINE_CAP.ROUND ? indexCount += round(\n    x0 - perpx * (innerWeight - outerWeight) * 0.5,\n    y0 - perpy * (innerWeight - outerWeight) * 0.5,\n    x0 - perpx * innerWeight,\n    y0 - perpy * innerWeight,\n    x0 + perpx * outerWeight,\n    y0 + perpy * outerWeight,\n    verts,\n    !0\n  ) + 2 : style.cap === LINE_CAP.SQUARE && (indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, !0, verts))), verts.push(\n    x0 - perpx * innerWeight,\n    y0 - perpy * innerWeight,\n    x0 + perpx * outerWeight,\n    y0 + perpy * outerWeight\n  );\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2], y0 = points[(i - 1) * 2 + 1], x1 = points[i * 2], y1 = points[i * 2 + 1], x2 = points[(i + 1) * 2], y2 = points[(i + 1) * 2 + 1], perpx = -(y0 - y1), perpy = x0 - x1, dist = Math.sqrt(perpx * perpx + perpy * perpy), perpx /= dist, perpy /= dist, perpx *= width, perpy *= width, perp1x = -(y1 - y2), perp1y = x1 - x2, dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y), perp1x /= dist, perp1y /= dist, perp1x *= width, perp1y *= width;\n    const dx0 = x1 - x0, dy0 = y0 - y1, dx1 = x1 - x2, dy1 = y2 - y1, dot = dx0 * dx1 + dy0 * dy1, cross = dy0 * dx1 - dy1 * dx0, clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(\n        x1 - perpx * innerWeight,\n        y1 - perpy * innerWeight,\n        x1 + perpx * outerWeight,\n        y1 + perpy * outerWeight\n      ), dot >= 0 && (style.join === LINE_JOIN.ROUND ? indexCount += round(\n        x1,\n        y1,\n        x1 - perpx * innerWeight,\n        y1 - perpy * innerWeight,\n        x1 - perp1x * innerWeight,\n        y1 - perp1y * innerWeight,\n        verts,\n        !1\n      ) + 4 : indexCount += 2, verts.push(\n        x1 - perp1x * outerWeight,\n        y1 - perp1y * outerWeight,\n        x1 + perp1x * innerWeight,\n        y1 + perp1y * innerWeight\n      ));\n      continue;\n    }\n    const c1 = (-perpx + x0) * (-perpy + y1) - (-perpx + x1) * (-perpy + y0), c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2), px = (dx0 * c2 - dx1 * c1) / cross, py = (dy1 * c1 - dy0 * c2) / cross, pdist = (px - x1) * (px - x1) + (py - y1) * (py - y1), imx = x1 + (px - x1) * innerWeight, imy = y1 + (py - y1) * innerWeight, omx = x1 - (px - x1) * outerWeight, omy = y1 - (py - y1) * outerWeight, smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1), insideWeight = clockwise ? innerWeight : outerWeight, smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared, insideMiterOk = pdist <= smallerInsideDiagonalSq;\n    let join = style.join;\n    if (join === LINE_JOIN.MITER && pdist / widthSquared > miterLimitSquared && (join = LINE_JOIN.BEVEL), insideMiterOk)\n      switch (join) {\n        case LINE_JOIN.MITER: {\n          verts.push(\n            imx,\n            imy,\n            omx,\n            omy\n          );\n          break;\n        }\n        case LINE_JOIN.BEVEL: {\n          clockwise ? verts.push(\n            imx,\n            imy,\n            // inner miter point\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight,\n            // first segment's outer vertex\n            imx,\n            imy,\n            // inner miter point\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight\n          ) : verts.push(\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            // first segment's inner vertex\n            omx,\n            omy,\n            // outer miter point\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            // second segment's outer vertex\n            omx,\n            omy\n          ), indexCount += 2;\n          break;\n        }\n        case LINE_JOIN.ROUND: {\n          clockwise ? (verts.push(\n            imx,\n            imy,\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight\n          ), indexCount += round(\n            x1,\n            y1,\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            !0\n          ) + 4, verts.push(\n            imx,\n            imy,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight\n          )) : (verts.push(\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            omx,\n            omy\n          ), indexCount += round(\n            x1,\n            y1,\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            !1\n          ) + 4, verts.push(\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            omx,\n            omy\n          ));\n          break;\n        }\n      }\n    else {\n      switch (verts.push(\n        x1 - perpx * innerWeight,\n        y1 - perpy * innerWeight,\n        // first segment's inner vertex\n        x1 + perpx * outerWeight,\n        y1 + perpy * outerWeight\n      ), join) {\n        case LINE_JOIN.MITER: {\n          clockwise ? verts.push(\n            omx,\n            omy,\n            // inner miter point\n            omx,\n            omy\n          ) : verts.push(\n            imx,\n            imy,\n            // outer miter point\n            imx,\n            imy\n          ), indexCount += 2;\n          break;\n        }\n        case LINE_JOIN.ROUND: {\n          clockwise ? indexCount += round(\n            x1,\n            y1,\n            x1 + perpx * outerWeight,\n            y1 + perpy * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            !0\n          ) + 2 : indexCount += round(\n            x1,\n            y1,\n            x1 - perpx * innerWeight,\n            y1 - perpy * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            !1\n          ) + 2;\n          break;\n        }\n      }\n      verts.push(\n        x1 - perp1x * innerWeight,\n        y1 - perp1y * innerWeight,\n        // second segment's inner vertex\n        x1 + perp1x * outerWeight,\n        y1 + perp1y * outerWeight\n      ), indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2], y0 = points[(length - 2) * 2 + 1], x1 = points[(length - 1) * 2], y1 = points[(length - 1) * 2 + 1], perpx = -(y0 - y1), perpy = x0 - x1, dist = Math.sqrt(perpx * perpx + perpy * perpy), perpx /= dist, perpy /= dist, perpx *= width, perpy *= width, verts.push(\n    x1 - perpx * innerWeight,\n    y1 - perpy * innerWeight,\n    x1 + perpx * outerWeight,\n    y1 + perpy * outerWeight\n  ), closedShape || (style.cap === LINE_CAP.ROUND ? indexCount += round(\n    x1 - perpx * (innerWeight - outerWeight) * 0.5,\n    y1 - perpy * (innerWeight - outerWeight) * 0.5,\n    x1 - perpx * innerWeight,\n    y1 - perpy * innerWeight,\n    x1 + perpx * outerWeight,\n    y1 + perpy * outerWeight,\n    verts,\n    !1\n  ) + 2 : style.cap === LINE_CAP.SQUARE && (indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, !1, verts)));\n  const indices = graphicsGeometry.indices, eps2 = curves.epsilon * curves.epsilon;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    x0 = verts[i * 2], y0 = verts[i * 2 + 1], x1 = verts[(i + 1) * 2], y1 = verts[(i + 1) * 2 + 1], x2 = verts[(i + 2) * 2], y2 = verts[(i + 2) * 2 + 1], !(Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) && indices.push(i, i + 1, i + 2);\n}\nfunction buildNativeLine(graphicsData, graphicsGeometry) {\n  let i = 0;\n  const shape = graphicsData.shape, points = graphicsData.points || shape.points, closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n  if (points.length === 0)\n    return;\n  const verts = graphicsGeometry.points, indices = graphicsGeometry.indices, length = points.length / 2, startIndex = verts.length / 2;\n  let currentIndex = startIndex;\n  for (verts.push(points[0], points[1]), i = 1; i < length; i++)\n    verts.push(points[i * 2], points[i * 2 + 1]), indices.push(currentIndex, currentIndex + 1), currentIndex++;\n  closedShape && indices.push(currentIndex, startIndex);\n}\nfunction buildLine(graphicsData, graphicsGeometry) {\n  graphicsData.lineStyle.native ? buildNativeLine(graphicsData, graphicsGeometry) : buildNonNativeLine(graphicsData, graphicsGeometry);\n}\nexport {\n  buildLine\n};\n//# sourceMappingURL=buildLine.mjs.map\n"],"names":["square","x","y","nx","ny","innerWeight","outerWeight","clockwise","verts","ix","iy","ox","oy","exx","eyy","eix","eiy","eox","eoy","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","angle1","startAngle","angleDiff","absAngleDiff","radius","segCount","angleInc","i","angle","buildNonNativeLine","graphicsData","graphicsGeometry","shape","points","eps","style","firstPoint","Point","lastPoint","closedShape","SHAPES","closedPath","midPointX","midPointY","length","indexCount","indexStart","width","widthSquared","miterLimitSquared","x0","y0","x1","y1","x2","y2","perpx","perpy","perp1x","perp1y","dist","ratio","LINE_CAP","dx0","dy0","dx1","dy1","dot","cross","LINE_JOIN","c1","c2","px","py","pdist","imx","imy","omx","omy","smallerInsideSegmentSq","insideWeight","smallerInsideDiagonalSq","insideMiterOk","join","indices","eps2","curves","buildNativeLine","startIndex","currentIndex","buildLine"],"mappings":"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","x_google_ignoreList":[0]}