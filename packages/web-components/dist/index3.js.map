{"version":3,"file":"index3.js","sources":["../src/security/security-utils.ts"],"sourcesContent":["import { TokenPayload } from '../types';\n\n/**\n * SecurityUtils\n * \n * Handles token generation, verification, and other security-related functions\n * for the GameShield CAPTCHA system.\n */\nexport class SecurityUtils {\n  private readonly TOKEN_EXPIRATION = 5 * 60 * 1000; // 5 minutes in milliseconds\n  \n  /**\n   * Generate a unique session ID\n   */\n  public generateSessionId(): string {\n    return this.generateRandomString(32);\n  }\n  \n  /**\n   * Generate a token containing the verification data\n   */\n  public generateToken(payload: TokenPayload): string {\n    // In a real implementation, this would use JWT with proper signing\n    // For now, we'll use a simple base64 encoding with a timestamp check\n    \n    const tokenData = {\n      ...payload,\n      exp: Date.now() + this.TOKEN_EXPIRATION,\n      fingerprint: this.generateFingerprint()\n    };\n    \n    return this.encodeToken(tokenData);\n  }\n  \n  /**\n   * Verify a token and extract its payload\n   */\n  public verifyToken(token: string): { valid: boolean; payload?: TokenPayload; error?: string } {\n    try {\n      const decoded = this.decodeToken(token);\n      \n      // Check if token has expired\n      if (decoded.exp < Date.now()) {\n        return { valid: false, error: 'Token has expired' };\n      }\n      \n      // Check fingerprint (in a real implementation)\n      if (!this.verifyFingerprint(decoded.fingerprint)) {\n        return { valid: false, error: 'Invalid token fingerprint' };\n      }\n      \n      // Extract the original payload\n      const { exp, fingerprint, ...payload } = decoded;\n      \n      return {\n        valid: true,\n        payload: payload as TokenPayload\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Invalid token'\n      };\n    }\n  }\n  \n  /**\n   * Generate a browser fingerprint\n   * In a real implementation, this would use more sophisticated techniques\n   */\n  private generateFingerprint(): string {\n    // In a real implementation, this would collect browser-specific information\n    // For now, we'll just generate a random ID\n    return this.generateRandomString(16);\n  }\n  \n  /**\n   * Verify a browser fingerprint\n   * In a real implementation, this would compare with the current browser\n   */\n  private verifyFingerprint(fingerprint: string): boolean {\n    // In a real implementation, this would verify the fingerprint\n    // For now, we'll just return true\n    return true;\n  }\n  \n  /**\n   * Encode a token payload\n   */\n  private encodeToken(data: any): string {\n    // In a real implementation, this would use JWT\n    // For now, we'll use base64 encoding\n    return btoa(JSON.stringify(data));\n  }\n  \n  /**\n   * Decode a token\n   */\n  private decodeToken(token: string): any {\n    // In a real implementation, this would verify JWT signature\n    // For now, we'll just decode the base64\n    try {\n      return JSON.parse(atob(token));\n    } catch (error) {\n      throw new Error('Invalid token format');\n    }\n  }\n  \n  /**\n   * Generate a random string of specified length\n   */\n  private generateRandomString(length: number): string {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    \n    const randomValues = new Uint8Array(length);\n    crypto.getRandomValues(randomValues);\n    \n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(randomValues[i] % characters.length);\n    }\n    \n    return result;\n  }\n}\n"],"names":["SecurityUtils","payload","tokenData","token","decoded","exp","fingerprint","error","data","length","characters","result","randomValues","i"],"mappings":"AAQO,MAAMA,EAAc;AAAA,EAApB,cAAA;AACY,SAAA,mBAAmB,IAAI,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtC,oBAA4B;AAC1B,WAAA,KAAK,qBAAqB,EAAE;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKO,cAAcC,GAA+B;AAIlD,UAAMC,IAAY;AAAA,MAChB,GAAGD;AAAA,MACH,KAAK,KAAK,IAAI,IAAI,KAAK;AAAA,MACvB,aAAa,KAAK,oBAAoB;AAAA,IAAA;AAGjC,WAAA,KAAK,YAAYC,CAAS;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKO,YAAYC,GAA2E;AACxF,QAAA;AACI,YAAAC,IAAU,KAAK,YAAYD,CAAK;AAGtC,UAAIC,EAAQ,MAAM,KAAK,IAAA;AACrB,eAAO,EAAE,OAAO,IAAO,OAAO,oBAAoB;AAIpD,UAAI,CAAC,KAAK,kBAAkBA,EAAQ,WAAW;AAC7C,eAAO,EAAE,OAAO,IAAO,OAAO,4BAA4B;AAI5D,YAAM,EAAE,KAAAC,GAAK,aAAAC,GAAa,GAAGL,MAAYG;AAElC,aAAA;AAAA,QACL,OAAO;AAAA,QACP,SAAAH;AAAA,MAAA;AAAA,aAEKM,GAAO;AACP,aAAA;AAAA,QACL,OAAO;AAAA,QACP,OAAOA,aAAiB,QAAQA,EAAM,UAAU;AAAA,MAAA;AAAA,IAEpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,sBAA8B;AAG7B,WAAA,KAAK,qBAAqB,EAAE;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,kBAAkBD,GAA8B;AAG/C,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAYE,GAAmB;AAGrC,WAAO,KAAK,KAAK,UAAUA,CAAI,CAAC;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAYL,GAAoB;AAGlC,QAAA;AACF,aAAO,KAAK,MAAM,KAAKA,CAAK,CAAC;AAAA,YACf;AACR,YAAA,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,qBAAqBM,GAAwB;AACnD,UAAMC,IAAa;AACnB,QAAIC,IAAS;AAEP,UAAAC,IAAe,IAAI,WAAWH,CAAM;AAC1C,WAAO,gBAAgBG,CAAY;AAEnC,aAASC,IAAI,GAAGA,IAAIJ,GAAQI;AAC1B,MAAAF,KAAUD,EAAW,OAAOE,EAAaC,CAAC,IAAIH,EAAW,MAAM;AAG1D,WAAAC;AAAA,EACT;AACF;"}