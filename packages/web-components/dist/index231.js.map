{"version":3,"file":"index231.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/resources/ImageBitmapResource.mjs"],"sourcesContent":["import { ALPHA_MODES } from \"@pixi/constants\";\nimport { settings } from \"@pixi/settings\";\nimport { BaseImageResource } from \"./BaseImageResource.mjs\";\nclass ImageBitmapResource extends BaseImageResource {\n  /**\n   * @param source - ImageBitmap or URL to use.\n   * @param options - Options to use.\n   */\n  constructor(source, options) {\n    options = options || {};\n    let baseSource, url, ownsImageBitmap;\n    typeof source == \"string\" ? (baseSource = ImageBitmapResource.EMPTY, url = source, ownsImageBitmap = !0) : (baseSource = source, url = null, ownsImageBitmap = !1), super(baseSource), this.url = url, this.crossOrigin = options.crossOrigin ?? !0, this.alphaMode = typeof options.alphaMode == \"number\" ? options.alphaMode : null, this.ownsImageBitmap = options.ownsImageBitmap ?? ownsImageBitmap, this._load = null, options.autoLoad !== !1 && this.load();\n  }\n  load() {\n    return this._load ? this._load : (this._load = new Promise(async (resolve, reject) => {\n      if (this.url === null) {\n        resolve(this);\n        return;\n      }\n      try {\n        const response = await settings.ADAPTER.fetch(this.url, {\n          mode: this.crossOrigin ? \"cors\" : \"no-cors\"\n        });\n        if (this.destroyed)\n          return;\n        const imageBlob = await response.blob();\n        if (this.destroyed)\n          return;\n        const imageBitmap = await createImageBitmap(imageBlob, {\n          premultiplyAlpha: this.alphaMode === null || this.alphaMode === ALPHA_MODES.UNPACK ? \"premultiply\" : \"none\"\n        });\n        if (this.destroyed) {\n          imageBitmap.close();\n          return;\n        }\n        this.source = imageBitmap, this.update(), resolve(this);\n      } catch (e) {\n        if (this.destroyed)\n          return;\n        reject(e), this.onError.emit(e);\n      }\n    }), this._load);\n  }\n  /**\n   * Upload the image bitmap resource to GPU.\n   * @param renderer - Renderer to upload to\n   * @param baseTexture - BaseTexture for this resource\n   * @param glTexture - GLTexture to use\n   * @returns {boolean} true is success\n   */\n  upload(renderer, baseTexture, glTexture) {\n    return this.source instanceof ImageBitmap ? (typeof this.alphaMode == \"number\" && (baseTexture.alphaMode = this.alphaMode), super.upload(renderer, baseTexture, glTexture)) : (this.load(), !1);\n  }\n  /** Destroys this resource. */\n  dispose() {\n    this.ownsImageBitmap && this.source instanceof ImageBitmap && this.source.close(), super.dispose(), this._load = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if current environment support ImageBitmap, and source is string or ImageBitmap\n   */\n  static test(source) {\n    return !!globalThis.createImageBitmap && typeof ImageBitmap < \"u\" && (typeof source == \"string\" || source instanceof ImageBitmap);\n  }\n  /**\n   * ImageBitmap cannot be created synchronously, so a empty placeholder canvas is needed when loading from URLs.\n   * Only for internal usage.\n   * @returns The cached placeholder canvas.\n   */\n  static get EMPTY() {\n    return ImageBitmapResource._EMPTY = ImageBitmapResource._EMPTY ?? settings.ADAPTER.createCanvas(0, 0), ImageBitmapResource._EMPTY;\n  }\n}\nexport {\n  ImageBitmapResource\n};\n//# sourceMappingURL=ImageBitmapResource.mjs.map\n"],"names":["ImageBitmapResource","BaseImageResource","source","options","baseSource","url","ownsImageBitmap","resolve","reject","response","settings","imageBlob","imageBitmap","ALPHA_MODES","renderer","baseTexture","glTexture"],"mappings":";;;;AAGA,MAAMA,UAA4BC,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlD,YAAYC,GAAQC,GAAS;AAC3B,IAAAA,IAAUA,KAAW;AACrB,QAAIC,GAAYC,GAAKC;AACrB,WAAOJ,KAAU,YAAYE,IAAaJ,EAAoB,OAAOK,IAAMH,GAAQI,IAAkB,OAAOF,IAAaF,GAAQG,IAAM,MAAMC,IAAkB,KAAK,MAAMF,CAAU,GAAG,KAAK,MAAMC,GAAK,KAAK,cAAcF,EAAQ,eAAe,IAAI,KAAK,YAAY,OAAOA,EAAQ,aAAa,WAAWA,EAAQ,YAAY,MAAM,KAAK,kBAAkBA,EAAQ,mBAAmBG,GAAiB,KAAK,QAAQ,MAAMH,EAAQ,aAAa,MAAM,KAAK,KAAI;AAAA,EAClc;AAAA,EACD,OAAO;AACL,WAAO,KAAK,QAAQ,KAAK,SAAS,KAAK,QAAQ,IAAI,QAAQ,OAAOI,GAASC,MAAW;AACpF,UAAI,KAAK,QAAQ,MAAM;AACrB,QAAAD,EAAQ,IAAI;AACZ;AAAA,MACD;AACD,UAAI;AACF,cAAME,IAAW,MAAMC,EAAS,QAAQ,MAAM,KAAK,KAAK;AAAA,UACtD,MAAM,KAAK,cAAc,SAAS;AAAA,QAC5C,CAAS;AACD,YAAI,KAAK;AACP;AACF,cAAMC,IAAY,MAAMF,EAAS;AACjC,YAAI,KAAK;AACP;AACF,cAAMG,IAAc,MAAM,kBAAkBD,GAAW;AAAA,UACrD,kBAAkB,KAAK,cAAc,QAAQ,KAAK,cAAcE,EAAY,SAAS,gBAAgB;AAAA,QAC/G,CAAS;AACD,YAAI,KAAK,WAAW;AAClB,UAAAD,EAAY,MAAK;AACjB;AAAA,QACD;AACD,aAAK,SAASA,GAAa,KAAK,UAAUL,EAAQ,IAAI;AAAA,MACvD,SAAQ,GAAG;AACV,YAAI,KAAK;AACP;AACF,QAAAC,EAAO,CAAC,GAAG,KAAK,QAAQ,KAAK,CAAC;AAAA,MAC/B;AAAA,IACP,CAAK,GAAG,KAAK;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAOM,GAAUC,GAAaC,GAAW;AACvC,WAAO,KAAK,kBAAkB,eAAe,OAAO,KAAK,aAAa,aAAaD,EAAY,YAAY,KAAK,YAAY,MAAM,OAAOD,GAAUC,GAAaC,CAAS,MAAM,KAAK,KAAI,GAAI;AAAA,EAC7L;AAAA;AAAA,EAED,UAAU;AACR,SAAK,mBAAmB,KAAK,kBAAkB,eAAe,KAAK,OAAO,MAAO,GAAE,MAAM,QAAO,GAAI,KAAK,QAAQ;AAAA,EAClH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,KAAKd,GAAQ;AAClB,WAAO,CAAC,CAAC,WAAW,qBAAqB,OAAO,cAAc,QAAQ,OAAOA,KAAU,YAAYA,aAAkB;AAAA,EACtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAW,QAAQ;AACjB,WAAOF,EAAoB,SAASA,EAAoB,UAAUU,EAAS,QAAQ,aAAa,GAAG,CAAC,GAAGV,EAAoB;AAAA,EAC5H;AACH;","x_google_ignoreList":[0]}