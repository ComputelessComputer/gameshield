{"version":3,"file":"index479.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureMatrix.mjs"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\n\n\"use strict\";\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    if (typeof clampMargin === \"undefined\") {\n      this.clampMargin = texture.width < 10 ? 0 : 0.5;\n    } else {\n      this.clampMargin = clampMargin;\n    }\n    this.isSimple = false;\n    this.texture = texture;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this.texture === value)\n      return;\n    this._texture?.removeListener(\"update\", this.update, this);\n    this._texture = value;\n    this._texture.addListener(\"update\", this.update, this);\n    this.update();\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed\n   * @returns - whether or not it was updated\n   */\n  update() {\n    const tex = this._texture;\n    this._updateID++;\n    const uvs = tex.uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(\n        orig.width / trim.width,\n        0,\n        0,\n        orig.height / trim.height,\n        -trim.x / trim.width,\n        -trim.y / trim.height\n      );\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.source;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase._resolution;\n    const offset = this.clampOffset / texBase._resolution;\n    frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = this.clampOffset / texBase.pixelWidth;\n    this.uClampOffset[1] = this.clampOffset / texBase.pixelHeight;\n    this.isSimple = tex.frame.width === texBase.width && tex.frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\n\nexport { TextureMatrix };\n//# sourceMappingURL=TextureMatrix.mjs.map\n"],"names":["tempMat","Matrix","TextureMatrix","texture","clampMargin","value","_a","uvs","out","mat","x","y","tex","orig","trim","texBase","frame","margin","offset"],"mappings":";AAGA,MAAMA,IAAU,IAAIC;AACpB,MAAMC,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,YAAYC,GAASC,GAAa;AAChC,SAAK,WAAW,IAAIH,KACpB,KAAK,cAAc,IAAI,aAAa,CAAC,GACrC,KAAK,eAAe,IAAI,aAAa,CAAC,GACtC,KAAK,aAAa,IAClB,KAAK,YAAY,GACjB,KAAK,cAAc,GACf,OAAOG,IAAgB,MACzB,KAAK,cAAcD,EAAQ,QAAQ,KAAK,IAAI,MAE5C,KAAK,cAAcC,GAErB,KAAK,WAAW,IAChB,KAAK,UAAUD;AAAA,EAChB;AAAA;AAAA,EAED,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,QAAQE,GAAO;;AACjB,IAAI,KAAK,YAAYA,OAErBC,IAAA,KAAK,aAAL,QAAAA,EAAe,eAAe,UAAU,KAAK,QAAQ,OACrD,KAAK,WAAWD,GAChB,KAAK,SAAS,YAAY,UAAU,KAAK,QAAQ,IAAI,GACrD,KAAK,OAAM;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAYE,GAAKC,GAAK;AACpB,IAAIA,MAAQ,WACVA,IAAMD;AAER,UAAME,IAAM,KAAK;AACjB,aAAS,IAAI,GAAG,IAAIF,EAAI,QAAQ,KAAK,GAAG;AACtC,YAAMG,IAAIH,EAAI,CAAC,GACTI,IAAIJ,EAAI,IAAI,CAAC;AACnB,MAAAC,EAAI,CAAC,IAAIE,IAAID,EAAI,IAAIE,IAAIF,EAAI,IAAIA,EAAI,IACrCD,EAAI,IAAI,CAAC,IAAIE,IAAID,EAAI,IAAIE,IAAIF,EAAI,IAAIA,EAAI;AAAA,IAC1C;AACD,WAAOD;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,SAAS;AACP,UAAMI,IAAM,KAAK;AACjB,SAAK;AACL,UAAML,IAAMK,EAAI;AAChB,SAAK,SAAS,IAAIL,EAAI,KAAKA,EAAI,IAAIA,EAAI,KAAKA,EAAI,IAAIA,EAAI,KAAKA,EAAI,IAAIA,EAAI,KAAKA,EAAI,IAAIA,EAAI,IAAIA,EAAI,EAAE;AACpG,UAAMM,IAAOD,EAAI,MACXE,IAAOF,EAAI;AACjB,IAAIE,MACFd,EAAQ;AAAA,MACNa,EAAK,QAAQC,EAAK;AAAA,MAClB;AAAA,MACA;AAAA,MACAD,EAAK,SAASC,EAAK;AAAA,MACnB,CAACA,EAAK,IAAIA,EAAK;AAAA,MACf,CAACA,EAAK,IAAIA,EAAK;AAAA,IACvB,GACM,KAAK,SAAS,OAAOd,CAAO;AAE9B,UAAMe,IAAUH,EAAI,QACdI,IAAQ,KAAK,aACbC,IAAS,KAAK,cAAcF,EAAQ,aACpCG,IAAS,KAAK,cAAcH,EAAQ;AAC1C,WAAAC,EAAM,CAAC,KAAKJ,EAAI,MAAM,IAAIK,IAASC,KAAUH,EAAQ,OACrDC,EAAM,CAAC,KAAKJ,EAAI,MAAM,IAAIK,IAASC,KAAUH,EAAQ,QACrDC,EAAM,CAAC,KAAKJ,EAAI,MAAM,IAAIA,EAAI,MAAM,QAAQK,IAASC,KAAUH,EAAQ,OACvEC,EAAM,CAAC,KAAKJ,EAAI,MAAM,IAAIA,EAAI,MAAM,SAASK,IAASC,KAAUH,EAAQ,QACxE,KAAK,aAAa,CAAC,IAAI,KAAK,cAAcA,EAAQ,YAClD,KAAK,aAAa,CAAC,IAAI,KAAK,cAAcA,EAAQ,aAClD,KAAK,WAAWH,EAAI,MAAM,UAAUG,EAAQ,SAASH,EAAI,MAAM,WAAWG,EAAQ,UAAUH,EAAI,WAAW,GACpG;AAAA,EACR;AACH;","x_google_ignoreList":[0]}