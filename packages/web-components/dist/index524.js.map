{"version":3,"file":"index524.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n"],"names":["GraphicsPipe","renderer","adaptor","State","graphics","context","wasBatched","gpuContext","instructionSet","batches","i","batch","shader","localUniforms","color32BitToUniform","batchPipe","roundPixels","batchClone","BigPool","BatchableGraphics","graphicsUid","ExtensionType"],"mappings":";;;;;AAOA,MAAMA,EAAa;AAAA,EACjB,YAAYC,GAAUC,GAAS;AAC7B,SAAK,QAAQC,EAAM,SAEnB,KAAK,uBAAuC,uBAAO,OAAO,IAAI,GAC9D,KAAK,0BAA0B,KAAK,kBAAkB,KAAK,IAAI,GAC/D,KAAK,WAAWF,GAChB,KAAK,WAAWC,GAChB,KAAK,SAAS,QACd,KAAK,SAAS,aAAa,eAAe,MAAM,sBAAsB;AAAA,EACvE;AAAA,EACD,mBAAmBE,GAAU;AAC3B,UAAMC,IAAUD,EAAS,SACnBE,IAAa,CAAC,CAAC,KAAK,qBAAqBF,EAAS,GAAG,GACrDG,IAAa,KAAK,SAAS,gBAAgB,iBAAiBF,CAAO;AACzE,WAAI,GAAAE,EAAW,eAAeD,MAAeC,EAAW;AAAA,EAIzD;AAAA,EACD,cAAcH,GAAUI,GAAgB;AACtC,UAAMD,IAAa,KAAK,SAAS,gBAAgB,iBAAiBH,EAAS,OAAO;AAClF,IAAIA,EAAS,iBACX,KAAK,SAASA,CAAQ,GAEpBG,EAAW,cACb,KAAK,cAAcH,GAAUI,CAAc,KAE3C,KAAK,SAAS,YAAY,MAAM,MAAMA,CAAc,GACpDA,EAAe,IAAIJ,CAAQ;AAAA,EAE9B;AAAA,EACD,iBAAiBA,GAAU;AACzB,UAAMK,IAAU,KAAK,qBAAqBL,EAAS,GAAG;AACtD,QAAIK;AACF,eAASC,IAAI,GAAGA,IAAID,EAAQ,QAAQC,KAAK;AACvC,cAAMC,IAAQF,EAAQC,CAAC;AACvB,QAAAC,EAAM,SAAS,cAAcA,CAAK;AAAA,MACnC;AAAA,EAEJ;AAAA,EACD,kBAAkBP,GAAU;AAC1B,IAAI,KAAK,qBAAqBA,EAAS,GAAG,KACxC,KAAK,0BAA0BA,EAAS,GAAG,GAE7CA,EAAS,IAAI,aAAa,KAAK,uBAAuB;AAAA,EACvD;AAAA,EACD,QAAQA,GAAU;AAChB,QAAI,CAACA,EAAS;AACZ;AACF,UAAMH,IAAW,KAAK,UAChBI,IAAUD,EAAS;AAEzB,QAAI,CADkBH,EAAS,gBACZ,cAAcI,CAAO,EAAE,QAAQ;AAChD;AAEF,UAAMO,IAASP,EAAQ,gBAAgB,KAAK,SAAS;AACrD,SAAK,MAAM,YAAYD,EAAS;AAChC,UAAMS,IAAgBD,EAAO,UAAU,cAAc;AACrD,IAAAC,EAAc,mBAAmBT,EAAS,gBAC1CS,EAAc,SAASZ,EAAS,eAAeG,EAAS,cACxDU;AAAA,MACEV,EAAS;AAAA,MACTS,EAAc;AAAA,MACd;AAAA,IACN,GACI,KAAK,SAAS,QAAQ,MAAMT,CAAQ;AAAA,EACrC;AAAA,EACD,SAASA,GAAU;AACjB,UAAME,IAAa,CAAC,CAAC,KAAK,qBAAqBF,EAAS,GAAG,GACrDG,IAAa,KAAK,SAAS,gBAAgB,iBAAiBH,EAAS,OAAO;AAClF,IAAIE,KACF,KAAK,0BAA0BF,EAAS,GAAG,GAEzCG,EAAW,eACb,KAAK,0BAA0BH,CAAQ,GAEzCA,EAAS,UAAUG,EAAW;AAAA,EAC/B;AAAA,EACD,cAAcH,GAAUI,GAAgB;AACtC,UAAMO,IAAY,KAAK,SAAS,YAAY,OACtCN,IAAU,KAAK,yBAAyBL,CAAQ;AACtD,aAASM,IAAI,GAAGA,IAAID,EAAQ,QAAQC,KAAK;AACvC,YAAMC,IAAQF,EAAQC,CAAC;AACvB,MAAAK,EAAU,WAAWJ,GAAOH,CAAc;AAAA,IAC3C;AAAA,EACF;AAAA,EACD,yBAAyBJ,GAAU;AACjC,WAAO,KAAK,qBAAqBA,EAAS,GAAG,KAAK,KAAK,0BAA0BA,CAAQ;AAAA,EAC1F;AAAA,EACD,0BAA0BA,GAAU;AAClC,UAAMC,IAAUD,EAAS,SACnBG,IAAa,KAAK,SAAS,gBAAgB,cAAcF,CAAO,GAChEW,IAAc,KAAK,SAAS,eAAeZ,EAAS,cACpDK,IAAUF,EAAW,QAAQ,IAAI,CAACI,MAAU;AAChD,YAAMM,IAAaC,EAAQ,IAAIC,CAAiB;AAChD,aAAAR,EAAM,OAAOM,CAAU,GACvBA,EAAW,aAAab,GACxBa,EAAW,cAAcD,GAClBC;AAAA,IACb,CAAK;AACD,WAAI,KAAK,qBAAqBb,EAAS,GAAG,MAAM,UAC9CA,EAAS,GAAG,aAAa,KAAK,uBAAuB,GAEvD,KAAK,qBAAqBA,EAAS,GAAG,IAAIK,GACnCA;AAAA,EACR;AAAA,EACD,0BAA0BW,GAAa;AACrC,SAAK,qBAAqBA,CAAW,EAAE,QAAQ,CAACT,MAAU;AACxD,MAAAO,EAAQ,OAAOP,CAAK;AAAA,IAC1B,CAAK,GACD,KAAK,qBAAqBS,CAAW,IAAI;AAAA,EAC1C;AAAA,EACD,UAAU;AACR,SAAK,WAAW,MAChB,KAAK,SAAS,WACd,KAAK,WAAW,MAChB,KAAK,QAAQ;AACb,eAAWV,KAAK,KAAK;AACnB,WAAK,0BAA0BA,CAAC;AAElC,SAAK,uBAAuB;AAAA,EAC7B;AACH;AAEAV,EAAa,YAAY;AAAA,EACvB,MAAM;AAAA,IACJqB,EAAc;AAAA,IACdA,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;","x_google_ignoreList":[0]}