{"version":3,"file":"index267.js","sources":["../../../node_modules/.pnpm/@pixi+graphics@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3__@pixi+sprit_3c40fa602f454a6b22dad0b27bc41147/node_modules/@pixi/graphics/lib/utils/QuadraticUtils.mjs"],"sourcesContent":["import { curves } from \"../const.mjs\";\nclass QuadraticUtils {\n  /**\n   * Calculate length of quadratic curve\n   * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n   * for the detailed explanation of math behind this.\n   * @private\n   * @param fromX - x-coordinate of curve start point\n   * @param fromY - y-coordinate of curve start point\n   * @param cpX - x-coordinate of curve control point\n   * @param cpY - y-coordinate of curve control point\n   * @param toX - x-coordinate of curve end point\n   * @param toY - y-coordinate of curve end point\n   * @returns - Length of quadratic curve\n   */\n  static curveLength(fromX, fromY, cpX, cpY, toX, toY) {\n    const ax = fromX - 2 * cpX + toX, ay = fromY - 2 * cpY + toY, bx = 2 * cpX - 2 * fromX, by = 2 * cpY - 2 * fromY, a = 4 * (ax * ax + ay * ay), b = 4 * (ax * bx + ay * by), c = bx * bx + by * by, s = 2 * Math.sqrt(a + b + c), a2 = Math.sqrt(a), a32 = 2 * a * a2, c2 = 2 * Math.sqrt(c), ba = b / a2;\n    return (a32 * s + a2 * b * (s - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + s) / (ba + c2))) / (4 * a32);\n  }\n  /**\n   * Calculate the points for a quadratic bezier curve and then draws it.\n   * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n   * @private\n   * @param cpX - Control point x\n   * @param cpY - Control point y\n   * @param toX - Destination point x\n   * @param toY - Destination point y\n   * @param points - Points to add segments to.\n   */\n  static curveTo(cpX, cpY, toX, toY, points) {\n    const fromX = points[points.length - 2], fromY = points[points.length - 1], n = curves._segmentsCount(\n      QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n    );\n    let xa = 0, ya = 0;\n    for (let i = 1; i <= n; ++i) {\n      const j = i / n;\n      xa = fromX + (cpX - fromX) * j, ya = fromY + (cpY - fromY) * j, points.push(\n        xa + (cpX + (toX - cpX) * j - xa) * j,\n        ya + (cpY + (toY - cpY) * j - ya) * j\n      );\n    }\n  }\n}\nexport {\n  QuadraticUtils\n};\n//# sourceMappingURL=QuadraticUtils.mjs.map\n"],"names":["QuadraticUtils","fromX","fromY","cpX","cpY","toX","toY","ax","ay","bx","by","b","c","s","a2","a32","c2","ba","points","n","curves","xa","ya","i","j"],"mappings":";AACA,MAAMA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcnB,OAAO,YAAYC,GAAOC,GAAOC,GAAKC,GAAKC,GAAKC,GAAK;AACnD,UAAMC,IAAKN,IAAQ,IAAIE,IAAME,GAAKG,IAAKN,IAAQ,IAAIE,IAAME,GAAKG,IAAK,IAAIN,IAAM,IAAIF,GAAOS,IAAK,IAAIN,IAAM,IAAIF,GAAO,IAAI,KAAKK,IAAKA,IAAKC,IAAKA,IAAKG,IAAI,KAAKJ,IAAKE,IAAKD,IAAKE,IAAKE,IAAIH,IAAKA,IAAKC,IAAKA,GAAIG,IAAI,IAAI,KAAK,KAAK,IAAIF,IAAIC,CAAC,GAAGE,IAAK,KAAK,KAAK,CAAC,GAAGC,IAAM,IAAI,IAAID,GAAIE,IAAK,IAAI,KAAK,KAAKJ,CAAC,GAAGK,IAAKN,IAAIG;AACtS,YAAQC,IAAMF,IAAIC,IAAKH,KAAKE,IAAIG,MAAO,IAAIJ,IAAI,IAAID,IAAIA,KAAK,KAAK,KAAK,IAAIG,IAAKG,IAAKJ,MAAMI,IAAKD,EAAG,MAAM,IAAID;AAAA,EAC7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,OAAO,QAAQZ,GAAKC,GAAKC,GAAKC,GAAKY,GAAQ;AACzC,UAAMjB,IAAQiB,EAAOA,EAAO,SAAS,CAAC,GAAGhB,IAAQgB,EAAOA,EAAO,SAAS,CAAC,GAAGC,IAAIC,EAAO;AAAA,MACrFpB,EAAe,YAAYC,GAAOC,GAAOC,GAAKC,GAAKC,GAAKC,CAAG;AAAA,IACjE;AACI,QAAIe,IAAK,GAAGC,IAAK;AACjB,aAASC,IAAI,GAAGA,KAAKJ,GAAG,EAAEI,GAAG;AAC3B,YAAMC,IAAID,IAAIJ;AACd,MAAAE,IAAKpB,KAASE,IAAMF,KAASuB,GAAGF,IAAKpB,KAASE,IAAMF,KAASsB,GAAGN,EAAO;AAAA,QACrEG,KAAMlB,KAAOE,IAAMF,KAAOqB,IAAIH,KAAMG;AAAA,QACpCF,KAAMlB,KAAOE,IAAMF,KAAOoB,IAAIF,KAAME;AAAA,MAC5C;AAAA,IACK;AAAA,EACF;AACH;","x_google_ignoreList":[0]}