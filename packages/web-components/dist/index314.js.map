{"version":3,"file":"index314.js","sources":["../../../node_modules/.pnpm/@pixi+text-bitmap@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3_@pixi+dis_e8d16dc3b3f9170908692deae8697d60/node_modules/@pixi/text-bitmap/lib/formats/XMLFormat.mjs"],"sourcesContent":["import { BitmapFontData } from \"../BitmapFontData.mjs\";\nclass XMLFormat {\n  /**\n   * Check if resource refers to xml font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  static test(data) {\n    const xml = data;\n    return typeof data != \"string\" && \"getElementsByTagName\" in data && xml.getElementsByTagName(\"page\").length && xml.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n  }\n  /**\n   * Convert the XML into BitmapFontData that we can use.\n   * @param xml\n   * @returns - Data to use for BitmapFont\n   */\n  static parse(xml) {\n    const data = new BitmapFontData(), info = xml.getElementsByTagName(\"info\"), common = xml.getElementsByTagName(\"common\"), page = xml.getElementsByTagName(\"page\"), char = xml.getElementsByTagName(\"char\"), kerning = xml.getElementsByTagName(\"kerning\"), distanceField = xml.getElementsByTagName(\"distanceField\");\n    for (let i = 0; i < info.length; i++)\n      data.info.push({\n        face: info[i].getAttribute(\"face\"),\n        size: parseInt(info[i].getAttribute(\"size\"), 10)\n      });\n    for (let i = 0; i < common.length; i++)\n      data.common.push({\n        lineHeight: parseInt(common[i].getAttribute(\"lineHeight\"), 10)\n      });\n    for (let i = 0; i < page.length; i++)\n      data.page.push({\n        id: parseInt(page[i].getAttribute(\"id\"), 10) || 0,\n        file: page[i].getAttribute(\"file\")\n      });\n    for (let i = 0; i < char.length; i++) {\n      const letter = char[i];\n      data.char.push({\n        id: parseInt(letter.getAttribute(\"id\"), 10),\n        page: parseInt(letter.getAttribute(\"page\"), 10) || 0,\n        x: parseInt(letter.getAttribute(\"x\"), 10),\n        y: parseInt(letter.getAttribute(\"y\"), 10),\n        width: parseInt(letter.getAttribute(\"width\"), 10),\n        height: parseInt(letter.getAttribute(\"height\"), 10),\n        xoffset: parseInt(letter.getAttribute(\"xoffset\"), 10),\n        yoffset: parseInt(letter.getAttribute(\"yoffset\"), 10),\n        xadvance: parseInt(letter.getAttribute(\"xadvance\"), 10)\n      });\n    }\n    for (let i = 0; i < kerning.length; i++)\n      data.kerning.push({\n        first: parseInt(kerning[i].getAttribute(\"first\"), 10),\n        second: parseInt(kerning[i].getAttribute(\"second\"), 10),\n        amount: parseInt(kerning[i].getAttribute(\"amount\"), 10)\n      });\n    for (let i = 0; i < distanceField.length; i++)\n      data.distanceField.push({\n        fieldType: distanceField[i].getAttribute(\"fieldType\"),\n        distanceRange: parseInt(distanceField[i].getAttribute(\"distanceRange\"), 10)\n      });\n    return data;\n  }\n}\nexport {\n  XMLFormat\n};\n//# sourceMappingURL=XMLFormat.mjs.map\n"],"names":["XMLFormat","data","xml","BitmapFontData","info","common","page","char","kerning","distanceField","i","letter"],"mappings":";AACA,MAAMA,EAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,OAAO,KAAKC,GAAM;AAChB,UAAMC,IAAMD;AACZ,WAAO,OAAOA,KAAQ,YAAY,0BAA0BA,KAAQC,EAAI,qBAAqB,MAAM,EAAE,UAAUA,EAAI,qBAAqB,MAAM,EAAE,CAAC,EAAE,aAAa,MAAM,MAAM;AAAA,EAC7K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,MAAMA,GAAK;AAChB,UAAMD,IAAO,IAAIE,EAAc,GAAIC,IAAOF,EAAI,qBAAqB,MAAM,GAAGG,IAASH,EAAI,qBAAqB,QAAQ,GAAGI,IAAOJ,EAAI,qBAAqB,MAAM,GAAGK,IAAOL,EAAI,qBAAqB,MAAM,GAAGM,IAAUN,EAAI,qBAAqB,SAAS,GAAGO,IAAgBP,EAAI,qBAAqB,eAAe;AAClT,aAASQ,IAAI,GAAGA,IAAIN,EAAK,QAAQM;AAC/B,MAAAT,EAAK,KAAK,KAAK;AAAA,QACb,MAAMG,EAAKM,CAAC,EAAE,aAAa,MAAM;AAAA,QACjC,MAAM,SAASN,EAAKM,CAAC,EAAE,aAAa,MAAM,GAAG,EAAE;AAAA,MACvD,CAAO;AACH,aAASA,IAAI,GAAGA,IAAIL,EAAO,QAAQK;AACjC,MAAAT,EAAK,OAAO,KAAK;AAAA,QACf,YAAY,SAASI,EAAOK,CAAC,EAAE,aAAa,YAAY,GAAG,EAAE;AAAA,MACrE,CAAO;AACH,aAASA,IAAI,GAAGA,IAAIJ,EAAK,QAAQI;AAC/B,MAAAT,EAAK,KAAK,KAAK;AAAA,QACb,IAAI,SAASK,EAAKI,CAAC,EAAE,aAAa,IAAI,GAAG,EAAE,KAAK;AAAA,QAChD,MAAMJ,EAAKI,CAAC,EAAE,aAAa,MAAM;AAAA,MACzC,CAAO;AACH,aAASA,IAAI,GAAGA,IAAIH,EAAK,QAAQG,KAAK;AACpC,YAAMC,IAASJ,EAAKG,CAAC;AACrB,MAAAT,EAAK,KAAK,KAAK;AAAA,QACb,IAAI,SAASU,EAAO,aAAa,IAAI,GAAG,EAAE;AAAA,QAC1C,MAAM,SAASA,EAAO,aAAa,MAAM,GAAG,EAAE,KAAK;AAAA,QACnD,GAAG,SAASA,EAAO,aAAa,GAAG,GAAG,EAAE;AAAA,QACxC,GAAG,SAASA,EAAO,aAAa,GAAG,GAAG,EAAE;AAAA,QACxC,OAAO,SAASA,EAAO,aAAa,OAAO,GAAG,EAAE;AAAA,QAChD,QAAQ,SAASA,EAAO,aAAa,QAAQ,GAAG,EAAE;AAAA,QAClD,SAAS,SAASA,EAAO,aAAa,SAAS,GAAG,EAAE;AAAA,QACpD,SAAS,SAASA,EAAO,aAAa,SAAS,GAAG,EAAE;AAAA,QACpD,UAAU,SAASA,EAAO,aAAa,UAAU,GAAG,EAAE;AAAA,MAC9D,CAAO;AAAA,IACF;AACD,aAASD,IAAI,GAAGA,IAAIF,EAAQ,QAAQE;AAClC,MAAAT,EAAK,QAAQ,KAAK;AAAA,QAChB,OAAO,SAASO,EAAQE,CAAC,EAAE,aAAa,OAAO,GAAG,EAAE;AAAA,QACpD,QAAQ,SAASF,EAAQE,CAAC,EAAE,aAAa,QAAQ,GAAG,EAAE;AAAA,QACtD,QAAQ,SAASF,EAAQE,CAAC,EAAE,aAAa,QAAQ,GAAG,EAAE;AAAA,MAC9D,CAAO;AACH,aAASA,IAAI,GAAGA,IAAID,EAAc,QAAQC;AACxC,MAAAT,EAAK,cAAc,KAAK;AAAA,QACtB,WAAWQ,EAAcC,CAAC,EAAE,aAAa,WAAW;AAAA,QACpD,eAAe,SAASD,EAAcC,CAAC,EAAE,aAAa,eAAe,GAAG,EAAE;AAAA,MAClF,CAAO;AACH,WAAOT;AAAA,EACR;AACH;","x_google_ignoreList":[0]}