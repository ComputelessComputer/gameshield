{"version":3,"file":"index27.js","sources":["../../../node_modules/.pnpm/@pixi+math@7.4.3/node_modules/@pixi/math/lib/shapes/Polygon.mjs"],"sourcesContent":["import { SHAPES } from \"../const.mjs\";\nclass Polygon {\n  /**\n   * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  constructor(...points) {\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] != \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++)\n        p.push(flat[i].x, flat[i].y);\n      flat = p;\n    }\n    this.points = flat, this.type = SHAPES.POLY, this.closeStroke = !0;\n  }\n  /**\n   * Creates a clone of this polygon.\n   * @returns - A copy of the polygon.\n   */\n  clone() {\n    const points = this.points.slice(), polygon = new Polygon(points);\n    return polygon.closeStroke = this.closeStroke, polygon;\n  }\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this polygon.\n   */\n  contains(x, y) {\n    let inside = !1;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2], yi = this.points[i * 2 + 1], xj = this.points[j * 2], yj = this.points[j * 2 + 1];\n      yi > y != yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi && (inside = !inside);\n    }\n    return inside;\n  }\n}\nPolygon.prototype.toString = function() {\n  return `[@pixi/math:PolygoncloseStroke=${this.closeStroke}points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, \"\")}]`;\n};\nexport {\n  Polygon\n};\n//# sourceMappingURL=Polygon.mjs.map\n"],"names":["Polygon","points","flat","p","i","il","SHAPES","polygon","x","y","inside","length","j","xi","yi","xj","yj","pointsDesc","currentPoint"],"mappings":";AACA,MAAMA,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQZ,eAAeC,GAAQ;AACrB,QAAIC,IAAO,MAAM,QAAQD,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAIA;AAClD,QAAI,OAAOC,EAAK,CAAC,KAAK,UAAU;AAC9B,YAAMC,IAAI,CAAA;AACV,eAASC,IAAI,GAAGC,IAAKH,EAAK,QAAQE,IAAIC,GAAID;AACxC,QAAAD,EAAE,KAAKD,EAAKE,CAAC,EAAE,GAAGF,EAAKE,CAAC,EAAE,CAAC;AAC7B,MAAAF,IAAOC;AAAA,IACR;AACD,SAAK,SAASD,GAAM,KAAK,OAAOI,EAAO,MAAM,KAAK,cAAc;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,UAAML,IAAS,KAAK,OAAO,MAAO,GAAEM,IAAU,IAAIP,EAAQC,CAAM;AAChE,WAAOM,EAAQ,cAAc,KAAK,aAAaA;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAASC,GAAGC,GAAG;AACb,QAAIC,IAAS;AACb,UAAMC,IAAS,KAAK,OAAO,SAAS;AACpC,aAASP,IAAI,GAAGQ,IAAID,IAAS,GAAGP,IAAIO,GAAQC,IAAIR,KAAK;AACnD,YAAMS,IAAK,KAAK,OAAOT,IAAI,CAAC,GAAGU,IAAK,KAAK,OAAOV,IAAI,IAAI,CAAC,GAAGW,IAAK,KAAK,OAAOH,IAAI,CAAC,GAAGI,IAAK,KAAK,OAAOJ,IAAI,IAAI,CAAC;AAC/G,MAAAE,IAAKL,KAAKO,IAAKP,KAAKD,KAAKO,IAAKF,OAAQJ,IAAIK,MAAOE,IAAKF,MAAOD,MAAOH,IAAS,CAACA;AAAA,IAC/E;AACD,WAAOA;AAAA,EACR;AACH;AACAV,EAAQ,UAAU,WAAW,WAAW;AACtC,SAAO,kCAAkC,KAAK,WAAW,UAAU,KAAK,OAAO,OAAO,CAACiB,GAAYC,MAAiB,GAAGD,CAAU,KAAKC,CAAY,IAAI,EAAE,CAAC;AAC3J;","x_google_ignoreList":[0]}