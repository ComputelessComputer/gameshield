{"version":3,"file":"index27.js","sources":["../../../node_modules/.pnpm/@pixi+math@7.4.3/node_modules/@pixi/math/lib/groupD8.mjs"],"sourcesContent":["import { Matrix } from \"./Matrix.mjs\";\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1], uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1], vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1], vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1], rotationCayley = [], rotationMatrices = [], signum = Math.sign;\nfunction init() {\n  for (let i = 0; i < 16; i++) {\n    const row = [];\n    rotationCayley.push(row);\n    for (let j = 0; j < 16; j++) {\n      const _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]), _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]), _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]), _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      for (let k = 0; k < 16; k++)\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n    }\n  }\n  for (let i = 0; i < 16; i++) {\n    const mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0), rotationMatrices.push(mat);\n  }\n}\ninit();\nconst groupD8 = {\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 0°       | East      |\n   * @readonly\n   */\n  E: 0,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 45°↻     | Southeast |\n   * @readonly\n   */\n  SE: 1,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 90°↻     | South     |\n   * @readonly\n   */\n  S: 2,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 135°↻    | Southwest |\n   * @readonly\n   */\n  SW: 3,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 180°     | West      |\n   * @readonly\n   */\n  W: 4,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -135°/225°↻ | Northwest    |\n   * @readonly\n   */\n  NW: 5,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -90°/270°↻  | North        |\n   * @readonly\n   */\n  N: 6,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -45°/315°↻  | Northeast    |\n   * @readonly\n   */\n  NE: 7,\n  /**\n   * Reflection about Y-axis.\n   * @readonly\n   */\n  MIRROR_VERTICAL: 8,\n  /**\n   * Reflection about the main diagonal.\n   * @readonly\n   */\n  MAIN_DIAGONAL: 10,\n  /**\n   * Reflection about X-axis.\n   * @readonly\n   */\n  MIRROR_HORIZONTAL: 12,\n  /**\n   * Reflection about reverse diagonal.\n   * @readonly\n   */\n  REVERSE_DIAGONAL: 14,\n  /**\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n   *    after rotating the axes.\n   */\n  uX: (ind) => ux[ind],\n  /**\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n   *    after rotating the axes.\n   */\n  uY: (ind) => uy[ind],\n  /**\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n   *    after rotating the axes.\n   */\n  vX: (ind) => vx[ind],\n  /**\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n   *    after rotating the axes.\n   */\n  vY: (ind) => vy[ind],\n  /**\n   * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n   *   is needed. Only rotations have opposite symmetries while\n   *   reflections don't.\n   * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n   */\n  inv: (rotation) => rotation & 8 ? rotation & 15 : -rotation & 7,\n  /**\n   * Composes the two D8 operations.\n   *\n   * Taking `^` as reflection:\n   *\n   * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n   * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n   * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n   * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n   * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n   * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n   * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n   * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n   * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n   * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n   *\n   * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n   *   is the row in the above cayley table.\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n   *   is the column in the above cayley table.\n   * @returns {PIXI.GD8Symmetry} Composed operation\n   */\n  add: (rotationSecond, rotationFirst) => rotationCayley[rotationSecond][rotationFirst],\n  /**\n   * Reverse of `add`.\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n   * @returns {PIXI.GD8Symmetry} Result\n   */\n  sub: (rotationSecond, rotationFirst) => rotationCayley[rotationSecond][groupD8.inv(rotationFirst)],\n  /**\n   * Adds 180 degrees to rotation, which is a commutative\n   * operation.\n   * @param {number} rotation - The number to rotate.\n   * @returns {number} Rotated number\n   */\n  rotate180: (rotation) => rotation ^ 4,\n  /**\n   * Checks if the rotation angle is vertical, i.e. south\n   * or north. It doesn't work for reflections.\n   * @param {PIXI.GD8Symmetry} rotation - The number to check.\n   * @returns {boolean} Whether or not the direction is vertical\n   */\n  isVertical: (rotation) => (rotation & 3) === 2,\n  // rotation % 4 === 2\n  /**\n   * Approximates the vector `V(dx,dy)` into one of the\n   * eight directions provided by `groupD8`.\n   * @param {number} dx - X-component of the vector\n   * @param {number} dy - Y-component of the vector\n   * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n   *  one of the eight symmetries.\n   */\n  byDirection: (dx, dy) => Math.abs(dx) * 2 <= Math.abs(dy) ? dy >= 0 ? groupD8.S : groupD8.N : Math.abs(dy) * 2 <= Math.abs(dx) ? dx > 0 ? groupD8.E : groupD8.W : dy > 0 ? dx > 0 ? groupD8.SE : groupD8.SW : dx > 0 ? groupD8.NE : groupD8.NW,\n  /**\n   * Helps sprite to compensate texture packer rotation.\n   * @param {PIXI.Matrix} matrix - sprite world matrix\n   * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n   * @param {number} tx - sprite anchoring\n   * @param {number} ty - sprite anchoring\n   */\n  matrixAppendRotationInv: (matrix, rotation, tx = 0, ty = 0) => {\n    const mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx, mat.ty = ty, matrix.append(mat);\n  }\n};\nexport {\n  groupD8\n};\n//# sourceMappingURL=groupD8.mjs.map\n"],"names":["ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","init","i","row","j","_ux","_uy","_vx","_vy","k","mat","Matrix","groupD8","ind","rotation","rotationSecond","rotationFirst","dx","dy","matrix","tx","ty"],"mappings":"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","x_google_ignoreList":[0]}