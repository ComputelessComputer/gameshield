{"version":3,"file":"index576.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs"],"sourcesContent":["import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n"],"names":["HTMLTextStyle","TextStyle","options","value","generateTextStyleKey","textStyleToCSS","toAdd","v","toRemove","warn"],"mappings":";;;;AAMA,MAAMA,UAAsBC,EAAU;AAAA,EACpC,YAAYC,IAAU,IAAI;AACxB,UAAMA,CAAO,GACb,KAAK,gBAAgB,IACrB,KAAK,iBAAiB,KAAK,eAAeA,EAAQ,eAClD,KAAK,YAAYA,EAAQ,aAAa,CAAA;AAAA,EACvC;AAAA;AAAA,EAED,IAAI,aAAaC,GAAO;AACtB,SAAK,gBAAgBA,aAAiB,QAAQA,IAAQ,CAACA,CAAK,GAC5D,KAAK,OAAM;AAAA,EACZ;AAAA,EACD,IAAI,eAAe;AACjB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,eAAe;AACb,gBAAK,YAAYC,EAAqB,IAAI,IAAI,KAAK,cAAc,KAAK,GAAG,GAClE,KAAK;AAAA,EACb;AAAA,EACD,SAAS;AACP,SAAK,YAAY,MACjB,MAAM,OAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,WAAO,IAAIJ,EAAc;AAAA,MACvB,OAAO,KAAK;AAAA,MACZ,YAAY,KAAK;AAAA,MACjB,YAAY,KAAK,aAAa,EAAE,GAAG,KAAK,WAAU,IAAK;AAAA,MACvD,MAAM,KAAK;AAAA,MACX,YAAY,KAAK;AAAA,MACjB,UAAU,KAAK;AAAA,MACf,WAAW,KAAK;AAAA,MAChB,aAAa,KAAK;AAAA,MAClB,YAAY,KAAK;AAAA,MACjB,eAAe,KAAK;AAAA,MACpB,YAAY,KAAK;AAAA,MACjB,SAAS,KAAK;AAAA,MACd,QAAQ,KAAK;AAAA,MACb,YAAY,KAAK;AAAA,MACjB,UAAU,KAAK;AAAA,MACf,eAAe,KAAK;AAAA,MACpB,cAAc,KAAK;AAAA,IACzB,CAAK;AAAA,EACF;AAAA,EACD,IAAI,WAAW;AACb,WAAK,KAAK,cACR,KAAK,YAAYK,EAAe,IAAI,IAE/B,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,eAAeF,GAAO;AACpB,UAAMG,IAAQH,EAAM,OAAO,CAACI,MAAM,CAAC,KAAK,aAAa,SAASA,CAAC,CAAC;AAChE,IAAID,EAAM,SAAS,MACjB,KAAK,aAAa,KAAK,GAAGA,CAAK,GAC/B,KAAK,OAAM;AAAA,EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,kBAAkBH,GAAO;AACvB,UAAMK,IAAWL,EAAM,OAAO,CAACI,MAAM,KAAK,aAAa,SAASA,CAAC,CAAC;AAClE,IAAIC,EAAS,SAAS,MACpB,KAAK,eAAe,KAAK,aAAa,OAAO,CAACD,MAAM,CAACC,EAAS,SAASD,CAAC,CAAC,GACzE,KAAK,OAAM;AAAA,EAEd;AAAA,EACD,IAAI,KAAKJ,GAAO;AACd,IAAI,OAAOA,KAAU,YAAY,OAAOA,KAAU,YAChDM,EAAK,8DAA8D,GAErE,MAAM,OAAON;AAAA,EACd;AAAA,EACD,IAAI,OAAOA,GAAO;AAChB,IAAIA,KAAS,OAAOA,KAAU,YAAY,OAAOA,KAAU,YACzDM,EAAK,gEAAgE,GAEvE,MAAM,SAASN;AAAA,EAChB;AACH;","x_google_ignoreList":[0]}