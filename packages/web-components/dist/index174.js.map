{"version":3,"file":"index174.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/shader/utils/checkMaxIfStatementsInShader.mjs"],"sourcesContent":["const fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(`\n`);\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i)\n    i > 0 && (src += `\nelse `), i < maxIfs - 1 && (src += `if(test == ${i}.0){}`);\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0)\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  for (; ; ) {\n    const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n    if (gl.shaderSource(shader, fragmentSrc), gl.compileShader(shader), !gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n      maxIfs = maxIfs / 2 | 0;\n    else\n      break;\n  }\n  return maxIfs;\n}\nexport {\n  checkMaxIfStatementsInShader\n};\n//# sourceMappingURL=checkMaxIfStatementsInShader.mjs.map\n"],"names":["fragTemplate","generateIfTestSrc","maxIfs","src","i","checkMaxIfStatementsInShader","gl","shader","fragmentSrc"],"mappings":"AAAA,MAAMA,IAAe;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,EAAE,KAAK;AAAA,CACN;AACD,SAASC,EAAkBC,GAAQ;AACjC,MAAIC,IAAM;AACV,WAASC,IAAI,GAAGA,IAAIF,GAAQ,EAAEE;AAC5B,IAAAA,IAAI,MAAMD,KAAO;AAAA,SACZC,IAAIF,IAAS,MAAMC,KAAO,cAAcC,CAAC;AAChD,SAAOD;AACT;AACA,SAASE,EAA6BH,GAAQI,GAAI;AAChD,MAAIJ,MAAW;AACb,UAAM,IAAI,MAAM,+DAA+D;AACjF,QAAMK,IAASD,EAAG,aAAaA,EAAG,eAAe;AACjD,aAAW;AACT,UAAME,IAAcR,EAAa,QAAQ,eAAeC,EAAkBC,CAAM,CAAC;AACjF,QAAII,EAAG,aAAaC,GAAQC,CAAW,GAAGF,EAAG,cAAcC,CAAM,GAAG,CAACD,EAAG,mBAAmBC,GAAQD,EAAG,cAAc;AAClH,MAAAJ,IAASA,IAAS,IAAI;AAAA;AAEtB;AAAA,EACH;AACD,SAAOA;AACT;","x_google_ignoreList":[0]}