{"version":3,"file":"index483.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/utils/pool/Pool.mjs"],"sourcesContent":["\"use strict\";\nclass Pool {\n  /**\n   * Constructs a new Pool.\n   * @param ClassType - The constructor of the items in the pool.\n   * @param {number} [initialSize] - The initial size of the pool.\n   */\n  constructor(ClassType, initialSize) {\n    this._pool = [];\n    this._count = 0;\n    this._index = 0;\n    this._classType = ClassType;\n    if (initialSize) {\n      this.prepopulate(initialSize);\n    }\n  }\n  /**\n   * Prepopulates the pool with a given number of items.\n   * @param total - The number of items to add to the pool.\n   */\n  prepopulate(total) {\n    for (let i = 0; i < total; i++) {\n      this._pool[this._index++] = new this._classType();\n    }\n    this._count += total;\n  }\n  /**\n   * Gets an item from the pool. Calls the item's `init` method if it exists.\n   * If there are no items left in the pool, a new one will be created.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(data) {\n    let item;\n    if (this._index > 0) {\n      item = this._pool[--this._index];\n    } else {\n      item = new this._classType();\n    }\n    item.init?.(data);\n    return item;\n  }\n  /**\n   * Returns an item to the pool. Calls the item's `reset` method if it exists.\n   * @param {T} item - The item to return to the pool.\n   */\n  return(item) {\n    item.reset?.();\n    this._pool[this._index++] = item;\n  }\n  /**\n   * Gets the number of items in the pool.\n   * @readonly\n   * @member {number}\n   */\n  get totalSize() {\n    return this._count;\n  }\n  /**\n   * Gets the number of items in the pool that are free to use without needing to create more.\n   * @readonly\n   * @member {number}\n   */\n  get totalFree() {\n    return this._index;\n  }\n  /**\n   * Gets the number of items in the pool that are currently in use.\n   * @readonly\n   * @member {number}\n   */\n  get totalUsed() {\n    return this._count - this._index;\n  }\n  /** clears the pool - mainly used for debugging! */\n  clear() {\n    this._pool.length = 0;\n    this._index = 0;\n  }\n}\n\nexport { Pool };\n//# sourceMappingURL=Pool.mjs.map\n"],"names":["Pool","ClassType","initialSize","total","i","data","_a","item"],"mappings":"AACA,MAAMA,EAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,YAAYC,GAAWC,GAAa;AAClC,SAAK,QAAQ,IACb,KAAK,SAAS,GACd,KAAK,SAAS,GACd,KAAK,aAAaD,GACdC,KACF,KAAK,YAAYA,CAAW;AAAA,EAE/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,YAAYC,GAAO;AACjB,aAASC,IAAI,GAAGA,IAAID,GAAOC;AACzB,WAAK,MAAM,KAAK,QAAQ,IAAI,IAAI,KAAK;AAEvC,SAAK,UAAUD;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAIE,GAAM;AA/BZ,QAAAC;AAgCI,QAAIC;AACJ,WAAI,KAAK,SAAS,IAChBA,IAAO,KAAK,MAAM,EAAE,KAAK,MAAM,IAE/BA,IAAO,IAAI,KAAK,eAElBD,IAAAC,EAAK,SAAL,QAAAD,EAAA,KAAAC,GAAYF,IACLE;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,OAAOA,GAAM;AA7Cf,QAAAD;AA8CI,KAAAA,IAAAC,EAAK,UAAL,QAAAD,EAAA,KAAAC,IACA,KAAK,MAAM,KAAK,QAAQ,IAAIA;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,YAAY;AACd,WAAO,KAAK,SAAS,KAAK;AAAA,EAC3B;AAAA;AAAA,EAED,QAAQ;AACN,SAAK,MAAM,SAAS,GACpB,KAAK,SAAS;AAAA,EACf;AACH;","x_google_ignoreList":[0]}