{"version":3,"file":"index220.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/geometry/Attribute.mjs"],"sourcesContent":["import { TYPES } from \"@pixi/constants\";\nclass Attribute {\n  /**\n   * @param buffer - the id of the buffer that this attribute will look for\n   * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\n   * @param normalized - should the data be normalized.\n   * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n   * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n   * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n   * @param [instance=false] - Whether the geometry is instanced.\n   * @param [divisor=1] - Divisor to use when doing instanced rendering\n   */\n  constructor(buffer, size = 0, normalized = !1, type = TYPES.FLOAT, stride, start, instance, divisor = 1) {\n    this.buffer = buffer, this.size = size, this.normalized = normalized, this.type = type, this.stride = stride, this.start = start, this.instance = instance, this.divisor = divisor;\n  }\n  /** Destroys the Attribute. */\n  destroy() {\n    this.buffer = null;\n  }\n  /**\n   * Helper function that creates an Attribute based on the information provided\n   * @param buffer - the id of the buffer that this attribute will look for\n   * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n   * @param [normalized=false] - should the data be normalized.\n   * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n   * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n   * @returns - A new {@link PIXI.Attribute} based on the information provided\n   */\n  static from(buffer, size, normalized, type, stride) {\n    return new Attribute(buffer, size, normalized, type, stride);\n  }\n}\nexport {\n  Attribute\n};\n//# sourceMappingURL=Attribute.mjs.map\n"],"names":["Attribute","buffer","size","normalized","type","TYPES","stride","start","instance","divisor"],"mappings":";AACA,MAAMA,EAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWd,YAAYC,GAAQC,IAAO,GAAGC,IAAa,IAAIC,IAAOC,EAAM,OAAOC,GAAQC,GAAOC,GAAUC,IAAU,GAAG;AACvG,SAAK,SAASR,GAAQ,KAAK,OAAOC,GAAM,KAAK,aAAaC,GAAY,KAAK,OAAOC,GAAM,KAAK,SAASE,GAAQ,KAAK,QAAQC,GAAO,KAAK,WAAWC,GAAU,KAAK,UAAUC;AAAA,EAC5K;AAAA;AAAA,EAED,UAAU;AACR,SAAK,SAAS;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,OAAO,KAAKR,GAAQC,GAAMC,GAAYC,GAAME,GAAQ;AAClD,WAAO,IAAIN,EAAUC,GAAQC,GAAMC,GAAYC,GAAME,CAAM;AAAA,EAC5D;AACH;","x_google_ignoreList":[0]}