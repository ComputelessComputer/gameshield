{"version":3,"file":"index134.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/renderTexture/RenderTexture.mjs"],"sourcesContent":["import { Texture } from \"../textures/Texture.mjs\";\nimport { BaseRenderTexture } from \"./BaseRenderTexture.mjs\";\nclass RenderTexture extends Texture {\n  /**\n   * @param baseRenderTexture - The base texture object that this texture uses.\n   * @param frame - The rectangle frame of the texture to show.\n   */\n  constructor(baseRenderTexture, frame) {\n    super(baseRenderTexture, frame), this.valid = !0, this.filterFrame = null, this.filterPoolKey = null, this.updateUvs();\n  }\n  /**\n   * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\n   * @readonly\n   */\n  get framebuffer() {\n    return this.baseTexture.framebuffer;\n  }\n  /**\n   * Shortcut to `this.framebuffer.multisample`.\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  get multisample() {\n    return this.framebuffer.multisample;\n  }\n  set multisample(value) {\n    this.framebuffer.multisample = value;\n  }\n  /**\n   * Resizes the RenderTexture.\n   * @param desiredWidth - The desired width to resize to.\n   * @param desiredHeight - The desired height to resize to.\n   * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n   */\n  resize(desiredWidth, desiredHeight, resizeBaseTexture = !0) {\n    const resolution = this.baseTexture.resolution, width = Math.round(desiredWidth * resolution) / resolution, height = Math.round(desiredHeight * resolution) / resolution;\n    this.valid = width > 0 && height > 0, this._frame.width = this.orig.width = width, this._frame.height = this.orig.height = height, resizeBaseTexture && this.baseTexture.resize(width, height), this.updateUvs();\n  }\n  /**\n   * Changes the resolution of baseTexture, but does not change framebuffer size.\n   * @param resolution - The new resolution to apply to RenderTexture\n   */\n  setResolution(resolution) {\n    const { baseTexture } = this;\n    baseTexture.resolution !== resolution && (baseTexture.setResolution(resolution), this.resize(baseTexture.width, baseTexture.height, !1));\n  }\n  /**\n   * A short hand way of creating a render texture.\n   * @param options - Options\n   * @param {number} [options.width=100] - The width of the render texture\n   * @param {number} [options.height=100] - The height of the render texture\n   * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.BaseTexture.defaultOptions.scaleMode] - See {@link PIXI.SCALE_MODES}\n   *    for possible values\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the texture\n   *    being generated\n   * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer\n   * @returns The new render texture\n   */\n  static create(options) {\n    return new RenderTexture(new BaseRenderTexture(options));\n  }\n}\nexport {\n  RenderTexture\n};\n//# sourceMappingURL=RenderTexture.mjs.map\n"],"names":["RenderTexture","Texture","baseRenderTexture","frame","value","desiredWidth","desiredHeight","resizeBaseTexture","resolution","width","height","baseTexture","options","BaseRenderTexture"],"mappings":";;AAEA,MAAMA,UAAsBC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlC,YAAYC,GAAmBC,GAAO;AACpC,UAAMD,GAAmBC,CAAK,GAAG,KAAK,QAAQ,IAAI,KAAK,cAAc,MAAM,KAAK,gBAAgB,MAAM,KAAK;EAC5G;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,cAAc;AAChB,WAAO,KAAK,YAAY;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,cAAc;AAChB,WAAO,KAAK,YAAY;AAAA,EACzB;AAAA,EACD,IAAI,YAAYC,GAAO;AACrB,SAAK,YAAY,cAAcA;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAOC,GAAcC,GAAeC,IAAoB,IAAI;AAC1D,UAAMC,IAAa,KAAK,YAAY,YAAYC,IAAQ,KAAK,MAAMJ,IAAeG,CAAU,IAAIA,GAAYE,IAAS,KAAK,MAAMJ,IAAgBE,CAAU,IAAIA;AAC9J,SAAK,QAAQC,IAAQ,KAAKC,IAAS,GAAG,KAAK,OAAO,QAAQ,KAAK,KAAK,QAAQD,GAAO,KAAK,OAAO,SAAS,KAAK,KAAK,SAASC,GAAQH,KAAqB,KAAK,YAAY,OAAOE,GAAOC,CAAM,GAAG,KAAK,UAAS;AAAA,EAC/M;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,cAAcF,GAAY;AACxB,UAAM,EAAE,aAAAG,EAAa,IAAG;AACxB,IAAAA,EAAY,eAAeH,MAAeG,EAAY,cAAcH,CAAU,GAAG,KAAK,OAAOG,EAAY,OAAOA,EAAY,QAAQ,EAAE;AAAA,EACvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,OAAO,OAAOC,GAAS;AACrB,WAAO,IAAIZ,EAAc,IAAIa,EAAkBD,CAAO,CAAC;AAAA,EACxD;AACH;","x_google_ignoreList":[0]}