{"version":3,"file":"index547.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs"],"sourcesContent":["import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n"],"names":["_NineSliceGeometry","PlaneGeometry","options","_a","_b","p","width","height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_anchorX","_anchorY","w","scaleW","h","scaleH","scale","anchorOffsetX","anchorOffsetY","uvs","_uvw","_uvh","NineSliceGeometry"],"mappings":"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","x_google_ignoreList":[0]}