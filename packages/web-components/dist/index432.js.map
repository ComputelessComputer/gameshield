{"version":3,"file":"index432.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs"],"sourcesContent":["import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { getMaxFragmentPrecision } from './program/getMaxFragmentPrecision.mjs';\nimport { addProgramDefines } from './program/preprocessors/addProgramDefines.mjs';\nimport { ensurePrecision } from './program/preprocessors/ensurePrecision.mjs';\nimport { insertVersion } from './program/preprocessors/insertVersion.mjs';\nimport { setProgramName } from './program/preprocessors/setProgramName.mjs';\nimport { stripVersion } from './program/preprocessors/stripVersion.mjs';\n\n\"use strict\";\nconst processes = {\n  // strips any version headers..\n  stripVersion,\n  // adds precision string if not already present\n  ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines,\n  // add the program name to the shader\n  setProgramName,\n  // add the version string to the shader header\n  insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf(\"#version 300 es\") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: \"highp\",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this.transformFeedbackVaryings = options.transformFeedbackVaryings;\n    this._key = createIdFromString(`${this.vertex}:${this.fragment}`, \"gl-program\");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: \"highp\",\n  preferredFragmentPrecision: \"mediump\"\n};\nlet GlProgram = _GlProgram;\n\nexport { GlProgram };\n//# sourceMappingURL=GlProgram.mjs.map\n"],"names":["processes","stripVersion","ensurePrecision","addProgramDefines","setProgramName","insertVersion","programCache","_GlProgram","options","isES300","preprocessorOptions","getMaxFragmentPrecision","fragment","vertex","processKey","processOptions","createIdFromString","key","GlProgram"],"mappings":";;;;;;;AASA,MAAMA,IAAY;AAAA;AAAA,EAEhB,cAAAC;AAAA;AAAA,EAEA,iBAAAC;AAAA;AAAA,EAEA,mBAAAC;AAAA;AAAA,EAEA,gBAAAC;AAAA;AAAA,EAEA,eAAAC;AACF,GACMC,IAA+B,uBAAO,OAAO,IAAI,GACjDC,IAAa,MAAMA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlC,YAAYC,GAAS;AACnB,IAAAA,IAAU,EAAE,GAAGD,EAAW,gBAAgB,GAAGC,EAAO;AACpD,UAAMC,IAAUD,EAAQ,SAAS,QAAQ,iBAAiB,MAAM,IAC1DE,IAAsB;AAAA,MAC1B,cAAcD;AAAA,MACd,iBAAiB;AAAA,QACf,4BAA4BD,EAAQ;AAAA,QACpC,0BAA0BA,EAAQ;AAAA,QAClC,6BAA6B;AAAA,QAC7B,+BAA+BG,EAAyB;AAAA,MACzD;AAAA,MACD,gBAAgB;AAAA,QACd,MAAMH,EAAQ;AAAA,MACf;AAAA,MACD,mBAAmBC;AAAA,MACnB,eAAeA;AAAA,IACrB;AACI,QAAIG,IAAWJ,EAAQ,UACnBK,IAASL,EAAQ;AACrB,WAAO,KAAKR,CAAS,EAAE,QAAQ,CAACc,MAAe;AAC7C,YAAMC,IAAiBL,EAAoBI,CAAU;AACrD,MAAAF,IAAWZ,EAAUc,CAAU,EAAEF,GAAUG,GAAgB,EAAI,GAC/DF,IAASb,EAAUc,CAAU,EAAED,GAAQE,GAAgB,EAAK;AAAA,IAClE,CAAK,GACD,KAAK,WAAWH,GAChB,KAAK,SAASC,GACd,KAAK,4BAA4BL,EAAQ,2BACzC,KAAK,OAAOQ,EAAmB,GAAG,KAAK,MAAM,IAAI,KAAK,QAAQ,IAAI,YAAY;AAAA,EAC/E;AAAA;AAAA,EAED,UAAU;AACR,SAAK,WAAW,MAChB,KAAK,SAAS,MACd,KAAK,iBAAiB,MACtB,KAAK,eAAe,MACpB,KAAK,oBAAoB,MACzB,KAAK,4BAA4B;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,KAAKR,GAAS;AACnB,UAAMS,IAAM,GAAGT,EAAQ,MAAM,IAAIA,EAAQ,QAAQ;AACjD,WAAKF,EAAaW,CAAG,MACnBX,EAAaW,CAAG,IAAI,IAAIV,EAAWC,CAAO,IAErCF,EAAaW,CAAG;AAAA,EACxB;AACH;AAEAV,EAAW,iBAAiB;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,4BAA4B;AAC9B;AACG,IAACW,IAAYX;","x_google_ignoreList":[0]}