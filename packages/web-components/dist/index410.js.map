{"version":3,"file":"index410.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/maths/shapes/RoundedRectangle.mjs"],"sourcesContent":["import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nconst isCornerWithinStroke = (pX, pY, cornerX, cornerY, radius, strokeWidthInner, strokeWidthOuter) => {\n  const dx = pX - cornerX;\n  const dy = pY - cornerY;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance >= radius - strokeWidthInner && distance <= radius + strokeWidthOuter;\n};\nclass RoundedRectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0, radius = 20) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    this.type = \"roundedRectangle\";\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n  }\n  /**\n   * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    out.x = this.x;\n    out.y = this.y;\n    out.width = this.width;\n    out.height = this.height;\n    return out;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        let dx = x - (this.x + radius);\n        let dy = y - (this.y + radius);\n        const radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param pX - The X coordinate of the point to test\n   * @param pY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke, 0.5 by default\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(pX, pY, strokeWidth, alignment = 0.5) {\n    const { x, y, width, height, radius } = this;\n    const strokeWidthOuter = strokeWidth * (1 - alignment);\n    const strokeWidthInner = strokeWidth - strokeWidthOuter;\n    const innerX = x + radius;\n    const innerY = y + radius;\n    const innerWidth = width - radius * 2;\n    const innerHeight = height - radius * 2;\n    const rightBound = x + width;\n    const bottomBound = y + height;\n    if ((pX >= x - strokeWidthOuter && pX <= x + strokeWidthInner || pX >= rightBound - strokeWidthInner && pX <= rightBound + strokeWidthOuter) && pY >= innerY && pY <= innerY + innerHeight) {\n      return true;\n    }\n    if ((pY >= y - strokeWidthOuter && pY <= y + strokeWidthInner || pY >= bottomBound - strokeWidthInner && pY <= bottomBound + strokeWidthOuter) && pX >= innerX && pX <= innerX + innerWidth) {\n      return true;\n    }\n    return (\n      // Top-left\n      pX < innerX && pY < innerY && isCornerWithinStroke(\n        pX,\n        pY,\n        innerX,\n        innerY,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX > rightBound - radius && pY < innerY && isCornerWithinStroke(\n        pX,\n        pY,\n        rightBound - radius,\n        innerY,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX > rightBound - radius && pY > bottomBound - radius && isCornerWithinStroke(\n        pX,\n        pY,\n        rightBound - radius,\n        bottomBound - radius,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      ) || pX < innerX && pY > bottomBound - radius && isCornerWithinStroke(\n        pX,\n        pY,\n        innerX,\n        bottomBound - radius,\n        radius,\n        strokeWidthInner,\n        strokeWidthOuter\n      )\n    );\n  }\n  toString() {\n    return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n  }\n}\n\nexport { RoundedRectangle };\n//# sourceMappingURL=RoundedRectangle.mjs.map\n"],"names":["isCornerWithinStroke","pX","pY","cornerX","cornerY","radius","strokeWidthInner","strokeWidthOuter","dx","dy","distance","RoundedRectangle","x","y","width","height","out","Rectangle","rectangle","radius2","strokeWidth","alignment","innerX","innerY","innerWidth","innerHeight","rightBound","bottomBound"],"mappings":"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","x_google_ignoreList":[0]}