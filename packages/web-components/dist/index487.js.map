{"version":3,"file":"index487.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/container/container-mixins/effectsMixin.mjs"],"sourcesContent":["import { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskEffectManager } from '../../../rendering/mask/MaskEffectManager.mjs';\n\n\"use strict\";\nconst effectsMixin = {\n  _maskEffect: null,\n  _maskOptions: {\n    inverse: false\n  },\n  _filterEffect: null,\n  /**\n   * @todo Needs docs.\n   * @memberof scene.Container#\n   * @type {Array<Effect>}\n   */\n  effects: [],\n  _markStructureAsChanged() {\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n  },\n  /**\n   * @todo Needs docs.\n   * @param effect - The effect to add.\n   * @memberof scene.Container#\n   * @ignore\n   */\n  addEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index !== -1)\n      return;\n    this.effects.push(effect);\n    this.effects.sort((a, b) => a.priority - b.priority);\n    this._markStructureAsChanged();\n    this._updateIsSimple();\n  },\n  /**\n   * @todo Needs docs.\n   * @param effect - The effect to remove.\n   * @memberof scene.Container#\n   * @ignore\n   */\n  removeEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index === -1)\n      return;\n    this.effects.splice(index, 1);\n    this._markStructureAsChanged();\n    this._updateIsSimple();\n  },\n  set mask(value) {\n    const effect = this._maskEffect;\n    if (effect?.mask === value)\n      return;\n    if (effect) {\n      this.removeEffect(effect);\n      MaskEffectManager.returnMaskEffect(effect);\n      this._maskEffect = null;\n    }\n    if (value === null || value === void 0)\n      return;\n    this._maskEffect = MaskEffectManager.getMaskEffect(value);\n    this.addEffect(this._maskEffect);\n  },\n  /**\n   * Used to set mask and control mask options.\n   * @param options\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.setMask({\n   *     mask: graphics,\n   *     inverse: true,\n   * });\n   * @memberof scene.Container#\n   */\n  setMask(options) {\n    this._maskOptions = {\n      ...this._maskOptions,\n      ...options\n    };\n    if (options.mask) {\n      this.mask = options.mask;\n    }\n    this._markStructureAsChanged();\n  },\n  /**\n   * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n   * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n   * {@link Graphics} or a {@link Sprite} object. This allows for much faster masking in canvas as it\n   * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n   * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n   * To remove a mask, set this property to `null`.\n   *\n   * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.mask = graphics;\n   * @memberof scene.Container#\n   */\n  get mask() {\n    return this._maskEffect?.mask;\n  },\n  set filters(value) {\n    if (!Array.isArray(value) && value)\n      value = [value];\n    const effect = this._filterEffect || (this._filterEffect = new FilterEffect());\n    value = value;\n    const hasFilters = value?.length > 0;\n    const hadFilters = effect.filters?.length > 0;\n    const didChange = hasFilters !== hadFilters;\n    value = Array.isArray(value) ? value.slice(0) : value;\n    effect.filters = Object.freeze(value);\n    if (didChange) {\n      if (hasFilters) {\n        this.addEffect(effect);\n      } else {\n        this.removeEffect(effect);\n        effect.filters = value ?? null;\n      }\n    }\n  },\n  /**\n   * Sets the filters for the displayObject.\n   * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n   * To remove filters simply set this property to `'null'`.\n   * @memberof scene.Container#\n   */\n  get filters() {\n    return this._filterEffect?.filters;\n  },\n  set filterArea(value) {\n    this._filterEffect || (this._filterEffect = new FilterEffect());\n    this._filterEffect.filterArea = value;\n  },\n  /**\n   * The area the filter is applied to. This is used as more of an optimization\n   * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n   *\n   * Also works as an interaction mask.\n   * @memberof scene.Container#\n   */\n  get filterArea() {\n    return this._filterEffect?.filterArea;\n  }\n};\n\nexport { effectsMixin };\n//# sourceMappingURL=effectsMixin.mjs.map\n"],"names":["effectsMixin","renderGroup","effect","a","b","index","value","MaskEffectManager","options","_a","FilterEffect","hasFilters","hadFilters","didChange"],"mappings":"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","x_google_ignoreList":[0]}