{"version":3,"file":"index474.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { isPow2 } from '../../../../../maths/misc/pow2.mjs';\nimport { definedProps } from '../../../../../scene/container/utils/definedProps.mjs';\nimport { uid } from '../../../../../utils/data/uid.mjs';\nimport { TextureStyle } from '../TextureStyle.mjs';\n\n\"use strict\";\nconst _TextureSource = class _TextureSource extends EventEmitter {\n  /**\n   * @param options - options for creating a new TextureSource\n   */\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    /** unique id for this Texture source */\n    this.uid = uid(\"textureSource\");\n    /**\n     * The resource type used by this TextureSource. This is used by the bind groups to determine\n     * how to handle this resource.\n     * @ignore\n     * @internal\n     */\n    this._resourceType = \"textureSource\";\n    /**\n     * i unique resource id, used by the bind group systems.\n     * This can change if the texture is resized or its resource changes\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * this is how the backends know how to upload this texture to the GPU\n     * It changes depending on the resource type. Classes that extend TextureSource\n     * should override this property.\n     * @ignore\n     * @internal\n     */\n    this.uploadMethodId = \"unknown\";\n    // dimensions\n    this._resolution = 1;\n    /** the pixel width of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelWidth = 1;\n    /** the pixel height of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelHeight = 1;\n    /**\n     * the width of this texture source, accounting for resolution\n     * eg pixelWidth 200, resolution 2, then width will be 100\n     */\n    this.width = 1;\n    /**\n     * the height of this texture source, accounting for resolution\n     * eg pixelHeight 200, resolution 2, then height will be 100\n     */\n    this.height = 1;\n    /**\n     * The number of samples of a multisample texture. This is always 1 for non-multisample textures.\n     * To enable multisample for a texture, set antialias to true\n     * @internal\n     * @ignore\n     */\n    this.sampleCount = 1;\n    /** The number of mip levels to generate for this texture. this is  overridden if autoGenerateMipmaps is true */\n    this.mipLevelCount = 1;\n    /**\n     * Should we auto generate mipmaps for this texture? This will automatically generate mipmaps\n     * for this texture when uploading to the GPU. Mipmapped textures take up more memory, but\n     * can look better when scaled down.\n     *\n     * For performance reasons, it is recommended to NOT use this with RenderTextures, as they are often updated every frame.\n     * If you do, make sure to call `updateMipmaps` after you update the texture.\n     */\n    this.autoGenerateMipmaps = false;\n    /** the format that the texture data has */\n    this.format = \"rgba8unorm\";\n    /** how many dimensions does this texture have? currently v8 only supports 2d */\n    this.dimension = \"2d\";\n    /**\n     * Only really affects RenderTextures.\n     * Should we use antialiasing for this texture. It will look better, but may impact performance as a\n     * Blit operation will be required to resolve the texture.\n     */\n    this.antialias = false;\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    this._touched = 0;\n    /**\n     * Used by the batcher to build texture batches. faster to have the variable here!\n     * @protected\n     */\n    this._batchTick = -1;\n    /**\n     * A temporary batch location for the texture batching. Here for performance reasons only!\n     * @protected\n     */\n    this._textureBindLocation = -1;\n    options = { ..._TextureSource.defaultOptions, ...options };\n    this.label = options.label ?? \"\";\n    this.resource = options.resource;\n    this.autoGarbageCollect = options.autoGarbageCollect;\n    this._resolution = options.resolution;\n    if (options.width) {\n      this.pixelWidth = options.width * this._resolution;\n    } else {\n      this.pixelWidth = this.resource ? this.resourceWidth ?? 1 : 1;\n    }\n    if (options.height) {\n      this.pixelHeight = options.height * this._resolution;\n    } else {\n      this.pixelHeight = this.resource ? this.resourceHeight ?? 1 : 1;\n    }\n    this.width = this.pixelWidth / this._resolution;\n    this.height = this.pixelHeight / this._resolution;\n    this.format = options.format;\n    this.dimension = options.dimensions;\n    this.mipLevelCount = options.mipLevelCount;\n    this.autoGenerateMipmaps = options.autoGenerateMipmaps;\n    this.sampleCount = options.sampleCount;\n    this.antialias = options.antialias;\n    this.alphaMode = options.alphaMode;\n    this.style = new TextureStyle(definedProps(options));\n    this.destroyed = false;\n    this._refreshPOT();\n  }\n  /** returns itself */\n  get source() {\n    return this;\n  }\n  /** the style of the texture */\n  get style() {\n    return this._style;\n  }\n  set style(value) {\n    if (this.style === value)\n      return;\n    this._style?.off(\"change\", this._onStyleChange, this);\n    this._style = value;\n    this._style?.on(\"change\", this._onStyleChange, this);\n    this._onStyleChange();\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this._style.addressMode;\n  }\n  set addressMode(value) {\n    this._style.addressMode = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get repeatMode() {\n    return this._style.addressMode;\n  }\n  set repeatMode(value) {\n    this._style.addressMode = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n  get magFilter() {\n    return this._style.magFilter;\n  }\n  set magFilter(value) {\n    this._style.magFilter = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n  get minFilter() {\n    return this._style.minFilter;\n  }\n  set minFilter(value) {\n    this._style.minFilter = value;\n  }\n  /** Specifies behavior for sampling between mipmap levels. */\n  get mipmapFilter() {\n    return this._style.mipmapFilter;\n  }\n  set mipmapFilter(value) {\n    this._style.mipmapFilter = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMinClamp() {\n    return this._style.lodMinClamp;\n  }\n  set lodMinClamp(value) {\n    this._style.lodMinClamp = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMaxClamp() {\n    return this._style.lodMaxClamp;\n  }\n  set lodMaxClamp(value) {\n    this._style.lodMaxClamp = value;\n  }\n  _onStyleChange() {\n    this.emit(\"styleChange\", this);\n  }\n  /** call this if you have modified the texture outside of the constructor */\n  update() {\n    if (this.resource) {\n      const resolution = this._resolution;\n      const didResize = this.resize(this.resourceWidth / resolution, this.resourceHeight / resolution);\n      if (didResize)\n        return;\n    }\n    this.emit(\"update\", this);\n  }\n  /** Destroys this texture source */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    if (this._style) {\n      this._style.destroy();\n      this._style = null;\n    }\n    this.uploadMethodId = null;\n    this.resource = null;\n    this.removeAllListeners();\n  }\n  /**\n   * This will unload the Texture source from the GPU. This will free up the GPU memory\n   * As soon as it is required fore rendering, it will be re-uploaded.\n   */\n  unload() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n    this.emit(\"unload\", this);\n  }\n  /** the width of the resource. This is the REAL pure number, not accounting resolution   */\n  get resourceWidth() {\n    const { resource } = this;\n    return resource.naturalWidth || resource.videoWidth || resource.displayWidth || resource.width;\n  }\n  /** the height of the resource. This is the REAL pure number, not accounting resolution */\n  get resourceHeight() {\n    const { resource } = this;\n    return resource.naturalHeight || resource.videoHeight || resource.displayHeight || resource.height;\n  }\n  /**\n   * the resolution of the texture. Changing this number, will not change the number of pixels in the actual texture\n   * but will the size of the texture when rendered.\n   *\n   * changing the resolution of this texture to 2 for example will make it appear twice as small when rendered (as pixel\n   * density will have increased)\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(resolution) {\n    if (this._resolution === resolution)\n      return;\n    this._resolution = resolution;\n    this.width = this.pixelWidth / resolution;\n    this.height = this.pixelHeight / resolution;\n  }\n  /**\n   * Resize the texture, this is handy if you want to use the texture as a render texture\n   * @param width - the new width of the texture\n   * @param height - the new height of the texture\n   * @param resolution - the new resolution of the texture\n   * @returns - if the texture was resized\n   */\n  resize(width, height, resolution) {\n    resolution || (resolution = this._resolution);\n    width || (width = this.width);\n    height || (height = this.height);\n    const newPixelWidth = Math.round(width * resolution);\n    const newPixelHeight = Math.round(height * resolution);\n    this.width = newPixelWidth / resolution;\n    this.height = newPixelHeight / resolution;\n    this._resolution = resolution;\n    if (this.pixelWidth === newPixelWidth && this.pixelHeight === newPixelHeight) {\n      return false;\n    }\n    this._refreshPOT();\n    this.pixelWidth = newPixelWidth;\n    this.pixelHeight = newPixelHeight;\n    this.emit(\"resize\", this);\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n    return true;\n  }\n  /**\n   * Lets the renderer know that this texture has been updated and its mipmaps should be re-generated.\n   * This is only important for RenderTexture instances, as standard Texture instances will have their\n   * mipmaps generated on upload. You should call this method after you make any change to the texture\n   *\n   * The reason for this is is can be quite expensive to update mipmaps for a texture. So by default,\n   * We want you, the developer to specify when this action should happen.\n   *\n   * Generally you don't want to have mipmaps generated on Render targets that are changed every frame,\n   */\n  updateMipmaps() {\n    if (this.autoGenerateMipmaps && this.mipLevelCount > 1) {\n      this.emit(\"updateMipmaps\", this);\n    }\n  }\n  set wrapMode(value) {\n    this._style.wrapMode = value;\n  }\n  get wrapMode() {\n    return this._style.wrapMode;\n  }\n  set scaleMode(value) {\n    this._style.scaleMode = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this._style.scaleMode;\n  }\n  /**\n   * Refresh check for isPowerOfTwo texture based on size\n   * @private\n   */\n  _refreshPOT() {\n    this.isPowerOfTwo = isPow2(this.pixelWidth) && isPow2(this.pixelHeight);\n  }\n  static test(_resource) {\n    throw new Error(\"Unimplemented\");\n  }\n};\n/** The default options used when creating a new TextureSource. override these to add your own defaults */\n_TextureSource.defaultOptions = {\n  resolution: 1,\n  format: \"bgra8unorm\",\n  alphaMode: \"premultiply-alpha-on-upload\",\n  dimensions: \"2d\",\n  mipLevelCount: 1,\n  autoGenerateMipmaps: false,\n  sampleCount: 1,\n  antialias: false,\n  autoGarbageCollect: false\n};\nlet TextureSource = _TextureSource;\n\nexport { TextureSource };\n//# sourceMappingURL=TextureSource.mjs.map\n"],"names":["_TextureSource","EventEmitter","options","uid","TextureStyle","definedProps","value","_a","_b","resolution","resource","width","height","newPixelWidth","newPixelHeight","isPow2","_resource","TextureSource"],"mappings":"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","x_google_ignoreList":[0]}