{"version":3,"file":"index382.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/events/EventBoundary.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Point } from '../maths/point/Point.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\nimport { EventsTicker } from './EventTicker.mjs';\nimport { FederatedMouseEvent } from './FederatedMouseEvent.mjs';\nimport { FederatedPointerEvent } from './FederatedPointerEvent.mjs';\nimport { FederatedWheelEvent } from './FederatedWheelEvent.mjs';\n\n\"use strict\";\nconst PROPAGATION_LIMIT = 2048;\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\nclass EventBoundary {\n  /**\n   * @param rootTarget - The holder of the event boundary.\n   */\n  constructor(rootTarget) {\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    this.dispatch = new EventEmitter();\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all Containers.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    this.moveOnAll = false;\n    /** Enables the global move events. `globalpointermove`, `globaltouchmove`, and `globalmousemove` */\n    this.enableGlobalMoveEvents = true;\n    /**\n     * State object for mapping methods.\n     * @see EventBoundary#trackingData\n     */\n    this.mappingState = {\n      trackingData: {}\n    };\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see EventBoundary#allocateEvent\n     * @see EventBoundary#freeEvent\n     */\n    this.eventPool = /* @__PURE__ */ new Map();\n    /** Every interactive element gathered from the scene. Only used in `pointermove` */\n    this._allInteractiveElements = [];\n    /** Every element that passed the hit test. Only used in `pointermove` */\n    this._hitElements = [];\n    /** Whether or not to collect all the interactive elements from the scene. Enabled in `pointermove` */\n    this._isPointerMoveEvent = false;\n    this.rootTarget = rootTarget;\n    this.hitPruneFn = this.hitPruneFn.bind(this);\n    this.hitTestFn = this.hitTestFn.bind(this);\n    this.mapPointerDown = this.mapPointerDown.bind(this);\n    this.mapPointerMove = this.mapPointerMove.bind(this);\n    this.mapPointerOut = this.mapPointerOut.bind(this);\n    this.mapPointerOver = this.mapPointerOver.bind(this);\n    this.mapPointerUp = this.mapPointerUp.bind(this);\n    this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n    this.mapWheel = this.mapWheel.bind(this);\n    this.mappingTable = {};\n    this.addEventMapping(\"pointerdown\", this.mapPointerDown);\n    this.addEventMapping(\"pointermove\", this.mapPointerMove);\n    this.addEventMapping(\"pointerout\", this.mapPointerOut);\n    this.addEventMapping(\"pointerleave\", this.mapPointerOut);\n    this.addEventMapping(\"pointerover\", this.mapPointerOver);\n    this.addEventMapping(\"pointerup\", this.mapPointerUp);\n    this.addEventMapping(\"pointerupoutside\", this.mapPointerUpOutside);\n    this.addEventMapping(\"wheel\", this.mapWheel);\n  }\n  /**\n   * Adds an event mapping for the event `type` handled by `fn`.\n   *\n   * Event mappings can be used to implement additional or custom events. They take an event\n   * coming from the upstream scene (or directly from the {@link EventSystem}) and dispatch new downstream events\n   * generally trickling down and bubbling up to {@link EventBoundary.rootTarget this.rootTarget}.\n   *\n   * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n   * instead.\n   * @param type - The type of upstream event to map.\n   * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n   */\n  addEventMapping(type, fn) {\n    if (!this.mappingTable[type]) {\n      this.mappingTable[type] = [];\n    }\n    this.mappingTable[type].push({\n      fn,\n      priority: 0\n    });\n    this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n  }\n  /**\n   * Dispatches the given event\n   * @param e - The event to dispatch.\n   * @param type - The type of event to dispatch. Defaults to `e.type`.\n   */\n  dispatchEvent(e, type) {\n    e.propagationStopped = false;\n    e.propagationImmediatelyStopped = false;\n    this.propagate(e, type);\n    this.dispatch.emit(type || e.type, e);\n  }\n  /**\n   * Maps the given upstream event through the event boundary and propagates it downstream.\n   * @param e - The event to map.\n   */\n  mapEvent(e) {\n    if (!this.rootTarget) {\n      return;\n    }\n    const mappers = this.mappingTable[e.type];\n    if (mappers) {\n      for (let i = 0, j = mappers.length; i < j; i++) {\n        mappers[i].fn(e);\n      }\n    } else {\n      warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n    }\n  }\n  /**\n   * Finds the Container that is the target of a event at the given coordinates.\n   *\n   * The passed (x,y) coordinates are in the world space above this event boundary.\n   * @param x - The x coordinate of the event.\n   * @param y - The y coordinate of the event.\n   */\n  hitTest(x, y) {\n    EventsTicker.pauseUpdate = true;\n    const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n    const fn = useMove ? \"hitTestMoveRecursive\" : \"hitTestRecursive\";\n    const invertedPath = this[fn](\n      this.rootTarget,\n      this.rootTarget.eventMode,\n      tempHitLocation.set(x, y),\n      this.hitTestFn,\n      this.hitPruneFn\n    );\n    return invertedPath && invertedPath[0];\n  }\n  /**\n   * Propagate the passed event from from {@link EventBoundary.rootTarget this.rootTarget} to its\n   * target {@code e.target}.\n   * @param e - The event to propagate.\n   * @param type - The type of event to propagate. Defaults to `e.type`.\n   */\n  propagate(e, type) {\n    if (!e.target) {\n      return;\n    }\n    const composedPath = e.composedPath();\n    e.eventPhase = e.CAPTURING_PHASE;\n    for (let i = 0, j = composedPath.length - 1; i < j; i++) {\n      e.currentTarget = composedPath[i];\n      this.notifyTarget(e, type);\n      if (e.propagationStopped || e.propagationImmediatelyStopped)\n        return;\n    }\n    e.eventPhase = e.AT_TARGET;\n    e.currentTarget = e.target;\n    this.notifyTarget(e, type);\n    if (e.propagationStopped || e.propagationImmediatelyStopped)\n      return;\n    e.eventPhase = e.BUBBLING_PHASE;\n    for (let i = composedPath.length - 2; i >= 0; i--) {\n      e.currentTarget = composedPath[i];\n      this.notifyTarget(e, type);\n      if (e.propagationStopped || e.propagationImmediatelyStopped)\n        return;\n    }\n  }\n  /**\n   * Emits the event {@code e} to all interactive containers. The event is propagated in the bubbling phase always.\n   *\n   * This is used in the `globalpointermove` event.\n   * @param e - The emitted event.\n   * @param type - The listeners to notify.\n   * @param targets - The targets to notify.\n   */\n  all(e, type, targets = this._allInteractiveElements) {\n    if (targets.length === 0)\n      return;\n    e.eventPhase = e.BUBBLING_PHASE;\n    const events = Array.isArray(type) ? type : [type];\n    for (let i = targets.length - 1; i >= 0; i--) {\n      events.forEach((event) => {\n        e.currentTarget = targets[i];\n        this.notifyTarget(e, event);\n      });\n    }\n  }\n  /**\n   * Finds the propagation path from {@link EventBoundary.rootTarget rootTarget} to the passed\n   * {@code target}. The last element in the path is {@code target}.\n   * @param target - The target to find the propagation path to.\n   */\n  propagationPath(target) {\n    const propagationPath = [target];\n    for (let i = 0; i < PROPAGATION_LIMIT && (target !== this.rootTarget && target.parent); i++) {\n      if (!target.parent) {\n        throw new Error(\"Cannot find propagation path to disconnected target\");\n      }\n      propagationPath.push(target.parent);\n      target = target.parent;\n    }\n    propagationPath.reverse();\n    return propagationPath;\n  }\n  hitTestMoveRecursive(currentTarget, eventMode, location, testFn, pruneFn, ignore = false) {\n    let shouldReturn = false;\n    if (this._interactivePrune(currentTarget))\n      return null;\n    if (currentTarget.eventMode === \"dynamic\" || eventMode === \"dynamic\") {\n      EventsTicker.pauseUpdate = false;\n    }\n    if (currentTarget.interactiveChildren && currentTarget.children) {\n      const children = currentTarget.children;\n      for (let i = children.length - 1; i >= 0; i--) {\n        const child = children[i];\n        const nestedHit = this.hitTestMoveRecursive(\n          child,\n          this._isInteractive(eventMode) ? eventMode : child.eventMode,\n          location,\n          testFn,\n          pruneFn,\n          ignore || pruneFn(currentTarget, location)\n        );\n        if (nestedHit) {\n          if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent) {\n            continue;\n          }\n          const isInteractive = currentTarget.isInteractive();\n          if (nestedHit.length > 0 || isInteractive) {\n            if (isInteractive)\n              this._allInteractiveElements.push(currentTarget);\n            nestedHit.push(currentTarget);\n          }\n          if (this._hitElements.length === 0)\n            this._hitElements = nestedHit;\n          shouldReturn = true;\n        }\n      }\n    }\n    const isInteractiveMode = this._isInteractive(eventMode);\n    const isInteractiveTarget = currentTarget.isInteractive();\n    if (isInteractiveTarget && isInteractiveTarget)\n      this._allInteractiveElements.push(currentTarget);\n    if (ignore || this._hitElements.length > 0)\n      return null;\n    if (shouldReturn)\n      return this._hitElements;\n    if (isInteractiveMode && (!pruneFn(currentTarget, location) && testFn(currentTarget, location))) {\n      return isInteractiveTarget ? [currentTarget] : [];\n    }\n    return null;\n  }\n  /**\n   * Recursive implementation for {@link EventBoundary.hitTest hitTest}.\n   * @param currentTarget - The Container that is to be hit tested.\n   * @param eventMode - The event mode for the `currentTarget` or one of its parents.\n   * @param location - The location that is being tested for overlap.\n   * @param testFn - Callback that determines whether the target passes hit testing. This callback\n   *  can assume that `pruneFn` failed to prune the container.\n   * @param pruneFn - Callback that determiness whether the target and all of its children\n   *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n   *  of the scene graph.\n   * @returns An array holding the hit testing target and all its ancestors in order. The first element\n   *  is the target itself and the last is {@link EventBoundary.rootTarget rootTarget}. This is the opposite\n   *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n   */\n  hitTestRecursive(currentTarget, eventMode, location, testFn, pruneFn) {\n    if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location)) {\n      return null;\n    }\n    if (currentTarget.eventMode === \"dynamic\" || eventMode === \"dynamic\") {\n      EventsTicker.pauseUpdate = false;\n    }\n    if (currentTarget.interactiveChildren && currentTarget.children) {\n      const children = currentTarget.children;\n      const relativeLocation = location;\n      for (let i = children.length - 1; i >= 0; i--) {\n        const child = children[i];\n        const nestedHit = this.hitTestRecursive(\n          child,\n          this._isInteractive(eventMode) ? eventMode : child.eventMode,\n          relativeLocation,\n          testFn,\n          pruneFn\n        );\n        if (nestedHit) {\n          if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent) {\n            continue;\n          }\n          const isInteractive = currentTarget.isInteractive();\n          if (nestedHit.length > 0 || isInteractive)\n            nestedHit.push(currentTarget);\n          return nestedHit;\n        }\n      }\n    }\n    const isInteractiveMode = this._isInteractive(eventMode);\n    const isInteractiveTarget = currentTarget.isInteractive();\n    if (isInteractiveMode && testFn(currentTarget, location)) {\n      return isInteractiveTarget ? [currentTarget] : [];\n    }\n    return null;\n  }\n  _isInteractive(int) {\n    return int === \"static\" || int === \"dynamic\";\n  }\n  _interactivePrune(container) {\n    if (!container || !container.visible || !container.renderable || !container.measurable) {\n      return true;\n    }\n    if (container.eventMode === \"none\") {\n      return true;\n    }\n    if (container.eventMode === \"passive\" && !container.interactiveChildren) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Checks whether the container or any of its children cannot pass the hit test at all.\n   *\n   * {@link EventBoundary}'s implementation uses the {@link Container.hitArea hitArea}\n   * and {@link Container._maskEffect} for pruning.\n   * @param container - The container to prune.\n   * @param location - The location to test for overlap.\n   */\n  hitPruneFn(container, location) {\n    if (container.hitArea) {\n      container.worldTransform.applyInverse(location, tempLocalMapping);\n      if (!container.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y)) {\n        return true;\n      }\n    }\n    if (container.effects && container.effects.length) {\n      for (let i = 0; i < container.effects.length; i++) {\n        const effect = container.effects[i];\n        if (effect.containsPoint) {\n          const effectContainsPoint = effect.containsPoint(location, this.hitTestFn);\n          if (!effectContainsPoint) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the container passes hit testing for the given location.\n   * @param container - The container to test.\n   * @param location - The location to test for overlap.\n   * @returns - Whether `container` passes hit testing for `location`.\n   */\n  hitTestFn(container, location) {\n    if (container.hitArea) {\n      return true;\n    }\n    if (container?.containsPoint) {\n      container.worldTransform.applyInverse(location, tempLocalMapping);\n      return container.containsPoint(tempLocalMapping);\n    }\n    return false;\n  }\n  /**\n   * Notify all the listeners to the event's `currentTarget`.\n   *\n   * If the `currentTarget` contains the property `on<type>`, then it is called here,\n   * simulating the behavior from version 6.x and prior.\n   * @param e - The event passed to the target.\n   * @param type - The type of event to notify. Defaults to `e.type`.\n   */\n  notifyTarget(e, type) {\n    if (!e.currentTarget.isInteractive()) {\n      return;\n    }\n    type ?? (type = e.type);\n    const handlerKey = `on${type}`;\n    e.currentTarget[handlerKey]?.(e);\n    const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n    this._notifyListeners(e, key);\n    if (e.eventPhase === e.AT_TARGET) {\n      this._notifyListeners(e, type);\n    }\n  }\n  /**\n   * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n   *\n   * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n   * @param from - The upstream `pointerdown` event.\n   */\n  mapPointerDown(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const e = this.createPointerEvent(from);\n    this.dispatchEvent(e, \"pointerdown\");\n    if (e.pointerType === \"touch\") {\n      this.dispatchEvent(e, \"touchstart\");\n    } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n      const isRightButton = e.button === 2;\n      this.dispatchEvent(e, isRightButton ? \"rightdown\" : \"mousedown\");\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    trackingData.pressTargetsByButton[from.button] = e.composedPath();\n    this.freeEvent(e);\n  }\n  /**\n   * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n   *\n   * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n   * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n   * @param from - The upstream `pointermove` event.\n   */\n  mapPointerMove(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    this._allInteractiveElements.length = 0;\n    this._hitElements.length = 0;\n    this._isPointerMoveEvent = true;\n    const e = this.createPointerEvent(from);\n    this._isPointerMoveEvent = false;\n    const isMouse = e.pointerType === \"mouse\" || e.pointerType === \"pen\";\n    const trackingData = this.trackingData(from.pointerId);\n    const outTarget = this.findMountedTarget(trackingData.overTargets);\n    if (trackingData.overTargets?.length > 0 && outTarget !== e.target) {\n      const outType = from.type === \"mousemove\" ? \"mouseout\" : \"pointerout\";\n      const outEvent = this.createPointerEvent(from, outType, outTarget);\n      this.dispatchEvent(outEvent, \"pointerout\");\n      if (isMouse)\n        this.dispatchEvent(outEvent, \"mouseout\");\n      if (!e.composedPath().includes(outTarget)) {\n        const leaveEvent = this.createPointerEvent(from, \"pointerleave\", outTarget);\n        leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n        while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target)) {\n          leaveEvent.currentTarget = leaveEvent.target;\n          this.notifyTarget(leaveEvent);\n          if (isMouse)\n            this.notifyTarget(leaveEvent, \"mouseleave\");\n          leaveEvent.target = leaveEvent.target.parent;\n        }\n        this.freeEvent(leaveEvent);\n      }\n      this.freeEvent(outEvent);\n    }\n    if (outTarget !== e.target) {\n      const overType = from.type === \"mousemove\" ? \"mouseover\" : \"pointerover\";\n      const overEvent = this.clonePointerEvent(e, overType);\n      this.dispatchEvent(overEvent, \"pointerover\");\n      if (isMouse)\n        this.dispatchEvent(overEvent, \"mouseover\");\n      let overTargetAncestor = outTarget?.parent;\n      while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent) {\n        if (overTargetAncestor === e.target)\n          break;\n        overTargetAncestor = overTargetAncestor.parent;\n      }\n      const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n      if (didPointerEnter) {\n        const enterEvent = this.clonePointerEvent(e, \"pointerenter\");\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n        while (enterEvent.target && enterEvent.target !== outTarget && enterEvent.target !== this.rootTarget.parent) {\n          enterEvent.currentTarget = enterEvent.target;\n          this.notifyTarget(enterEvent);\n          if (isMouse)\n            this.notifyTarget(enterEvent, \"mouseenter\");\n          enterEvent.target = enterEvent.target.parent;\n        }\n        this.freeEvent(enterEvent);\n      }\n      this.freeEvent(overEvent);\n    }\n    const allMethods = [];\n    const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n    this.moveOnAll ? allMethods.push(\"pointermove\") : this.dispatchEvent(e, \"pointermove\");\n    allowGlobalPointerEvents && allMethods.push(\"globalpointermove\");\n    if (e.pointerType === \"touch\") {\n      this.moveOnAll ? allMethods.splice(1, 0, \"touchmove\") : this.dispatchEvent(e, \"touchmove\");\n      allowGlobalPointerEvents && allMethods.push(\"globaltouchmove\");\n    }\n    if (isMouse) {\n      this.moveOnAll ? allMethods.splice(1, 0, \"mousemove\") : this.dispatchEvent(e, \"mousemove\");\n      allowGlobalPointerEvents && allMethods.push(\"globalmousemove\");\n      this.cursor = e.target?.cursor;\n    }\n    if (allMethods.length > 0) {\n      this.all(e, allMethods);\n    }\n    this._allInteractiveElements.length = 0;\n    this._hitElements.length = 0;\n    trackingData.overTargets = e.composedPath();\n    this.freeEvent(e);\n  }\n  /**\n   * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n   *\n   * The tracking data for the specific pointer gets a new `overTarget`.\n   * @param from - The upstream `pointerover` event.\n   */\n  mapPointerOver(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    const e = this.createPointerEvent(from);\n    const isMouse = e.pointerType === \"mouse\" || e.pointerType === \"pen\";\n    this.dispatchEvent(e, \"pointerover\");\n    if (isMouse)\n      this.dispatchEvent(e, \"mouseover\");\n    if (e.pointerType === \"mouse\")\n      this.cursor = e.target?.cursor;\n    const enterEvent = this.clonePointerEvent(e, \"pointerenter\");\n    enterEvent.eventPhase = enterEvent.AT_TARGET;\n    while (enterEvent.target && enterEvent.target !== this.rootTarget.parent) {\n      enterEvent.currentTarget = enterEvent.target;\n      this.notifyTarget(enterEvent);\n      if (isMouse)\n        this.notifyTarget(enterEvent, \"mouseenter\");\n      enterEvent.target = enterEvent.target.parent;\n    }\n    trackingData.overTargets = e.composedPath();\n    this.freeEvent(e);\n    this.freeEvent(enterEvent);\n  }\n  /**\n   * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n   *\n   * The tracking data for the specific pointer is cleared of a `overTarget`.\n   * @param from - The upstream `pointerout` event.\n   */\n  mapPointerOut(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    if (trackingData.overTargets) {\n      const isMouse = from.pointerType === \"mouse\" || from.pointerType === \"pen\";\n      const outTarget = this.findMountedTarget(trackingData.overTargets);\n      const outEvent = this.createPointerEvent(from, \"pointerout\", outTarget);\n      this.dispatchEvent(outEvent);\n      if (isMouse)\n        this.dispatchEvent(outEvent, \"mouseout\");\n      const leaveEvent = this.createPointerEvent(from, \"pointerleave\", outTarget);\n      leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n      while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent) {\n        leaveEvent.currentTarget = leaveEvent.target;\n        this.notifyTarget(leaveEvent);\n        if (isMouse)\n          this.notifyTarget(leaveEvent, \"mouseleave\");\n        leaveEvent.target = leaveEvent.target.parent;\n      }\n      trackingData.overTargets = null;\n      this.freeEvent(outEvent);\n      this.freeEvent(leaveEvent);\n    }\n    this.cursor = null;\n  }\n  /**\n   * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n   * and `click`/`rightclick`/`pointertap` events, in that order.\n   *\n   * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n   * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n   * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n   * specific pointer types.\n   * @param from - The upstream `pointerup` event.\n   */\n  mapPointerUp(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const now = performance.now();\n    const e = this.createPointerEvent(from);\n    this.dispatchEvent(e, \"pointerup\");\n    if (e.pointerType === \"touch\") {\n      this.dispatchEvent(e, \"touchend\");\n    } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n      const isRightButton = e.button === 2;\n      this.dispatchEvent(e, isRightButton ? \"rightup\" : \"mouseup\");\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n    let clickTarget = pressTarget;\n    if (pressTarget && !e.composedPath().includes(pressTarget)) {\n      let currentTarget = pressTarget;\n      while (currentTarget && !e.composedPath().includes(currentTarget)) {\n        e.currentTarget = currentTarget;\n        this.notifyTarget(e, \"pointerupoutside\");\n        if (e.pointerType === \"touch\") {\n          this.notifyTarget(e, \"touchendoutside\");\n        } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n          const isRightButton = e.button === 2;\n          this.notifyTarget(e, isRightButton ? \"rightupoutside\" : \"mouseupoutside\");\n        }\n        currentTarget = currentTarget.parent;\n      }\n      delete trackingData.pressTargetsByButton[from.button];\n      clickTarget = currentTarget;\n    }\n    if (clickTarget) {\n      const clickEvent = this.clonePointerEvent(e, \"click\");\n      clickEvent.target = clickTarget;\n      clickEvent.path = null;\n      if (!trackingData.clicksByButton[from.button]) {\n        trackingData.clicksByButton[from.button] = {\n          clickCount: 0,\n          target: clickEvent.target,\n          timeStamp: now\n        };\n      }\n      const clickHistory = trackingData.clicksByButton[from.button];\n      if (clickHistory.target === clickEvent.target && now - clickHistory.timeStamp < 200) {\n        ++clickHistory.clickCount;\n      } else {\n        clickHistory.clickCount = 1;\n      }\n      clickHistory.target = clickEvent.target;\n      clickHistory.timeStamp = now;\n      clickEvent.detail = clickHistory.clickCount;\n      if (clickEvent.pointerType === \"mouse\") {\n        const isRightButton = clickEvent.button === 2;\n        this.dispatchEvent(clickEvent, isRightButton ? \"rightclick\" : \"click\");\n      } else if (clickEvent.pointerType === \"touch\") {\n        this.dispatchEvent(clickEvent, \"tap\");\n      }\n      this.dispatchEvent(clickEvent, \"pointertap\");\n      this.freeEvent(clickEvent);\n    }\n    this.freeEvent(e);\n  }\n  /**\n   * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n   * `pointerdown` target to `rootTarget`.\n   *\n   * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the\n   * `{@link EventBoundary}'s root because the `pointerup` event occurred outside of the boundary.)\n   *\n   * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n   * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n   * @param from - The upstream `pointerupoutside` event.\n   */\n  mapPointerUpOutside(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n    const e = this.createPointerEvent(from);\n    if (pressTarget) {\n      let currentTarget = pressTarget;\n      while (currentTarget) {\n        e.currentTarget = currentTarget;\n        this.notifyTarget(e, \"pointerupoutside\");\n        if (e.pointerType === \"touch\") {\n          this.notifyTarget(e, \"touchendoutside\");\n        } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n          this.notifyTarget(e, e.button === 2 ? \"rightupoutside\" : \"mouseupoutside\");\n        }\n        currentTarget = currentTarget.parent;\n      }\n      delete trackingData.pressTargetsByButton[from.button];\n    }\n    this.freeEvent(e);\n  }\n  /**\n   * Maps the upstream `wheel` event to a downstream `wheel` event.\n   * @param from - The upstream `wheel` event.\n   */\n  mapWheel(from) {\n    if (!(from instanceof FederatedWheelEvent)) {\n      warn(\"EventBoundary cannot map a non-wheel event as a wheel event\");\n      return;\n    }\n    const wheelEvent = this.createWheelEvent(from);\n    this.dispatchEvent(wheelEvent);\n    this.freeEvent(wheelEvent);\n  }\n  /**\n   * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n   *\n   * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n   * or `pointerover` target was unmounted from the scene graph.\n   * @param propagationPath - The propagation path was valid in the past.\n   * @returns - The most specific event-target still mounted at the same location in the scene graph.\n   */\n  findMountedTarget(propagationPath) {\n    if (!propagationPath) {\n      return null;\n    }\n    let currentTarget = propagationPath[0];\n    for (let i = 1; i < propagationPath.length; i++) {\n      if (propagationPath[i].parent === currentTarget) {\n        currentTarget = propagationPath[i];\n      } else {\n        break;\n      }\n    }\n    return currentTarget;\n  }\n  /**\n   * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n   *\n   * The event is allocated using {@link EventBoundary#allocateEvent this.allocateEvent}.\n   * @param from - The {@code originalEvent} for the returned event.\n   * @param [type=from.type] - The type of the returned event.\n   * @param target - The target of the returned event.\n   */\n  createPointerEvent(from, type, target) {\n    const event = this.allocateEvent(FederatedPointerEvent);\n    this.copyPointerData(from, event);\n    this.copyMouseData(from, event);\n    this.copyData(from, event);\n    event.nativeEvent = from.nativeEvent;\n    event.originalEvent = from;\n    event.target = target ?? this.hitTest(event.global.x, event.global.y) ?? this._hitElements[0];\n    if (typeof type === \"string\") {\n      event.type = type;\n    }\n    return event;\n  }\n  /**\n   * Creates a wheel event whose {@code originalEvent} is {@code from}.\n   *\n   * The event is allocated using {@link EventBoundary#allocateEvent this.allocateEvent}.\n   * @param from - The upstream wheel event.\n   */\n  createWheelEvent(from) {\n    const event = this.allocateEvent(FederatedWheelEvent);\n    this.copyWheelData(from, event);\n    this.copyMouseData(from, event);\n    this.copyData(from, event);\n    event.nativeEvent = from.nativeEvent;\n    event.originalEvent = from;\n    event.target = this.hitTest(event.global.x, event.global.y);\n    return event;\n  }\n  /**\n   * Clones the event {@code from}, with an optional {@code type} override.\n   *\n   * The event is allocated using {@link EventBoundary#allocateEvent this.allocateEvent}.\n   * @param from - The event to clone.\n   * @param [type=from.type] - The type of the returned event.\n   */\n  clonePointerEvent(from, type) {\n    const event = this.allocateEvent(FederatedPointerEvent);\n    event.nativeEvent = from.nativeEvent;\n    event.originalEvent = from.originalEvent;\n    this.copyPointerData(from, event);\n    this.copyMouseData(from, event);\n    this.copyData(from, event);\n    event.target = from.target;\n    event.path = from.composedPath().slice();\n    event.type = type ?? event.type;\n    return event;\n  }\n  /**\n   * Copies wheel {@link FederatedWheelEvent} data from {@code from} into {@code to}.\n   *\n   * The following properties are copied:\n   * + deltaMode\n   * + deltaX\n   * + deltaY\n   * + deltaZ\n   * @param from - The event to copy data from.\n   * @param to - The event to copy data into.\n   */\n  copyWheelData(from, to) {\n    to.deltaMode = from.deltaMode;\n    to.deltaX = from.deltaX;\n    to.deltaY = from.deltaY;\n    to.deltaZ = from.deltaZ;\n  }\n  /**\n   * Copies pointer {@link FederatedPointerEvent} data from {@code from} into {@code to}.\n   *\n   * The following properties are copied:\n   * + pointerId\n   * + width\n   * + height\n   * + isPrimary\n   * + pointerType\n   * + pressure\n   * + tangentialPressure\n   * + tiltX\n   * + tiltY\n   * @param from - The event to copy data from.\n   * @param to - The event to copy data into.\n   */\n  copyPointerData(from, to) {\n    if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent))\n      return;\n    to.pointerId = from.pointerId;\n    to.width = from.width;\n    to.height = from.height;\n    to.isPrimary = from.isPrimary;\n    to.pointerType = from.pointerType;\n    to.pressure = from.pressure;\n    to.tangentialPressure = from.tangentialPressure;\n    to.tiltX = from.tiltX;\n    to.tiltY = from.tiltY;\n    to.twist = from.twist;\n  }\n  /**\n   * Copies mouse {@link FederatedMouseEvent} data from {@code from} to {@code to}.\n   *\n   * The following properties are copied:\n   * + altKey\n   * + button\n   * + buttons\n   * + clientX\n   * + clientY\n   * + metaKey\n   * + movementX\n   * + movementY\n   * + pageX\n   * + pageY\n   * + x\n   * + y\n   * + screen\n   * + shiftKey\n   * + global\n   * @param from - The event to copy data from.\n   * @param to - The event to copy data into.\n   */\n  copyMouseData(from, to) {\n    if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent))\n      return;\n    to.altKey = from.altKey;\n    to.button = from.button;\n    to.buttons = from.buttons;\n    to.client.copyFrom(from.client);\n    to.ctrlKey = from.ctrlKey;\n    to.metaKey = from.metaKey;\n    to.movement.copyFrom(from.movement);\n    to.screen.copyFrom(from.screen);\n    to.shiftKey = from.shiftKey;\n    to.global.copyFrom(from.global);\n  }\n  /**\n   * Copies base {@link FederatedEvent} data from {@code from} into {@code to}.\n   *\n   * The following properties are copied:\n   * + isTrusted\n   * + srcElement\n   * + timeStamp\n   * + type\n   * @param from - The event to copy data from.\n   * @param to - The event to copy data into.\n   */\n  copyData(from, to) {\n    to.isTrusted = from.isTrusted;\n    to.srcElement = from.srcElement;\n    to.timeStamp = performance.now();\n    to.type = from.type;\n    to.detail = from.detail;\n    to.view = from.view;\n    to.which = from.which;\n    to.layer.copyFrom(from.layer);\n    to.page.copyFrom(from.page);\n  }\n  /**\n   * @param id - The pointer ID.\n   * @returns The tracking data stored for the given pointer. If no data exists, a blank\n   *  state will be created.\n   */\n  trackingData(id) {\n    if (!this.mappingState.trackingData[id]) {\n      this.mappingState.trackingData[id] = {\n        pressTargetsByButton: {},\n        clicksByButton: {},\n        overTarget: null\n      };\n    }\n    return this.mappingState.trackingData[id];\n  }\n  /**\n   * Allocate a specific type of event from {@link EventBoundary#eventPool this.eventPool}.\n   *\n   * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n   * boundary.\n   * @param constructor - The event's constructor.\n   */\n  allocateEvent(constructor) {\n    if (!this.eventPool.has(constructor)) {\n      this.eventPool.set(constructor, []);\n    }\n    const event = this.eventPool.get(constructor).pop() || new constructor(this);\n    event.eventPhase = event.NONE;\n    event.currentTarget = null;\n    event.defaultPrevented = false;\n    event.path = null;\n    event.target = null;\n    return event;\n  }\n  /**\n   * Frees the event and puts it back into the event pool.\n   *\n   * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n   *\n   * It is also advised that events not allocated from {@link EventBoundary#allocateEvent this.allocateEvent}\n   * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n   * it to be allocated twice & result in overwriting.\n   * @param event - The event to be freed.\n   * @throws Error if the event is managed by another event boundary.\n   */\n  freeEvent(event) {\n    if (event.manager !== this)\n      throw new Error(\"It is illegal to free an event not managed by this EventBoundary!\");\n    const constructor = event.constructor;\n    if (!this.eventPool.has(constructor)) {\n      this.eventPool.set(constructor, []);\n    }\n    this.eventPool.get(constructor).push(event);\n  }\n  /**\n   * Similar to {@link EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n   * is set on the event.\n   * @param e - The event to call each listener with.\n   * @param type - The event key.\n   */\n  _notifyListeners(e, type) {\n    const listeners = e.currentTarget._events[type];\n    if (!listeners)\n      return;\n    if (\"fn\" in listeners) {\n      if (listeners.once)\n        e.currentTarget.removeListener(type, listeners.fn, void 0, true);\n      listeners.fn.call(listeners.context, e);\n    } else {\n      for (let i = 0, j = listeners.length; i < j && !e.propagationImmediatelyStopped; i++) {\n        if (listeners[i].once)\n          e.currentTarget.removeListener(type, listeners[i].fn, void 0, true);\n        listeners[i].fn.call(listeners[i].context, e);\n      }\n    }\n  }\n}\n\nexport { EventBoundary };\n//# sourceMappingURL=EventBoundary.mjs.map\n"],"names":["PROPAGATION_LIMIT","tempHitLocation","Point","tempLocalMapping","EventBoundary","rootTarget","EventEmitter","type","fn","a","b","e","mappers","j","warn","x","y","EventsTicker","invertedPath","composedPath","i","targets","events","event","target","propagationPath","currentTarget","eventMode","location","testFn","pruneFn","ignore","shouldReturn","children","child","nestedHit","isInteractive","isInteractiveMode","isInteractiveTarget","relativeLocation","int","container","effect","handlerKey","_b","_a","key","from","FederatedPointerEvent","isRightButton","trackingData","isMouse","outTarget","outType","outEvent","leaveEvent","overType","overEvent","overTargetAncestor","enterEvent","allMethods","allowGlobalPointerEvents","now","pressTarget","clickTarget","clickEvent","clickHistory","FederatedWheelEvent","wheelEvent","to","FederatedMouseEvent","id","constructor","listeners"],"mappings":"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","x_google_ignoreList":[0]}