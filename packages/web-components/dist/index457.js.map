{"version":3,"file":"index457.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs"],"sourcesContent":["import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: \"float32\",\n  \"vec2<f32>\": \"float32x2\",\n  \"vec3<f32>\": \"float32x3\",\n  \"vec4<f32>\": \"float32x4\",\n  vec2f: \"float32x2\",\n  vec3f: \"float32x3\",\n  vec4f: \"float32x4\",\n  i32: \"sint32\",\n  \"vec2<i32>\": \"sint32x2\",\n  \"vec3<i32>\": \"sint32x3\",\n  \"vec4<i32>\": \"sint32x4\",\n  u32: \"uint32\",\n  \"vec2<u32>\": \"uint32x2\",\n  \"vec3<u32>\": \"uint32x3\",\n  \"vec4<u32>\": \"uint32x4\",\n  bool: \"uint32\",\n  \"vec2<bool>\": \"uint32x2\",\n  \"vec3<bool>\": \"uint32x3\",\n  \"vec4<bool>\": \"uint32x4\"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf(\"->\", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? \"float32\";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: getAttributeInfoFromFormat(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\nexport { extractAttributesFromGpuProgram };\n//# sourceMappingURL=extractAttributesFromGpuProgram.mjs.map\n"],"names":["WGSL_TO_VERTEX_TYPES","extractAttributesFromGpuProgram","source","entryPoint","results","mainVertStart","arrowFunctionStart","functionArgsSubstring","inputsRegex","match","format","getAttributeInfoFromFormat"],"mappings":";AAGA,MAAMA,IAAuB;AAAA,EAC3B,KAAK;AAAA,EACL,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,KAAK;AAAA,EACL,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,KAAK;AAAA,EACL,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,MAAM;AAAA,EACN,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAChB;AACA,SAASC,EAAgC,EAAE,QAAAC,GAAQ,YAAAC,KAAc;AAC/D,QAAMC,IAAU,CAAA,GACVC,IAAgBH,EAAO,QAAQ,MAAMC,CAAU,EAAE;AACvD,MAAIE,MAAkB,IAAI;AACxB,UAAMC,IAAqBJ,EAAO,QAAQ,MAAMG,CAAa;AAC7D,QAAIC,MAAuB,IAAI;AAC7B,YAAMC,IAAwBL,EAAO,UAAUG,GAAeC,CAAkB,GAC1EE,IAAc;AACpB,UAAIC;AACJ,cAAQA,IAAQD,EAAY,KAAKD,CAAqB,OAAO,QAAM;AACjE,cAAMG,IAASV,EAAqBS,EAAM,CAAC,CAAC,KAAK;AACjD,QAAAL,EAAQK,EAAM,CAAC,CAAC,IAAI;AAAA,UAClB,UAAU,SAASA,EAAM,CAAC,GAAG,EAAE;AAAA,UAC/B,QAAAC;AAAA,UACA,QAAQC,EAA2BD,CAAM,EAAE;AAAA,UAC3C,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,OAAO;AAAA,QACjB;AAAA,MACO;AAAA,IACF;AAAA,EACF;AACD,SAAON;AACT;","x_google_ignoreList":[0]}