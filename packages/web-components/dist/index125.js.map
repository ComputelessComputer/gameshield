{"version":3,"file":"index125.js","sources":["../../../node_modules/.pnpm/@pixi+text-bitmap@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3_@pixi+dis_e8d16dc3b3f9170908692deae8697d60/node_modules/@pixi/text-bitmap/lib/BitmapText.mjs"],"sourcesContent":["import { Color, ObservablePoint, settings, Point, Texture, utils, BLEND_MODES, Program } from \"@pixi/core\";\nimport { Container } from \"@pixi/display\";\nimport { MeshGeometry, MeshMaterial, Mesh } from \"@pixi/mesh\";\nimport { BitmapFont } from \"./BitmapFont.mjs\";\nimport msdfFrag from \"./shader/msdf.frag.mjs\";\nimport msdfVert from \"./shader/msdf.vert.mjs\";\nimport \"./utils/index.mjs\";\nimport { splitTextToCharacters } from \"./utils/splitTextToCharacters.mjs\";\nimport { extractCharCode } from \"./utils/extractCharCode.mjs\";\nconst pageMeshDataDefaultPageMeshData = [], pageMeshDataMSDFPageMeshData = [], charRenderDataPool = [], _BitmapText = class _BitmapText2 extends Container {\n  /**\n   * @param text - A string that you would like the text to display.\n   * @param style - The style parameters.\n   * @param {string} style.fontName - The installed BitmapFont name.\n   * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n   *.     this will default to the BitmapFont size.\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n   *      does not affect single line text.\n   * @param {PIXI.ColorSource} [style.tint=0xFFFFFF] - The tint color.\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n   * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n   */\n  constructor(text, style = {}) {\n    super();\n    const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n      {},\n      _BitmapText2.styleDefaults,\n      style\n    );\n    if (!BitmapFont.available[fontName])\n      throw new Error(`Missing BitmapFont \"${fontName}\"`);\n    this._activePagesMeshData = [], this._textWidth = 0, this._textHeight = 0, this._align = align, this._tintColor = new Color(tint), this._font = void 0, this._fontName = fontName, this._fontSize = fontSize, this.text = text, this._maxWidth = maxWidth, this._maxLineHeight = 0, this._letterSpacing = letterSpacing, this._anchor = new ObservablePoint(() => {\n      this.dirty = !0;\n    }, this, 0, 0), this._roundPixels = settings.ROUND_PIXELS, this.dirty = !0, this._resolution = settings.RESOLUTION, this._autoResolution = !0, this._textureCache = {};\n  }\n  /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n  updateText() {\n    const data = BitmapFont.available[this._fontName], fontSize = this.fontSize, scale = fontSize / data.size, pos = new Point(), chars = [], lineWidths = [], lineSpaces = [], text = this._text.replace(/(?:\\r\\n|\\r)/g, `\n`) || \" \", charsInput = splitTextToCharacters(text), maxWidth = this._maxWidth * data.size / fontSize, pageMeshDataPool = data.distanceFieldType === \"none\" ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    let prevCharCode = null, lastLineWidth = 0, maxLineWidth = 0, line = 0, lastBreakPos = -1, lastBreakWidth = 0, spacesRemoved = 0, maxLineHeight = 0, spaceCount = 0;\n    for (let i = 0; i < charsInput.length; i++) {\n      const char = charsInput[i], charCode = extractCharCode(char);\n      if (/(?:\\s)/.test(char) && (lastBreakPos = i, lastBreakWidth = lastLineWidth, spaceCount++), char === \"\\r\" || char === `\n`) {\n        lineWidths.push(lastLineWidth), lineSpaces.push(-1), maxLineWidth = Math.max(maxLineWidth, lastLineWidth), ++line, ++spacesRemoved, pos.x = 0, pos.y += data.lineHeight, prevCharCode = null, spaceCount = 0;\n        continue;\n      }\n      const charData = data.chars[charCode];\n      if (!charData)\n        continue;\n      prevCharCode && charData.kerning[prevCharCode] && (pos.x += charData.kerning[prevCharCode]);\n      const charRenderData = charRenderDataPool.pop() || {\n        texture: Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        prevSpaces: 0,\n        position: new Point()\n      };\n      charRenderData.texture = charData.texture, charRenderData.line = line, charRenderData.charCode = charCode, charRenderData.position.x = Math.round(pos.x + charData.xOffset + this._letterSpacing / 2), charRenderData.position.y = Math.round(pos.y + charData.yOffset), charRenderData.prevSpaces = spaceCount, chars.push(charRenderData), lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width), pos.x += charData.xAdvance + this._letterSpacing, maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height), prevCharCode = charCode, lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth && (++spacesRemoved, utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos), i = lastBreakPos, lastBreakPos = -1, lineWidths.push(lastBreakWidth), lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0), maxLineWidth = Math.max(maxLineWidth, lastBreakWidth), line++, pos.x = 0, pos.y += data.lineHeight, prevCharCode = null, spaceCount = 0);\n    }\n    const lastChar = charsInput[charsInput.length - 1];\n    lastChar !== \"\\r\" && lastChar !== `\n` && (/(?:\\s)/.test(lastChar) && (lastLineWidth = lastBreakWidth), lineWidths.push(lastLineWidth), maxLineWidth = Math.max(maxLineWidth, lastLineWidth), lineSpaces.push(-1));\n    const lineAlignOffsets = [];\n    for (let i = 0; i <= line; i++) {\n      let alignOffset = 0;\n      this._align === \"right\" ? alignOffset = maxLineWidth - lineWidths[i] : this._align === \"center\" ? alignOffset = (maxLineWidth - lineWidths[i]) / 2 : this._align === \"justify\" && (alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i]), lineAlignOffsets.push(alignOffset);\n    }\n    const lenChars = chars.length, pagesMeshData = {}, newPagesMeshData = [], activePagesMeshData = this._activePagesMeshData;\n    pageMeshDataPool.push(...activePagesMeshData);\n    for (let i = 0; i < lenChars; i++) {\n      const texture = chars[i].texture, baseTextureUid = texture.baseTexture.uid;\n      if (!pagesMeshData[baseTextureUid]) {\n        let pageMeshData = pageMeshDataPool.pop();\n        if (!pageMeshData) {\n          const geometry = new MeshGeometry();\n          let material, meshBlendMode;\n          data.distanceFieldType === \"none\" ? (material = new MeshMaterial(Texture.EMPTY), meshBlendMode = BLEND_MODES.NORMAL) : (material = new MeshMaterial(\n            Texture.EMPTY,\n            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } }\n          ), meshBlendMode = BLEND_MODES.NORMAL_NPM);\n          const mesh = new Mesh(geometry, material);\n          mesh.blendMode = meshBlendMode, pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        }\n        pageMeshData.index = 0, pageMeshData.indexCount = 0, pageMeshData.vertexCount = 0, pageMeshData.uvsCount = 0, pageMeshData.total = 0;\n        const { _textureCache } = this;\n        _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture), pageMeshData.mesh.texture = _textureCache[baseTextureUid], pageMeshData.mesh.tint = this._tintColor.value, newPagesMeshData.push(pageMeshData), pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n      pagesMeshData[baseTextureUid].total++;\n    }\n    for (let i = 0; i < activePagesMeshData.length; i++)\n      newPagesMeshData.includes(activePagesMeshData[i]) || this.removeChild(activePagesMeshData[i].mesh);\n    for (let i = 0; i < newPagesMeshData.length; i++)\n      newPagesMeshData[i].mesh.parent !== this && this.addChild(newPagesMeshData[i].mesh);\n    this._activePagesMeshData = newPagesMeshData;\n    for (const i in pagesMeshData) {\n      const pageMeshData = pagesMeshData[i], total = pageMeshData.total;\n      if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n        pageMeshData.vertices = new Float32Array(4 * 2 * total), pageMeshData.uvs = new Float32Array(4 * 2 * total), pageMeshData.indices = new Uint16Array(6 * total);\n      else {\n        const total2 = pageMeshData.total, vertices = pageMeshData.vertices;\n        for (let i2 = total2 * 4 * 2; i2 < vertices.length; i2++)\n          vertices[i2] = 0;\n      }\n      pageMeshData.mesh.size = 6 * total;\n    }\n    for (let i = 0; i < lenChars; i++) {\n      const char = chars[i];\n      let offset = char.position.x + lineAlignOffsets[char.line] * (this._align === \"justify\" ? char.prevSpaces : 1);\n      this._roundPixels && (offset = Math.round(offset));\n      const xPos = offset * scale, yPos = char.position.y * scale, texture = char.texture, pageMesh = pagesMeshData[texture.baseTexture.uid], textureFrame = texture.frame, textureUvs = texture._uvs, index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4, pageMesh.indices[index * 6 + 1] = 1 + index * 4, pageMesh.indices[index * 6 + 2] = 2 + index * 4, pageMesh.indices[index * 6 + 3] = 0 + index * 4, pageMesh.indices[index * 6 + 4] = 2 + index * 4, pageMesh.indices[index * 6 + 5] = 3 + index * 4, pageMesh.vertices[index * 8 + 0] = xPos, pageMesh.vertices[index * 8 + 1] = yPos, pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale, pageMesh.vertices[index * 8 + 3] = yPos, pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale, pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale, pageMesh.vertices[index * 8 + 6] = xPos, pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale, pageMesh.uvs[index * 8 + 0] = textureUvs.x0, pageMesh.uvs[index * 8 + 1] = textureUvs.y0, pageMesh.uvs[index * 8 + 2] = textureUvs.x1, pageMesh.uvs[index * 8 + 3] = textureUvs.y1, pageMesh.uvs[index * 8 + 4] = textureUvs.x2, pageMesh.uvs[index * 8 + 5] = textureUvs.y2, pageMesh.uvs[index * 8 + 6] = textureUvs.x3, pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n    this._textWidth = maxLineWidth * scale, this._textHeight = (pos.y + data.lineHeight) * scale;\n    for (const i in pagesMeshData) {\n      const pageMeshData = pagesMeshData[i];\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        let vertexCount = 0;\n        const anchorOffsetX = this._textWidth * this.anchor.x, anchorOffsetY = this._textHeight * this.anchor.y;\n        for (let i2 = 0; i2 < pageMeshData.total; i2++)\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY, pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY, pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY, pageMeshData.vertices[vertexCount++] -= anchorOffsetX, pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n      }\n      this._maxLineHeight = maxLineHeight * scale;\n      const vertexBuffer = pageMeshData.mesh.geometry.getBuffer(\"aVertexPosition\"), textureBuffer = pageMeshData.mesh.geometry.getBuffer(\"aTextureCoord\"), indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices, textureBuffer.data = pageMeshData.uvs, indexBuffer.data = pageMeshData.indices, vertexBuffer.update(), textureBuffer.update(), indexBuffer.update();\n    }\n    for (let i = 0; i < chars.length; i++)\n      charRenderDataPool.push(chars[i]);\n    this._font = data, this.dirty = !1;\n  }\n  updateTransform() {\n    this.validate(), this.containerUpdateTransform();\n  }\n  _render(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0);\n    const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n    if (distanceFieldType !== \"none\") {\n      const { a, b, c, d } = this.worldTransform, dx = Math.sqrt(a * a + b * b), dy = Math.sqrt(c * c + d * d), worldScale = (Math.abs(dx) + Math.abs(dy)) / 2, fontScale = this.fontSize / size, resolution = renderer._view.resolution;\n      for (const mesh of this._activePagesMeshData)\n        mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * resolution;\n    }\n    super._render(renderer);\n  }\n  /**\n   * Validates text before calling parent's getLocalBounds\n   * @returns - The rectangular bounding area\n   */\n  getLocalBounds() {\n    return this.validate(), super.getLocalBounds();\n  }\n  /**\n   * Updates text when needed\n   * @private\n   */\n  validate() {\n    const font = BitmapFont.available[this._fontName];\n    if (!font)\n      throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n    this._font !== font && (this.dirty = !0), this.dirty && this.updateText();\n  }\n  /**\n   * The tint of the BitmapText object.\n   * @default 0xffffff\n   */\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    if (this.tint !== value) {\n      this._tintColor.setValue(value);\n      for (let i = 0; i < this._activePagesMeshData.length; i++)\n        this._activePagesMeshData[i].mesh.tint = value;\n    }\n  }\n  /**\n   * The alignment of the BitmapText object.\n   * @member {string}\n   * @default 'left'\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align !== value && (this._align = value, this.dirty = !0);\n  }\n  /** The name of the BitmapFont. */\n  get fontName() {\n    return this._fontName;\n  }\n  set fontName(value) {\n    if (!BitmapFont.available[value])\n      throw new Error(`Missing BitmapFont \"${value}\"`);\n    this._fontName !== value && (this._fontName = value, this.dirty = !0);\n  }\n  /** The size of the font to display. */\n  get fontSize() {\n    return this._fontSize ?? BitmapFont.available[this._fontName].size;\n  }\n  set fontSize(value) {\n    this._fontSize !== value && (this._fontSize = value, this.dirty = !0);\n  }\n  /**\n   * The anchor sets the origin point of the text.\n   *\n   * The default is `(0,0)`, this means the text's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value == \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The text of the BitmapText object. */\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text ?? \"\"), this._text !== text && (this._text = text, this.dirty = !0);\n  }\n  /**\n   * The max width of this bitmap text in pixels. If the text provided is longer than the\n   * value provided, line breaks will be automatically inserted in the last whitespace.\n   * Disable by setting the value to 0.\n   */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  set maxWidth(value) {\n    this._maxWidth !== value && (this._maxWidth = value, this.dirty = !0);\n  }\n  /**\n   * The max line height. This is useful when trying to use the total height of the Text,\n   * i.e. when trying to vertically align.\n   * @readonly\n   */\n  get maxLineHeight() {\n    return this.validate(), this._maxLineHeight;\n  }\n  /**\n   * The width of the overall text, different from fontSize,\n   * which is defined in the style object.\n   * @readonly\n   */\n  get textWidth() {\n    return this.validate(), this._textWidth;\n  }\n  /** Additional space between characters. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing !== value && (this._letterSpacing = value, this.dirty = !0);\n  }\n  /**\n   * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n   * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n   * The main disadvantage is movement of objects may appear less smooth.\n   * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n   * @default PIXI.settings.ROUND_PIXELS\n   */\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  set roundPixels(value) {\n    value !== this._roundPixels && (this._roundPixels = value, this.dirty = !0);\n  }\n  /**\n   * The height of the overall text, different from fontSize,\n   * which is defined in the style object.\n   * @readonly\n   */\n  get textHeight() {\n    return this.validate(), this._textHeight;\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   *\n   * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n   * @default 1\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = !1, this._resolution !== value && (this._resolution = value, this.dirty = !0);\n  }\n  destroy(options) {\n    const { _textureCache } = this, pageMeshDataPool = BitmapFont.available[this._fontName].distanceFieldType === \"none\" ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    pageMeshDataPool.push(...this._activePagesMeshData);\n    for (const pageMeshData of this._activePagesMeshData)\n      this.removeChild(pageMeshData.mesh);\n    this._activePagesMeshData = [], pageMeshDataPool.filter((page) => _textureCache[page.mesh.texture.baseTexture.uid]).forEach((page) => {\n      page.mesh.texture = Texture.EMPTY;\n    });\n    for (const id in _textureCache)\n      _textureCache[id].destroy(), delete _textureCache[id];\n    this._font = null, this._tintColor = null, this._textureCache = null, super.destroy(options);\n  }\n};\n_BitmapText.styleDefaults = {\n  align: \"left\",\n  tint: 16777215,\n  maxWidth: 0,\n  letterSpacing: 0\n};\nlet BitmapText = _BitmapText;\nexport {\n  BitmapText\n};\n//# sourceMappingURL=BitmapText.mjs.map\n"],"names":["pageMeshDataDefaultPageMeshData","pageMeshDataMSDFPageMeshData","charRenderDataPool","_BitmapText","_BitmapText2","Container","text","style","align","tint","maxWidth","letterSpacing","fontName","fontSize","BitmapFont","Color","ObservablePoint","settings","data","scale","pos","Point","chars","lineWidths","lineSpaces","charsInput","splitTextToCharacters","pageMeshDataPool","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","spaceCount","char","charCode","extractCharCode","charData","charRenderData","Texture","utils.removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","texture","baseTextureUid","pageMeshData","geometry","MeshGeometry","material","meshBlendMode","MeshMaterial","BLEND_MODES","Program","msdfVert","msdfFrag","mesh","Mesh","_textureCache","total","_a","total2","vertices","i2","offset","xPos","yPos","pageMesh","textureFrame","textureUvs","index","vertexCount","anchorOffsetX","anchorOffsetY","vertexBuffer","textureBuffer","indexBuffer","renderer","distanceFieldRange","distanceFieldType","size","a","b","c","d","dx","dy","worldScale","fontScale","resolution","font","value","i","options","page","id"],"mappings":"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","x_google_ignoreList":[0]}