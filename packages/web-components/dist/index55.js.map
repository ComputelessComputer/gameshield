{"version":3,"file":"index55.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/geometry/GeometrySystem.mjs"],"sourcesContent":["import { ENV, BUFFER_TYPE } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { settings } from \"@pixi/settings\";\nconst byteSizeMap = { 5126: 4, 5123: 2, 5121: 1 };\nclass GeometrySystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this.renderer = renderer, this._activeGeometry = null, this._activeVao = null, this.hasVao = !0, this.hasInstance = !0, this.canUseUInt32ElementIndex = !1, this.managedGeometries = {};\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    this.disposeAll(!0);\n    const gl = this.gl = this.renderer.gl, context = this.renderer.context;\n    if (this.CONTEXT_UID = this.renderer.CONTEXT_UID, context.webGLVersion !== 2) {\n      let nativeVaoExtension = this.renderer.context.extensions.vertexArrayObject;\n      settings.PREFER_ENV === ENV.WEBGL_LEGACY && (nativeVaoExtension = null), nativeVaoExtension ? (gl.createVertexArray = () => nativeVaoExtension.createVertexArrayOES(), gl.bindVertexArray = (vao) => nativeVaoExtension.bindVertexArrayOES(vao), gl.deleteVertexArray = (vao) => nativeVaoExtension.deleteVertexArrayOES(vao)) : (this.hasVao = !1, gl.createVertexArray = () => null, gl.bindVertexArray = () => null, gl.deleteVertexArray = () => null);\n    }\n    if (context.webGLVersion !== 2) {\n      const instanceExt = gl.getExtension(\"ANGLE_instanced_arrays\");\n      instanceExt ? (gl.vertexAttribDivisor = (a, b) => instanceExt.vertexAttribDivisorANGLE(a, b), gl.drawElementsInstanced = (a, b, c, d, e) => instanceExt.drawElementsInstancedANGLE(a, b, c, d, e), gl.drawArraysInstanced = (a, b, c, d) => instanceExt.drawArraysInstancedANGLE(a, b, c, d)) : this.hasInstance = !1;\n    }\n    this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;\n  }\n  /**\n   * Binds geometry so that is can be drawn. Creating a Vao if required\n   * @param geometry - Instance of geometry to bind.\n   * @param shader - Instance of shader to use vao for.\n   */\n  bind(geometry, shader) {\n    shader = shader || this.renderer.shader.shader;\n    const { gl } = this;\n    let vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID], incRefCount = !1;\n    vaos || (this.managedGeometries[geometry.id] = geometry, geometry.disposeRunner.add(this), geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {}, incRefCount = !0);\n    const vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader, incRefCount);\n    this._activeGeometry = geometry, this._activeVao !== vao && (this._activeVao = vao, this.hasVao ? gl.bindVertexArray(vao) : this.activateVao(geometry, shader.program)), this.updateBuffers();\n  }\n  /** Reset and unbind any active VAO and geometry. */\n  reset() {\n    this.unbind();\n  }\n  /** Update buffers of the currently bound geometry. */\n  updateBuffers() {\n    const geometry = this._activeGeometry, bufferSystem = this.renderer.buffer;\n    for (let i = 0; i < geometry.buffers.length; i++) {\n      const buffer = geometry.buffers[i];\n      bufferSystem.update(buffer);\n    }\n  }\n  /**\n   * Check compatibility between a geometry and a program\n   * @param geometry - Geometry instance.\n   * @param program - Program instance.\n   */\n  checkCompatibility(geometry, program) {\n    const geometryAttributes = geometry.attributes, shaderAttributes = program.attributeData;\n    for (const j in shaderAttributes)\n      if (!geometryAttributes[j])\n        throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n  }\n  /**\n   * Takes a geometry and program and generates a unique signature for them.\n   * @param geometry - To get signature from.\n   * @param program - To test geometry against.\n   * @returns - Unique signature of the geometry and program\n   */\n  getSignature(geometry, program) {\n    const attribs = geometry.attributes, shaderAttributes = program.attributeData, strings = [\"g\", geometry.id];\n    for (const i in attribs)\n      shaderAttributes[i] && strings.push(i, shaderAttributes[i].location);\n    return strings.join(\"-\");\n  }\n  /**\n   * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n   * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n   * attribute locations.\n   * @param geometry - Instance of geometry to to generate Vao for.\n   * @param shader - Instance of the shader.\n   * @param incRefCount - Increment refCount of all geometry buffers.\n   */\n  initGeometryVao(geometry, shader, incRefCount = !0) {\n    const gl = this.gl, CONTEXT_UID = this.CONTEXT_UID, bufferSystem = this.renderer.buffer, program = shader.program;\n    program.glPrograms[CONTEXT_UID] || this.renderer.shader.generateProgram(shader), this.checkCompatibility(geometry, program);\n    const signature = this.getSignature(geometry, program), vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n    let vao = vaoObjectHash[signature];\n    if (vao)\n      return vaoObjectHash[program.id] = vao, vao;\n    const buffers = geometry.buffers, attributes = geometry.attributes, tempStride = {}, tempStart = {};\n    for (const j in buffers)\n      tempStride[j] = 0, tempStart[j] = 0;\n    for (const j in attributes)\n      !attributes[j].size && program.attributeData[j] ? attributes[j].size = program.attributeData[j].size : attributes[j].size || console.warn(`PIXI Geometry attribute '${j}' size cannot be determined (likely the bound shader does not have the attribute)`), tempStride[attributes[j].buffer] += attributes[j].size * byteSizeMap[attributes[j].type];\n    for (const j in attributes) {\n      const attribute = attributes[j], attribSize = attribute.size;\n      attribute.stride === void 0 && (tempStride[attribute.buffer] === attribSize * byteSizeMap[attribute.type] ? attribute.stride = 0 : attribute.stride = tempStride[attribute.buffer]), attribute.start === void 0 && (attribute.start = tempStart[attribute.buffer], tempStart[attribute.buffer] += attribSize * byteSizeMap[attribute.type]);\n    }\n    vao = gl.createVertexArray(), gl.bindVertexArray(vao);\n    for (let i = 0; i < buffers.length; i++) {\n      const buffer = buffers[i];\n      bufferSystem.bind(buffer), incRefCount && buffer._glBuffers[CONTEXT_UID].refCount++;\n    }\n    return this.activateVao(geometry, program), vaoObjectHash[program.id] = vao, vaoObjectHash[signature] = vao, gl.bindVertexArray(null), bufferSystem.unbind(BUFFER_TYPE.ARRAY_BUFFER), vao;\n  }\n  /**\n   * Disposes geometry.\n   * @param geometry - Geometry with buffers. Only VAO will be disposed\n   * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  disposeGeometry(geometry, contextLost) {\n    if (!this.managedGeometries[geometry.id])\n      return;\n    delete this.managedGeometries[geometry.id];\n    const vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID], gl = this.gl, buffers = geometry.buffers, bufferSystem = this.renderer?.buffer;\n    if (geometry.disposeRunner.remove(this), !!vaos) {\n      if (bufferSystem)\n        for (let i = 0; i < buffers.length; i++) {\n          const buf = buffers[i]._glBuffers[this.CONTEXT_UID];\n          buf && (buf.refCount--, buf.refCount === 0 && !contextLost && bufferSystem.dispose(buffers[i], contextLost));\n        }\n      if (!contextLost) {\n        for (const vaoId in vaos)\n          if (vaoId[0] === \"g\") {\n            const vao = vaos[vaoId];\n            this._activeVao === vao && this.unbind(), gl.deleteVertexArray(vao);\n          }\n      }\n      delete geometry.glVertexArrayObjects[this.CONTEXT_UID];\n    }\n  }\n  /**\n   * Dispose all WebGL resources of all managed geometries.\n   * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n   */\n  disposeAll(contextLost) {\n    const all = Object.keys(this.managedGeometries);\n    for (let i = 0; i < all.length; i++)\n      this.disposeGeometry(this.managedGeometries[all[i]], contextLost);\n  }\n  /**\n   * Activate vertex array object.\n   * @param geometry - Geometry instance.\n   * @param program - Shader program instance.\n   */\n  activateVao(geometry, program) {\n    const gl = this.gl, CONTEXT_UID = this.CONTEXT_UID, bufferSystem = this.renderer.buffer, buffers = geometry.buffers, attributes = geometry.attributes;\n    geometry.indexBuffer && bufferSystem.bind(geometry.indexBuffer);\n    let lastBuffer = null;\n    for (const j in attributes) {\n      const attribute = attributes[j], buffer = buffers[attribute.buffer], glBuffer = buffer._glBuffers[CONTEXT_UID];\n      if (program.attributeData[j]) {\n        lastBuffer !== glBuffer && (bufferSystem.bind(buffer), lastBuffer = glBuffer);\n        const location = program.attributeData[j].location;\n        if (gl.enableVertexAttribArray(location), gl.vertexAttribPointer(\n          location,\n          attribute.size,\n          attribute.type || gl.FLOAT,\n          attribute.normalized,\n          attribute.stride,\n          attribute.start\n        ), attribute.instance)\n          if (this.hasInstance)\n            gl.vertexAttribDivisor(location, attribute.divisor);\n          else\n            throw new Error(\"geometry error, GPU Instancing is not supported on this device\");\n      }\n    }\n  }\n  /**\n   * Draws the currently bound geometry.\n   * @param type - The type primitive to render.\n   * @param size - The number of elements to be rendered. If not specified, all vertices after the\n   *  starting vertex will be drawn.\n   * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n   *  drawing will start from the first vertex.\n   * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n   *  all instances will be drawn.\n   */\n  draw(type, size, start, instanceCount) {\n    const { gl } = this, geometry = this._activeGeometry;\n    if (geometry.indexBuffer) {\n      const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT, glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n      byteSize === 2 || byteSize === 4 && this.canUseUInt32ElementIndex ? geometry.instanced ? gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1) : gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize) : console.warn(\"unsupported index buffer type: uint32\");\n    } else\n      geometry.instanced ? gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1) : gl.drawArrays(type, start, size || geometry.getSize());\n    return this;\n  }\n  /** Unbind/reset everything. */\n  unbind() {\n    this.gl.bindVertexArray(null), this._activeVao = null, this._activeGeometry = null;\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nGeometrySystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"geometry\"\n};\nextensions.add(GeometrySystem);\nexport {\n  GeometrySystem\n};\n//# sourceMappingURL=GeometrySystem.mjs.map\n"],"names":["byteSizeMap","GeometrySystem","renderer","gl","context","nativeVaoExtension","settings","ENV","vao","instanceExt","a","b","c","d","e","geometry","shader","vaos","incRefCount","bufferSystem","i","buffer","program","geometryAttributes","shaderAttributes","j","attribs","strings","CONTEXT_UID","signature","vaoObjectHash","buffers","attributes","tempStride","tempStart","attribute","attribSize","BUFFER_TYPE","contextLost","_a","buf","vaoId","all","lastBuffer","glBuffer","location","type","size","start","instanceCount","byteSize","glType","ExtensionType","extensions"],"mappings":"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","x_google_ignoreList":[0]}