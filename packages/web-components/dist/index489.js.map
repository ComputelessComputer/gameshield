{"version":3,"file":"index489.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/container/container-mixins/getFastGlobalBoundsMixin.mjs"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Bounds } from '../bounds/Bounds.mjs';\nimport { boundsPool } from '../bounds/utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nconst getFastGlobalBoundsMixin = {\n  /**\n   * Computes the global bounds for the container, considering its children and optionally\n   * factoring in render layers. It starts by clearing the provided bounds object, then\n   * recursively calculates the bounds, and finally applies the world transformation.\n   * @param {boolean} [factorRenderLayers] - Whether to consider render layers in the calculation.\n   * @param {Bounds} [bounds] - The bounds object to store the result. If not provided, a new one is created.\n   * @returns {Bounds} The computed bounds.\n   * @memberof scene.Container#\n   */\n  getFastGlobalBounds(factorRenderLayers, bounds) {\n    bounds || (bounds = new Bounds());\n    bounds.clear();\n    this._getGlobalBoundsRecursive(!!factorRenderLayers, bounds, this.parentRenderLayer);\n    if (!bounds.isValid) {\n      bounds.set(0, 0, 0, 0);\n    }\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    bounds.applyMatrix(renderGroup.worldTransform);\n    return bounds;\n  },\n  /**\n   * Recursively calculates the global bounds for the container and its children.\n   * It considers visibility, measurability, and effects, and applies transformations\n   * as necessary to compute the bounds accurately.\n   * @param {boolean} factorRenderLayers - Whether to consider render layers in the calculation.\n   * @param {Bounds} bounds - The bounds object to update with the calculated values.\n   * @param {IRenderLayer} currentLayer - The current render layer being processed.\n   * @memberof scene.Container#\n   */\n  _getGlobalBoundsRecursive(factorRenderLayers, bounds, currentLayer) {\n    let localBounds = bounds;\n    if (factorRenderLayers && this.parentRenderLayer && this.parentRenderLayer !== currentLayer)\n      return;\n    if (this.localDisplayStatus !== 7 || !this.measurable) {\n      return;\n    }\n    const manageEffects = !!this.effects.length;\n    if (this.renderGroup || manageEffects) {\n      localBounds = boundsPool.get().clear();\n    }\n    if (this.boundsArea) {\n      bounds.addRect(this.boundsArea, this.worldTransform);\n    } else {\n      if (this.renderPipeId) {\n        const viewBounds = this.bounds;\n        localBounds.addFrame(\n          viewBounds.minX,\n          viewBounds.minY,\n          viewBounds.maxX,\n          viewBounds.maxY,\n          this.groupTransform\n        );\n      }\n      const children = this.children;\n      for (let i = 0; i < children.length; i++) {\n        children[i]._getGlobalBoundsRecursive(factorRenderLayers, localBounds, currentLayer);\n      }\n    }\n    if (manageEffects) {\n      let advanced = false;\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      for (let i = 0; i < this.effects.length; i++) {\n        if (this.effects[i].addBounds) {\n          if (!advanced) {\n            advanced = true;\n            localBounds.applyMatrix(renderGroup.worldTransform);\n          }\n          this.effects[i].addBounds(localBounds, true);\n        }\n      }\n      if (advanced) {\n        localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n        bounds.addBounds(localBounds, this.relativeGroupTransform);\n      }\n      bounds.addBounds(localBounds);\n      boundsPool.return(localBounds);\n    } else if (this.renderGroup) {\n      bounds.addBounds(localBounds, this.relativeGroupTransform);\n      boundsPool.return(localBounds);\n    }\n  }\n};\n\nexport { getFastGlobalBoundsMixin };\n//# sourceMappingURL=getFastGlobalBoundsMixin.mjs.map\n"],"names":["tempMatrix","Matrix","getFastGlobalBoundsMixin","factorRenderLayers","bounds","Bounds","renderGroup","currentLayer","localBounds","manageEffects","boundsPool","viewBounds","children","i","advanced"],"mappings":";;;AAKA,MAAMA,IAAa,IAAIC,KACjBC,IAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU/B,oBAAoBC,GAAoBC,GAAQ;AAC9C,IAAAA,MAAWA,IAAS,IAAIC,EAAM,IAC9BD,EAAO,MAAK,GACZ,KAAK,0BAA0B,CAAC,CAACD,GAAoBC,GAAQ,KAAK,iBAAiB,GAC9EA,EAAO,WACVA,EAAO,IAAI,GAAG,GAAG,GAAG,CAAC;AAEvB,UAAME,IAAc,KAAK,eAAe,KAAK;AAC7C,WAAAF,EAAO,YAAYE,EAAY,cAAc,GACtCF;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,0BAA0BD,GAAoBC,GAAQG,GAAc;AAClE,QAAIC,IAAcJ;AAGlB,QAFID,KAAsB,KAAK,qBAAqB,KAAK,sBAAsBI,KAE3E,KAAK,uBAAuB,KAAK,CAAC,KAAK;AACzC;AAEF,UAAME,IAAgB,CAAC,CAAC,KAAK,QAAQ;AAIrC,SAHI,KAAK,eAAeA,OACtBD,IAAcE,EAAW,IAAK,EAAC,MAAK,IAElC,KAAK;AACP,MAAAN,EAAO,QAAQ,KAAK,YAAY,KAAK,cAAc;AAAA,SAC9C;AACL,UAAI,KAAK,cAAc;AACrB,cAAMO,IAAa,KAAK;AACxB,QAAAH,EAAY;AAAA,UACVG,EAAW;AAAA,UACXA,EAAW;AAAA,UACXA,EAAW;AAAA,UACXA,EAAW;AAAA,UACX,KAAK;AAAA,QACf;AAAA,MACO;AACD,YAAMC,IAAW,KAAK;AACtB,eAASC,IAAI,GAAGA,IAAID,EAAS,QAAQC;AACnC,QAAAD,EAASC,CAAC,EAAE,0BAA0BV,GAAoBK,GAAaD,CAAY;AAAA,IAEtF;AACD,QAAIE,GAAe;AACjB,UAAIK,IAAW;AACf,YAAMR,IAAc,KAAK,eAAe,KAAK;AAC7C,eAASO,IAAI,GAAGA,IAAI,KAAK,QAAQ,QAAQA;AACvC,QAAI,KAAK,QAAQA,CAAC,EAAE,cACbC,MACHA,IAAW,IACXN,EAAY,YAAYF,EAAY,cAAc,IAEpD,KAAK,QAAQO,CAAC,EAAE,UAAUL,GAAa,EAAI;AAG/C,MAAIM,MACFN,EAAY,YAAYF,EAAY,eAAe,OAAON,CAAU,EAAE,OAAM,CAAE,GAC9EI,EAAO,UAAUI,GAAa,KAAK,sBAAsB,IAE3DJ,EAAO,UAAUI,CAAW,GAC5BE,EAAW,OAAOF,CAAW;AAAA,IACnC;AAAW,MAAI,KAAK,gBACdJ,EAAO,UAAUI,GAAa,KAAK,sBAAsB,GACzDE,EAAW,OAAOF,CAAW;AAAA,EAEhC;AACH;","x_google_ignoreList":[0]}