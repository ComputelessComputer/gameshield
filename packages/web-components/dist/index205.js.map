{"version":3,"file":"index205.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/system/SystemManager.mjs"],"sourcesContent":["import { Runner } from \"@pixi/runner\";\nimport { EventEmitter } from \"@pixi/utils\";\nclass SystemManager extends EventEmitter {\n  constructor() {\n    super(...arguments), this.runners = {}, this._systemsHash = {};\n  }\n  /**\n   * Set up a system with a collection of SystemClasses and runners.\n   * Systems are attached dynamically to this class when added.\n   * @param config - the config for the system manager\n   */\n  setup(config) {\n    this.addRunners(...config.runners);\n    const priority = (config.priority ?? []).filter((key) => config.systems[key]), orderByPriority = [\n      ...priority,\n      ...Object.keys(config.systems).filter((key) => !priority.includes(key))\n    ];\n    for (const i of orderByPriority)\n      this.addSystem(config.systems[i], i);\n  }\n  /**\n   * Create a bunch of runners based of a collection of ids\n   * @param runnerIds - the runner ids to add\n   */\n  addRunners(...runnerIds) {\n    runnerIds.forEach((runnerId) => {\n      this.runners[runnerId] = new Runner(runnerId);\n    });\n  }\n  /**\n   * Add a new system to the renderer.\n   * @param ClassRef - Class reference\n   * @param name - Property name for system, if not specified\n   *        will use a static `name` property on the class itself. This\n   *        name will be assigned as s property on the Renderer so make\n   *        sure it doesn't collide with properties on Renderer.\n   * @returns Return instance of renderer\n   */\n  addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name])\n      throw new Error(`Whoops! The name \"${name}\" is already in use`);\n    this[name] = system, this._systemsHash[name] = system;\n    for (const i in this.runners)\n      this.runners[i].add(system);\n    return this;\n  }\n  /**\n   * A function that will run a runner and call the runners function but pass in different options\n   * to each system based on there name.\n   *\n   * E.g. If you have two systems added called `systemA` and `systemB` you could call do the following:\n   *\n   * ```js\n   * system.emitWithCustomOptions(init, {\n   *     systemA: {...optionsForA},\n   *     systemB: {...optionsForB},\n   * });\n   * ```\n   *\n   * `init` would be called on system A passing `optionsForA` and on system B passing `optionsForB`.\n   * @param runner - the runner to target\n   * @param options - key value options for each system\n   */\n  emitWithCustomOptions(runner, options) {\n    const systemHashKeys = Object.keys(this._systemsHash);\n    runner.items.forEach((system) => {\n      const systemName = systemHashKeys.find((systemId) => this._systemsHash[systemId] === system);\n      system[runner.name](options[systemName]);\n    });\n  }\n  /** destroy the all runners and systems. Its apps job to */\n  destroy() {\n    Object.values(this.runners).forEach((runner) => {\n      runner.destroy();\n    }), this._systemsHash = {};\n  }\n  // TODO implement!\n  // removeSystem(ClassRef: ISystemConstructor, name: string): void\n  // {\n  // }\n}\nexport {\n  SystemManager\n};\n//# sourceMappingURL=SystemManager.mjs.map\n"],"names":["SystemManager","EventEmitter","config","priority","key","orderByPriority","i","runnerIds","runnerId","Runner","ClassRef","name","system","runner","options","systemHashKeys","systemName","systemId"],"mappings":";;;;;;;;;AAEA,MAAMA,UAAsBC,EAAa;AAAA,EACvC,cAAc;AACZ,UAAM,GAAG,SAAS,GAAG,KAAK,UAAU,IAAI,KAAK,eAAe;EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAMC,GAAQ;AACZ,SAAK,WAAW,GAAGA,EAAO,OAAO;AACjC,UAAMC,KAAYD,EAAO,YAAY,CAAE,GAAE,OAAO,CAACE,MAAQF,EAAO,QAAQE,CAAG,CAAC,GAAGC,IAAkB;AAAA,MAC/F,GAAGF;AAAA,MACH,GAAG,OAAO,KAAKD,EAAO,OAAO,EAAE,OAAO,CAACE,MAAQ,CAACD,EAAS,SAASC,CAAG,CAAC;AAAA,IAC5E;AACI,eAAWE,KAAKD;AACd,WAAK,UAAUH,EAAO,QAAQI,CAAC,GAAGA,CAAC;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,cAAcC,GAAW;AACvB,IAAAA,EAAU,QAAQ,CAACC,MAAa;AAC9B,WAAK,QAAQA,CAAQ,IAAI,IAAIC,EAAOD,CAAQ;AAAA,IAClD,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,UAAUE,GAAUC,GAAM;AACxB,UAAMC,IAAS,IAAIF,EAAS,IAAI;AAChC,QAAI,KAAKC,CAAI;AACX,YAAM,IAAI,MAAM,qBAAqBA,CAAI,qBAAqB;AAChE,SAAKA,CAAI,IAAIC,GAAQ,KAAK,aAAaD,CAAI,IAAIC;AAC/C,eAAWN,KAAK,KAAK;AACnB,WAAK,QAAQA,CAAC,EAAE,IAAIM,CAAM;AAC5B,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBD,sBAAsBC,GAAQC,GAAS;AACrC,UAAMC,IAAiB,OAAO,KAAK,KAAK,YAAY;AACpD,IAAAF,EAAO,MAAM,QAAQ,CAACD,MAAW;AAC/B,YAAMI,IAAaD,EAAe,KAAK,CAACE,MAAa,KAAK,aAAaA,CAAQ,MAAML,CAAM;AAC3F,MAAAA,EAAOC,EAAO,IAAI,EAAEC,EAAQE,CAAU,CAAC;AAAA,IAC7C,CAAK;AAAA,EACF;AAAA;AAAA,EAED,UAAU;AACR,WAAO,OAAO,KAAK,OAAO,EAAE,QAAQ,CAACH,MAAW;AAC9C,MAAAA,EAAO,QAAO;AAAA,IACpB,CAAK,GAAG,KAAK,eAAe;EACzB;AAAA;AAAA;AAAA;AAAA;AAKH;","x_google_ignoreList":[0]}