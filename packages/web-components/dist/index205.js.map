{"version":3,"file":"index205.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/framebuffer/Framebuffer.mjs"],"sourcesContent":["import { MSAA_QUALITY, SCALE_MODES, MIPMAP_MODES, FORMATS, TYPES } from \"@pixi/constants\";\nimport { Runner } from \"@pixi/runner\";\nimport { BaseTexture } from \"../textures/BaseTexture.mjs\";\nclass Framebuffer {\n  /**\n   * @param width - Width of the frame buffer\n   * @param height - Height of the frame buffer\n   */\n  constructor(width, height) {\n    if (this.width = Math.round(width), this.height = Math.round(height), !this.width || !this.height)\n      throw new Error(\"Framebuffer width or height is zero\");\n    this.stencil = !1, this.depth = !1, this.dirtyId = 0, this.dirtyFormat = 0, this.dirtySize = 0, this.depthTexture = null, this.colorTextures = [], this.glFramebuffers = {}, this.disposeRunner = new Runner(\"disposeFramebuffer\"), this.multisample = MSAA_QUALITY.NONE;\n  }\n  /**\n   * Reference to the colorTexture.\n   * @readonly\n   */\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  /**\n   * Add texture to the colorTexture array.\n   * @param index - Index of the array to add the texture to\n   * @param texture - Texture to add to the array\n   */\n  addColorTexture(index = 0, texture) {\n    return this.colorTextures[index] = texture || new BaseTexture(null, {\n      scaleMode: SCALE_MODES.NEAREST,\n      resolution: 1,\n      mipmap: MIPMAP_MODES.OFF,\n      width: this.width,\n      height: this.height\n    }), this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /**\n   * Add a depth texture to the frame buffer.\n   * @param texture - Texture to add.\n   */\n  addDepthTexture(texture) {\n    return this.depthTexture = texture || new BaseTexture(null, {\n      scaleMode: SCALE_MODES.NEAREST,\n      resolution: 1,\n      width: this.width,\n      height: this.height,\n      mipmap: MIPMAP_MODES.OFF,\n      format: FORMATS.DEPTH_COMPONENT,\n      type: TYPES.UNSIGNED_SHORT\n    }), this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /** Enable depth on the frame buffer. */\n  enableDepth() {\n    return this.depth = !0, this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /** Enable stencil on the frame buffer. */\n  enableStencil() {\n    return this.stencil = !0, this.dirtyId++, this.dirtyFormat++, this;\n  }\n  /**\n   * Resize the frame buffer\n   * @param width - Width of the frame buffer to resize to\n   * @param height - Height of the frame buffer to resize to\n   */\n  resize(width, height) {\n    if (width = Math.round(width), height = Math.round(height), !width || !height)\n      throw new Error(\"Framebuffer width and height must not be zero\");\n    if (!(width === this.width && height === this.height)) {\n      this.width = width, this.height = height, this.dirtyId++, this.dirtySize++;\n      for (let i = 0; i < this.colorTextures.length; i++) {\n        const texture = this.colorTextures[i], resolution = texture.resolution;\n        texture.setSize(width / resolution, height / resolution);\n      }\n      if (this.depthTexture) {\n        const resolution = this.depthTexture.resolution;\n        this.depthTexture.setSize(width / resolution, height / resolution);\n      }\n    }\n  }\n  /** Disposes WebGL resources that are connected to this geometry. */\n  dispose() {\n    this.disposeRunner.emit(this, !1);\n  }\n  /** Destroys and removes the depth texture added to this framebuffer. */\n  destroyDepthTexture() {\n    this.depthTexture && (this.depthTexture.destroy(), this.depthTexture = null, ++this.dirtyId, ++this.dirtyFormat);\n  }\n}\nexport {\n  Framebuffer\n};\n//# sourceMappingURL=Framebuffer.mjs.map\n"],"names":["Framebuffer","width","height","Runner","MSAA_QUALITY","index","texture","BaseTexture","SCALE_MODES","MIPMAP_MODES","FORMATS","TYPES","resolution"],"mappings":";;;AAGA,MAAMA,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhB,YAAYC,GAAOC,GAAQ;AACzB,QAAI,KAAK,QAAQ,KAAK,MAAMD,CAAK,GAAG,KAAK,SAAS,KAAK,MAAMC,CAAM,GAAG,CAAC,KAAK,SAAS,CAAC,KAAK;AACzF,YAAM,IAAI,MAAM,qCAAqC;AACvD,SAAK,UAAU,IAAI,KAAK,QAAQ,IAAI,KAAK,UAAU,GAAG,KAAK,cAAc,GAAG,KAAK,YAAY,GAAG,KAAK,eAAe,MAAM,KAAK,gBAAgB,CAAE,GAAE,KAAK,iBAAiB,IAAI,KAAK,gBAAgB,IAAIC,EAAO,oBAAoB,GAAG,KAAK,cAAcC,EAAa;AAAA,EACrQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,eAAe;AACjB,WAAO,KAAK,cAAc,CAAC;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,gBAAgBC,IAAQ,GAAGC,GAAS;AAClC,WAAO,KAAK,cAAcD,CAAK,IAAIC,KAAW,IAAIC,EAAY,MAAM;AAAA,MAClE,WAAWC,EAAY;AAAA,MACvB,YAAY;AAAA,MACZ,QAAQC,EAAa;AAAA,MACrB,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,IACnB,CAAK,GAAG,KAAK,WAAW,KAAK,eAAe;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,gBAAgBH,GAAS;AACvB,WAAO,KAAK,eAAeA,KAAW,IAAIC,EAAY,MAAM;AAAA,MAC1D,WAAWC,EAAY;AAAA,MACvB,YAAY;AAAA,MACZ,OAAO,KAAK;AAAA,MACZ,QAAQ,KAAK;AAAA,MACb,QAAQC,EAAa;AAAA,MACrB,QAAQC,EAAQ;AAAA,MAChB,MAAMC,EAAM;AAAA,IAClB,CAAK,GAAG,KAAK,WAAW,KAAK,eAAe;AAAA,EACzC;AAAA;AAAA,EAED,cAAc;AACZ,WAAO,KAAK,QAAQ,IAAI,KAAK,WAAW,KAAK,eAAe;AAAA,EAC7D;AAAA;AAAA,EAED,gBAAgB;AACd,WAAO,KAAK,UAAU,IAAI,KAAK,WAAW,KAAK,eAAe;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAOV,GAAOC,GAAQ;AACpB,QAAID,IAAQ,KAAK,MAAMA,CAAK,GAAGC,IAAS,KAAK,MAAMA,CAAM,GAAG,CAACD,KAAS,CAACC;AACrE,YAAM,IAAI,MAAM,+CAA+C;AACjE,QAAI,EAAED,MAAU,KAAK,SAASC,MAAW,KAAK,SAAS;AACrD,WAAK,QAAQD,GAAO,KAAK,SAASC,GAAQ,KAAK,WAAW,KAAK;AAC/D,eAAS,IAAI,GAAG,IAAI,KAAK,cAAc,QAAQ,KAAK;AAClD,cAAMI,IAAU,KAAK,cAAc,CAAC,GAAGM,IAAaN,EAAQ;AAC5D,QAAAA,EAAQ,QAAQL,IAAQW,GAAYV,IAASU,CAAU;AAAA,MACxD;AACD,UAAI,KAAK,cAAc;AACrB,cAAMA,IAAa,KAAK,aAAa;AACrC,aAAK,aAAa,QAAQX,IAAQW,GAAYV,IAASU,CAAU;AAAA,MAClE;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAED,UAAU;AACR,SAAK,cAAc,KAAK,MAAM,EAAE;AAAA,EACjC;AAAA;AAAA,EAED,sBAAsB;AACpB,SAAK,iBAAiB,KAAK,aAAa,QAAS,GAAE,KAAK,eAAe,MAAM,EAAE,KAAK,SAAS,EAAE,KAAK;AAAA,EACrG;AACH;","x_google_ignoreList":[0]}