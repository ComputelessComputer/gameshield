{"version":3,"file":"index65.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/renderTexture/RenderTexturePool.mjs"],"sourcesContent":["import { MSAA_QUALITY } from \"@pixi/constants\";\nimport { nextPow2 } from \"@pixi/utils\";\nimport { BaseRenderTexture } from \"./BaseRenderTexture.mjs\";\nimport { RenderTexture } from \"./RenderTexture.mjs\";\nclass RenderTexturePool {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n   */\n  constructor(textureOptions) {\n    this.texturePool = {}, this.textureOptions = textureOptions || {}, this.enableFullScreen = !1, this._pixelsWidth = 0, this._pixelsHeight = 0;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param realWidth - Width of texture in pixels.\n   * @param realHeight - Height of texture in pixels.\n   * @param multisample - Number of samples of the framebuffer.\n   */\n  createTexture(realWidth, realHeight, multisample = MSAA_QUALITY.NONE) {\n    const baseRenderTexture = new BaseRenderTexture(Object.assign({\n      width: realWidth,\n      height: realHeight,\n      resolution: 1,\n      multisample\n    }, this.textureOptions));\n    return new RenderTexture(baseRenderTexture);\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param multisample - Number of samples of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalTexture(minWidth, minHeight, resolution = 1, multisample = MSAA_QUALITY.NONE) {\n    let key;\n    minWidth = Math.max(Math.ceil(minWidth * resolution - 1e-6), 1), minHeight = Math.max(Math.ceil(minHeight * resolution - 1e-6), 1), !this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight ? (minWidth = nextPow2(minWidth), minHeight = nextPow2(minHeight), key = ((minWidth & 65535) << 16 | minHeight & 65535) >>> 0, multisample > 1 && (key += multisample * 4294967296)) : key = multisample > 1 ? -multisample : -1, this.texturePool[key] || (this.texturePool[key] = []);\n    let renderTexture = this.texturePool[key].pop();\n    return renderTexture || (renderTexture = this.createTexture(minWidth, minHeight, multisample)), renderTexture.filterPoolKey = key, renderTexture.setResolution(resolution), renderTexture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   *\n   * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n   * @param input - renderTexture from which size and resolution will be copied\n   * @param resolution - override resolution of the renderTexture\n   *  It overrides, it does not multiply\n   * @param multisample - number of samples of the renderTexture\n   */\n  getFilterTexture(input, resolution, multisample) {\n    const filterTexture = this.getOptimalTexture(\n      input.width,\n      input.height,\n      resolution || input.resolution,\n      multisample || MSAA_QUALITY.NONE\n    );\n    return filterTexture.filterFrame = input.filterFrame, filterTexture;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = renderTexture.filterPoolKey;\n    renderTexture.filterFrame = null, this.texturePool[key].push(renderTexture);\n  }\n  /**\n   * Alias for returnTexture, to be compliant with FilterSystem interface.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnFilterTexture(renderTexture) {\n    this.returnTexture(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    if (destroyTextures = destroyTextures !== !1, destroyTextures)\n      for (const i in this.texturePool) {\n        const textures = this.texturePool[i];\n        if (textures)\n          for (let j = 0; j < textures.length; j++)\n            textures[j].destroy(!0);\n      }\n    this.texturePool = {};\n  }\n  /**\n   * If screen size was changed, drops all screen-sized textures,\n   * sets new screen size, sets `enableFullScreen` to true\n   *\n   * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n   * @param size - Initial size of screen.\n   */\n  setScreenSize(size) {\n    if (!(size.width === this._pixelsWidth && size.height === this._pixelsHeight)) {\n      this.enableFullScreen = size.width > 0 && size.height > 0;\n      for (const i in this.texturePool) {\n        if (!(Number(i) < 0))\n          continue;\n        const textures = this.texturePool[i];\n        if (textures)\n          for (let j = 0; j < textures.length; j++)\n            textures[j].destroy(!0);\n        this.texturePool[i] = [];\n      }\n      this._pixelsWidth = size.width, this._pixelsHeight = size.height;\n    }\n  }\n}\nRenderTexturePool.SCREEN_KEY = -1;\nexport {\n  RenderTexturePool\n};\n//# sourceMappingURL=RenderTexturePool.mjs.map\n"],"names":["RenderTexturePool","textureOptions","realWidth","realHeight","multisample","MSAA_QUALITY","baseRenderTexture","BaseRenderTexture","RenderTexture","minWidth","minHeight","resolution","key","nextPow2","renderTexture","input","filterTexture","destroyTextures","i","textures","j","size"],"mappings":"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","x_google_ignoreList":[0]}