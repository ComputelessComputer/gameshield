{"version":3,"file":"index193.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/geometry/Buffer.mjs"],"sourcesContent":["import { BUFFER_TYPE } from \"@pixi/constants\";\nimport { Runner } from \"@pixi/runner\";\nlet UID = 0;\nclass Buffer {\n  /**\n   * @param {PIXI.IArrayBuffer} data - the data to store in the buffer.\n   * @param _static - `true` for static buffer\n   * @param index - `true` for index buffer\n   */\n  constructor(data, _static = !0, index = !1) {\n    this.data = data || new Float32Array(1), this._glBuffers = {}, this._updateID = 0, this.index = index, this.static = _static, this.id = UID++, this.disposeRunner = new Runner(\"disposeBuffer\");\n  }\n  // TODO could explore flagging only a partial upload?\n  /**\n   * Flags this buffer as requiring an upload to the GPU.\n   * @param {PIXI.IArrayBuffer|number[]} [data] - the data to update in the buffer.\n   */\n  update(data) {\n    data instanceof Array && (data = new Float32Array(data)), this.data = data || this.data, this._updateID++;\n  }\n  /** Disposes WebGL resources that are connected to this geometry. */\n  dispose() {\n    this.disposeRunner.emit(this, !1);\n  }\n  /** Destroys the buffer. */\n  destroy() {\n    this.dispose(), this.data = null;\n  }\n  /**\n   * Flags whether this is an index buffer.\n   *\n   * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make\n   * the buffer of type `ARRAY_BUFFER`.\n   *\n   * For backwards compatibility.\n   */\n  set index(value) {\n    this.type = value ? BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : BUFFER_TYPE.ARRAY_BUFFER;\n  }\n  get index() {\n    return this.type === BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n  }\n  /**\n   * Helper function that creates a buffer based on an array or TypedArray\n   * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n   * @returns - A new Buffer based on the data provided.\n   */\n  static from(data) {\n    return data instanceof Array && (data = new Float32Array(data)), new Buffer(data);\n  }\n}\nexport {\n  Buffer\n};\n//# sourceMappingURL=Buffer.mjs.map\n"],"names":["UID","Buffer","data","_static","index","Runner","value","BUFFER_TYPE"],"mappings":";;AAEA,IAAIA,IAAM;AACV,MAAMC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,YAAYC,GAAMC,IAAU,IAAIC,IAAQ,IAAI;AAC1C,SAAK,OAAOF,KAAQ,IAAI,aAAa,CAAC,GAAG,KAAK,aAAa,CAAA,GAAI,KAAK,YAAY,GAAG,KAAK,QAAQE,GAAO,KAAK,SAASD,GAAS,KAAK,KAAKH,KAAO,KAAK,gBAAgB,IAAIK,EAAO,eAAe;AAAA,EAC/L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAOH,GAAM;AACX,IAAAA,aAAgB,UAAUA,IAAO,IAAI,aAAaA,CAAI,IAAI,KAAK,OAAOA,KAAQ,KAAK,MAAM,KAAK;AAAA,EAC/F;AAAA;AAAA,EAED,UAAU;AACR,SAAK,cAAc,KAAK,MAAM,EAAE;AAAA,EACjC;AAAA;AAAA,EAED,UAAU;AACR,SAAK,QAAS,GAAE,KAAK,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,MAAMI,GAAO;AACf,SAAK,OAAOA,IAAQC,EAAY,uBAAuBA,EAAY;AAAA,EACpE;AAAA,EACD,IAAI,QAAQ;AACV,WAAO,KAAK,SAASA,EAAY;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,KAAKL,GAAM;AAChB,WAAOA,aAAgB,UAAUA,IAAO,IAAI,aAAaA,CAAI,IAAI,IAAID,EAAOC,CAAI;AAAA,EACjF;AACH;","x_google_ignoreList":[0]}