{"version":3,"file":"index238.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/resources/AbstractMultiResource.mjs"],"sourcesContent":["import { BaseTexture } from \"../BaseTexture.mjs\";\nimport { autoDetectResource } from \"./autoDetectResource.mjs\";\nimport { Resource } from \"./Resource.mjs\";\nclass AbstractMultiResource extends Resource {\n  /**\n   * @param length\n   * @param options - Options to for Resource constructor\n   * @param {number} [options.width] - Width of the resource\n   * @param {number} [options.height] - Height of the resource\n   */\n  constructor(length, options) {\n    const { width, height } = options || {};\n    super(width, height), this.items = [], this.itemDirtyIds = [];\n    for (let i = 0; i < length; i++) {\n      const partTexture = new BaseTexture();\n      this.items.push(partTexture), this.itemDirtyIds.push(-2);\n    }\n    this.length = length, this._load = null, this.baseTexture = null;\n  }\n  /**\n   * Used from ArrayResource and CubeResource constructors.\n   * @param resources - Can be resources, image elements, canvas, etc. ,\n   *  length should be same as constructor length\n   * @param options - Detect options for resources\n   */\n  initFromArray(resources, options) {\n    for (let i = 0; i < this.length; i++)\n      resources[i] && (resources[i].castToBaseTexture ? this.addBaseTextureAt(resources[i].castToBaseTexture(), i) : resources[i] instanceof Resource ? this.addResourceAt(resources[i], i) : this.addResourceAt(autoDetectResource(resources[i], options), i));\n  }\n  /** Destroy this BaseImageResource. */\n  dispose() {\n    for (let i = 0, len = this.length; i < len; i++)\n      this.items[i].destroy();\n    this.items = null, this.itemDirtyIds = null, this._load = null;\n  }\n  /**\n   * Set a resource by ID\n   * @param resource\n   * @param index - Zero-based index of resource to set\n   * @returns - Instance for chaining\n   */\n  addResourceAt(resource, index) {\n    if (!this.items[index])\n      throw new Error(`Index ${index} is out of bounds`);\n    return resource.valid && !this.valid && this.resize(resource.width, resource.height), this.items[index].setResource(resource), this;\n  }\n  /**\n   * Set the parent base texture.\n   * @param baseTexture\n   */\n  bind(baseTexture) {\n    if (this.baseTexture !== null)\n      throw new Error(\"Only one base texture per TextureArray is allowed\");\n    super.bind(baseTexture);\n    for (let i = 0; i < this.length; i++)\n      this.items[i].parentTextureArray = baseTexture, this.items[i].on(\"update\", baseTexture.update, baseTexture);\n  }\n  /**\n   * Unset the parent base texture.\n   * @param baseTexture\n   */\n  unbind(baseTexture) {\n    super.unbind(baseTexture);\n    for (let i = 0; i < this.length; i++)\n      this.items[i].parentTextureArray = null, this.items[i].off(\"update\", baseTexture.update, baseTexture);\n  }\n  /**\n   * Load all the resources simultaneously\n   * @returns - When load is resolved\n   */\n  load() {\n    if (this._load)\n      return this._load;\n    const promises = this.items.map((item) => item.resource).filter((item) => item).map((item) => item.load());\n    return this._load = Promise.all(promises).then(\n      () => {\n        const { realWidth, realHeight } = this.items[0];\n        return this.resize(realWidth, realHeight), this.update(), Promise.resolve(this);\n      }\n    ), this._load;\n  }\n}\nexport {\n  AbstractMultiResource\n};\n//# sourceMappingURL=AbstractMultiResource.mjs.map\n"],"names":["AbstractMultiResource","Resource","length","options","width","height","i","partTexture","BaseTexture","resources","autoDetectResource","len","resource","index","baseTexture","promises","item","realWidth","realHeight"],"mappings":";;;AAGA,MAAMA,UAA8BC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3C,YAAYC,GAAQC,GAAS;AAC3B,UAAM,EAAE,OAAAC,GAAO,QAAAC,MAAWF,KAAW,CAAA;AACrC,UAAMC,GAAOC,CAAM,GAAG,KAAK,QAAQ,IAAI,KAAK,eAAe;AAC3D,aAASC,IAAI,GAAGA,IAAIJ,GAAQI,KAAK;AAC/B,YAAMC,IAAc,IAAIC;AACxB,WAAK,MAAM,KAAKD,CAAW,GAAG,KAAK,aAAa,KAAK,EAAE;AAAA,IACxD;AACD,SAAK,SAASL,GAAQ,KAAK,QAAQ,MAAM,KAAK,cAAc;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,cAAcO,GAAWN,GAAS;AAChC,aAASG,IAAI,GAAGA,IAAI,KAAK,QAAQA;AAC/B,MAAAG,EAAUH,CAAC,MAAMG,EAAUH,CAAC,EAAE,oBAAoB,KAAK,iBAAiBG,EAAUH,CAAC,EAAE,kBAAmB,GAAEA,CAAC,IAAIG,EAAUH,CAAC,aAAaL,IAAW,KAAK,cAAcQ,EAAUH,CAAC,GAAGA,CAAC,IAAI,KAAK,cAAcI,EAAmBD,EAAUH,CAAC,GAAGH,CAAO,GAAGG,CAAC;AAAA,EAC1P;AAAA;AAAA,EAED,UAAU;AACR,aAASA,IAAI,GAAGK,IAAM,KAAK,QAAQL,IAAIK,GAAKL;AAC1C,WAAK,MAAMA,CAAC,EAAE,QAAO;AACvB,SAAK,QAAQ,MAAM,KAAK,eAAe,MAAM,KAAK,QAAQ;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,cAAcM,GAAUC,GAAO;AAC7B,QAAI,CAAC,KAAK,MAAMA,CAAK;AACnB,YAAM,IAAI,MAAM,SAASA,CAAK,mBAAmB;AACnD,WAAOD,EAAS,SAAS,CAAC,KAAK,SAAS,KAAK,OAAOA,EAAS,OAAOA,EAAS,MAAM,GAAG,KAAK,MAAMC,CAAK,EAAE,YAAYD,CAAQ,GAAG;AAAA,EAChI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAKE,GAAa;AAChB,QAAI,KAAK,gBAAgB;AACvB,YAAM,IAAI,MAAM,mDAAmD;AACrE,UAAM,KAAKA,CAAW;AACtB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC/B,WAAK,MAAM,CAAC,EAAE,qBAAqBA,GAAa,KAAK,MAAM,CAAC,EAAE,GAAG,UAAUA,EAAY,QAAQA,CAAW;AAAA,EAC7G;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,OAAOA,GAAa;AAClB,UAAM,OAAOA,CAAW;AACxB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC/B,WAAK,MAAM,CAAC,EAAE,qBAAqB,MAAM,KAAK,MAAM,CAAC,EAAE,IAAI,UAAUA,EAAY,QAAQA,CAAW;AAAA,EACvG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,OAAO;AACL,QAAI,KAAK;AACP,aAAO,KAAK;AACd,UAAMC,IAAW,KAAK,MAAM,IAAI,CAACC,MAASA,EAAK,QAAQ,EAAE,OAAO,CAACA,MAASA,CAAI,EAAE,IAAI,CAACA,MAASA,EAAK,KAAI,CAAE;AACzG,WAAO,KAAK,QAAQ,QAAQ,IAAID,CAAQ,EAAE;AAAA,MACxC,MAAM;AACJ,cAAM,EAAE,WAAAE,GAAW,YAAAC,EAAU,IAAK,KAAK,MAAM,CAAC;AAC9C,eAAO,KAAK,OAAOD,GAAWC,CAAU,GAAG,KAAK,UAAU,QAAQ,QAAQ,IAAI;AAAA,MAC/E;AAAA,IACP,GAAO,KAAK;AAAA,EACT;AACH;","x_google_ignoreList":[0]}