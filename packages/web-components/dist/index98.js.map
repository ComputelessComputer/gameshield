{"version":3,"file":"index98.js","sources":["../../../node_modules/.pnpm/@pixi+compressed-textures@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3/node_modules/@pixi/compressed-textures/lib/loaders/loadKTX.mjs"],"sourcesContent":["import { LoaderParserPriority, checkExtension, createTexture } from \"@pixi/assets\";\nimport { ExtensionType, settings, MIPMAP_MODES, ALPHA_MODES, utils, BaseTexture, extensions } from \"@pixi/core\";\nimport \"../parsers/index.mjs\";\nimport { parseKTX } from \"../parsers/parseKTX.mjs\";\nconst loadKTX = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  name: \"loadKTX\",\n  test(url) {\n    return checkExtension(url, \".ktx\");\n  },\n  async load(url, asset, loader) {\n    const arrayBuffer = await (await settings.ADAPTER.fetch(url)).arrayBuffer(), { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer), resources = compressed ?? uncompressed, options = {\n      mipmap: MIPMAP_MODES.OFF,\n      alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n      resolution: utils.getResolutionOfUrl(url),\n      ...asset.data\n    }, textures = resources.map((resource) => {\n      resources === uncompressed && Object.assign(options, {\n        type: resource.type,\n        format: resource.format\n      });\n      const res = resource.resource ?? resource, base = new BaseTexture(res, options);\n      return base.ktxKeyValueData = kvData, createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    Array.isArray(texture) ? texture.forEach((t) => t.destroy(!0)) : texture.destroy(!0);\n  }\n};\nextensions.add(loadKTX);\nexport {\n  loadKTX\n};\n//# sourceMappingURL=loadKTX.mjs.map\n"],"names":["loadKTX","ExtensionType","LoaderParserPriority","url","checkExtension","asset","loader","arrayBuffer","settings","compressed","uncompressed","kvData","parseKTX","resources","options","MIPMAP_MODES","ALPHA_MODES","utils.getResolutionOfUrl","textures","resource","res","base","BaseTexture","createTexture","texture","t","extensions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIK,MAACA,IAAU;AAAA,EACd,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,UAAUC,EAAqB;AAAA,EAChC;AAAA,EACD,MAAM;AAAA,EACN,KAAKC,GAAK;AACR,WAAOC,EAAeD,GAAK,MAAM;AAAA,EAClC;AAAA,EACD,MAAM,KAAKA,GAAKE,GAAOC,GAAQ;AAC7B,UAAMC,IAAc,OAAO,MAAMC,EAAS,QAAQ,MAAML,CAAG,GAAG,YAAW,GAAI,EAAE,YAAAM,GAAY,cAAAC,GAAc,QAAAC,EAAM,IAAKC,EAAST,GAAKI,CAAW,GAAGM,IAAYJ,KAAcC,GAAcI,IAAU;AAAA,MAChM,QAAQC,EAAa;AAAA,MACrB,WAAWC,EAAY;AAAA,MACvB,YAAYC,EAAyBd,CAAG;AAAA,MACxC,GAAGE,EAAM;AAAA,IACV,GAAEa,IAAWL,EAAU,IAAI,CAACM,MAAa;AACxC,MAAAN,MAAcH,KAAgB,OAAO,OAAOI,GAAS;AAAA,QACnD,MAAMK,EAAS;AAAA,QACf,QAAQA,EAAS;AAAA,MACzB,CAAO;AACD,YAAMC,IAAMD,EAAS,YAAYA,GAAUE,IAAO,IAAIC,EAAYF,GAAKN,CAAO;AAC9E,aAAOO,EAAK,kBAAkBV,GAAQY,EAAcF,GAAMf,GAAQH,CAAG;AAAA,IAC3E,CAAK;AACD,WAAOe,EAAS,WAAW,IAAIA,EAAS,CAAC,IAAIA;AAAA,EAC9C;AAAA,EACD,OAAOM,GAAS;AACd,UAAM,QAAQA,CAAO,IAAIA,EAAQ,QAAQ,CAACC,MAAMA,EAAE,QAAQ,EAAE,CAAC,IAAID,EAAQ,QAAQ,EAAE;AAAA,EACpF;AACH;AACAE,EAAW,IAAI1B,CAAO;","x_google_ignoreList":[0]}