{"version":3,"file":"index52.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/filters/Filter.mjs"],"sourcesContent":["import { MSAA_QUALITY } from \"@pixi/constants\";\nimport { Program } from \"../shader/Program.mjs\";\nimport { Shader } from \"../shader/Shader.mjs\";\nimport { State } from \"../state/State.mjs\";\nimport defaultFragment from \"./defaultFilter.frag.mjs\";\nimport defaultVertex from \"./defaultFilter.vert.mjs\";\nconst _Filter = class _Filter2 extends Shader {\n  /**\n   * @param vertexSrc - The source of the vertex shader.\n   * @param fragmentSrc - The source of the fragment shader.\n   * @param uniforms - Custom uniforms to use to augment the built-in ones.\n   */\n  constructor(vertexSrc, fragmentSrc, uniforms) {\n    const program = Program.from(\n      vertexSrc || _Filter2.defaultVertexSrc,\n      fragmentSrc || _Filter2.defaultFragmentSrc\n    );\n    super(program, uniforms), this.padding = 0, this.resolution = _Filter2.defaultResolution, this.multisample = _Filter2.defaultMultisample, this.enabled = !0, this.autoFit = !0, this.state = new State();\n  }\n  /**\n   * Applies the filter\n   * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from\n   * @param {PIXI.RenderTexture} input - The input render target.\n   * @param {PIXI.RenderTexture} output - The target to output to.\n   * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.\n   * @param {object} [_currentState] - It's current state of filter.\n   *        There are some useful properties in the currentState :\n   *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n   */\n  apply(filterManager, input, output, clearMode, _currentState) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Sets the blend mode of the filter.\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n  get blendMode() {\n    return this.state.blendMode;\n  }\n  set blendMode(value) {\n    this.state.blendMode = value;\n  }\n  /**\n   * The resolution of the filter. Setting this to be lower will lower the quality but\n   * increase the performance of the filter.\n   * If set to `null` or `0`, the resolution of the current render target is used.\n   * @default PIXI.Filter.defaultResolution\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._resolution = value;\n  }\n  /**\n   * The default vertex shader source\n   * @readonly\n   */\n  static get defaultVertexSrc() {\n    return defaultVertex;\n  }\n  /**\n   * The default fragment shader source\n   * @readonly\n   */\n  static get defaultFragmentSrc() {\n    return defaultFragment;\n  }\n};\n_Filter.defaultResolution = 1, /**\n* Default filter samples for any filter.\n* @static\n* @type {PIXI.MSAA_QUALITY|null}\n* @default PIXI.MSAA_QUALITY.NONE\n*/\n_Filter.defaultMultisample = MSAA_QUALITY.NONE;\nlet Filter = _Filter;\nexport {\n  Filter\n};\n//# sourceMappingURL=Filter.mjs.map\n"],"names":["_Filter","_Filter2","Shader","vertexSrc","fragmentSrc","uniforms","program","Program","State","filterManager","input","output","clearMode","_currentState","value","defaultVertex","defaultFragment","MSAA_QUALITY","Filter"],"mappings":";;;;;;AAMA,MAAMA,IAAU,MAAMC,UAAiBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5C,YAAYC,GAAWC,GAAaC,GAAU;AAC5C,UAAMC,IAAUC,EAAQ;AAAA,MACtBJ,KAAaF,EAAS;AAAA,MACtBG,KAAeH,EAAS;AAAA,IAC9B;AACI,UAAMK,GAASD,CAAQ,GAAG,KAAK,UAAU,GAAG,KAAK,aAAaJ,EAAS,mBAAmB,KAAK,cAAcA,EAAS,oBAAoB,KAAK,UAAU,IAAI,KAAK,UAAU,IAAI,KAAK,QAAQ,IAAIO,EAAK;AAAA,EACvM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,MAAMC,GAAeC,GAAOC,GAAQC,GAAWC,GAAe;AAC5D,IAAAJ,EAAc,YAAY,MAAMC,GAAOC,GAAQC,CAAS;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,YAAY;AACd,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EACD,IAAI,UAAUE,GAAO;AACnB,SAAK,MAAM,YAAYA;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWA,GAAO;AACpB,SAAK,cAAcA;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,WAAW,mBAAmB;AAC5B,WAAOC;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,WAAW,qBAAqB;AAC9B,WAAOC;AAAA,EACR;AACH;AACAhB,EAAQ,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAM5BA,EAAQ,qBAAqBiB,EAAa;AACvC,IAACC,IAASlB;","x_google_ignoreList":[0]}