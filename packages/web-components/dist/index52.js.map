{"version":3,"file":"index52.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/framebuffer/FramebufferSystem.mjs"],"sourcesContent":["import { ENV, BUFFER_BITS, MSAA_QUALITY } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Rectangle } from \"@pixi/math\";\nimport { settings } from \"@pixi/settings\";\nimport { Framebuffer } from \"./Framebuffer.mjs\";\nimport { GLFramebuffer } from \"./GLFramebuffer.mjs\";\nconst tempRectangle = new Rectangle();\nclass FramebufferSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.managedFramebuffers = [], this.unknownFramebuffer = new Framebuffer(10, 10), this.msaaSamples = null;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    this.disposeAll(!0);\n    const gl = this.gl = this.renderer.gl;\n    if (this.CONTEXT_UID = this.renderer.CONTEXT_UID, this.current = this.unknownFramebuffer, this.viewport = new Rectangle(), this.hasMRT = !0, this.writeDepthTexture = !0, this.renderer.context.webGLVersion === 1) {\n      let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers, nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n      settings.PREFER_ENV === ENV.WEBGL_LEGACY && (nativeDrawBuffersExtension = null, nativeDepthTextureExtension = null), nativeDrawBuffersExtension ? gl.drawBuffers = (activeTextures) => nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures) : (this.hasMRT = !1, gl.drawBuffers = () => {\n      }), nativeDepthTextureExtension || (this.writeDepthTexture = !1);\n    } else\n      this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n  }\n  /**\n   * Bind a framebuffer.\n   * @param framebuffer\n   * @param frame - frame, default is framebuffer size\n   * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n   */\n  bind(framebuffer, frame, mipLevel = 0) {\n    const { gl } = this;\n    if (framebuffer) {\n      const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n      this.current !== framebuffer && (this.current = framebuffer, gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer)), fbo.mipLevel !== mipLevel && (framebuffer.dirtyId++, framebuffer.dirtyFormat++, fbo.mipLevel = mipLevel), fbo.dirtyId !== framebuffer.dirtyId && (fbo.dirtyId = framebuffer.dirtyId, fbo.dirtyFormat !== framebuffer.dirtyFormat ? (fbo.dirtyFormat = framebuffer.dirtyFormat, fbo.dirtySize = framebuffer.dirtySize, this.updateFramebuffer(framebuffer, mipLevel)) : fbo.dirtySize !== framebuffer.dirtySize && (fbo.dirtySize = framebuffer.dirtySize, this.resizeFramebuffer(framebuffer)));\n      for (let i = 0; i < framebuffer.colorTextures.length; i++) {\n        const tex = framebuffer.colorTextures[i];\n        this.renderer.texture.unbind(tex.parentTextureArray || tex);\n      }\n      if (framebuffer.depthTexture && this.renderer.texture.unbind(framebuffer.depthTexture), frame) {\n        const mipWidth = frame.width >> mipLevel, mipHeight = frame.height >> mipLevel, scale = mipWidth / frame.width;\n        this.setViewport(\n          frame.x * scale,\n          frame.y * scale,\n          mipWidth,\n          mipHeight\n        );\n      } else {\n        const mipWidth = framebuffer.width >> mipLevel, mipHeight = framebuffer.height >> mipLevel;\n        this.setViewport(0, 0, mipWidth, mipHeight);\n      }\n    } else\n      this.current && (this.current = null, gl.bindFramebuffer(gl.FRAMEBUFFER, null)), frame ? this.setViewport(frame.x, frame.y, frame.width, frame.height) : this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n  }\n  /**\n   * Set the WebGLRenderingContext's viewport.\n   * @param x - X position of viewport\n   * @param y - Y position of viewport\n   * @param width - Width of viewport\n   * @param height - Height of viewport\n   */\n  setViewport(x, y, width, height) {\n    const v = this.viewport;\n    x = Math.round(x), y = Math.round(y), width = Math.round(width), height = Math.round(height), (v.width !== width || v.height !== height || v.x !== x || v.y !== y) && (v.x = x, v.y = y, v.width = width, v.height = height, this.gl.viewport(x, y, width, height));\n  }\n  /**\n   * Get the size of the current width and height. Returns object with `width` and `height` values.\n   * @readonly\n   */\n  get size() {\n    return this.current ? { x: 0, y: 0, width: this.current.width, height: this.current.height } : { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n  }\n  /**\n   * Clear the color of the context\n   * @param r - Red value from 0 to 1\n   * @param g - Green value from 0 to 1\n   * @param b - Blue value from 0 to 1\n   * @param a - Alpha value from 0 to 1\n   * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n   *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n   */\n  clear(r, g, b, a, mask = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH) {\n    const { gl } = this;\n    gl.clearColor(r, g, b, a), gl.clear(mask);\n  }\n  /**\n   * Initialize framebuffer for this context\n   * @protected\n   * @param framebuffer\n   * @returns - created GLFramebuffer\n   */\n  initFramebuffer(framebuffer) {\n    const { gl } = this, fbo = new GLFramebuffer(gl.createFramebuffer());\n    return fbo.multisample = this.detectSamples(framebuffer.multisample), framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo, this.managedFramebuffers.push(framebuffer), framebuffer.disposeRunner.add(this), fbo;\n  }\n  /**\n   * Resize the framebuffer\n   * @param framebuffer\n   * @protected\n   */\n  resizeFramebuffer(framebuffer) {\n    const { gl } = this, fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (fbo.stencil) {\n      gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n      let stencilFormat;\n      this.renderer.context.webGLVersion === 1 ? stencilFormat = gl.DEPTH_STENCIL : framebuffer.depth && framebuffer.stencil ? stencilFormat = gl.DEPTH24_STENCIL8 : framebuffer.depth ? stencilFormat = gl.DEPTH_COMPONENT24 : stencilFormat = gl.STENCIL_INDEX8, fbo.msaaBuffer ? gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        fbo.multisample,\n        stencilFormat,\n        framebuffer.width,\n        framebuffer.height\n      ) : gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, framebuffer.width, framebuffer.height);\n    }\n    const colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    gl.drawBuffers || (count = Math.min(count, 1));\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i], parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0), i === 0 && fbo.msaaBuffer && (gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer), gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        fbo.multisample,\n        parentTexture._glTextures[this.CONTEXT_UID].internalFormat,\n        framebuffer.width,\n        framebuffer.height\n      ));\n    }\n    framebuffer.depthTexture && this.writeDepthTexture && this.renderer.texture.bind(framebuffer.depthTexture, 0);\n  }\n  /**\n   * Update the framebuffer\n   * @param framebuffer\n   * @param mipLevel\n   * @protected\n   */\n  updateFramebuffer(framebuffer, mipLevel) {\n    const { gl } = this, fbo = framebuffer.glFramebuffers[this.CONTEXT_UID], colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    gl.drawBuffers || (count = Math.min(count, 1)), fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer) ? fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer() : fbo.msaaBuffer && (gl.deleteRenderbuffer(fbo.msaaBuffer), fbo.msaaBuffer = null, fbo.blitFramebuffer && (fbo.blitFramebuffer.dispose(), fbo.blitFramebuffer = null));\n    const activeTextures = [];\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i], parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0), i === 0 && fbo.msaaBuffer ? (gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer), gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        fbo.multisample,\n        parentTexture._glTextures[this.CONTEXT_UID].internalFormat,\n        framebuffer.width,\n        framebuffer.height\n      ), gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer)) : (gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0 + i,\n        texture.target,\n        parentTexture._glTextures[this.CONTEXT_UID].texture,\n        mipLevel\n      ), activeTextures.push(gl.COLOR_ATTACHMENT0 + i));\n    }\n    if (activeTextures.length > 1 && gl.drawBuffers(activeTextures), framebuffer.depthTexture && this.writeDepthTexture) {\n      const depthTexture = framebuffer.depthTexture;\n      this.renderer.texture.bind(depthTexture, 0), gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.TEXTURE_2D,\n        depthTexture._glTextures[this.CONTEXT_UID].texture,\n        mipLevel\n      );\n    }\n    if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {\n      fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n      let stencilAttachment, stencilFormat;\n      this.renderer.context.webGLVersion === 1 ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH_STENCIL) : framebuffer.depth && framebuffer.stencil ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH24_STENCIL8) : framebuffer.depth ? (stencilAttachment = gl.DEPTH_ATTACHMENT, stencilFormat = gl.DEPTH_COMPONENT24) : (stencilAttachment = gl.STENCIL_ATTACHMENT, stencilFormat = gl.STENCIL_INDEX8), gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil), fbo.msaaBuffer ? gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        fbo.multisample,\n        stencilFormat,\n        framebuffer.width,\n        framebuffer.height\n      ) : gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, framebuffer.width, framebuffer.height), gl.framebufferRenderbuffer(gl.FRAMEBUFFER, stencilAttachment, gl.RENDERBUFFER, fbo.stencil);\n    } else\n      fbo.stencil && (gl.deleteRenderbuffer(fbo.stencil), fbo.stencil = null);\n  }\n  /**\n   * Returns true if the frame buffer can be multisampled.\n   * @param framebuffer\n   */\n  canMultisampleFramebuffer(framebuffer) {\n    return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n  }\n  /**\n   * Detects number of samples that is not more than a param but as close to it as possible\n   * @param samples - number of samples\n   * @returns - recommended number of samples\n   */\n  detectSamples(samples) {\n    const { msaaSamples } = this;\n    let res = MSAA_QUALITY.NONE;\n    if (samples <= 1 || msaaSamples === null)\n      return res;\n    for (let i = 0; i < msaaSamples.length; i++)\n      if (msaaSamples[i] <= samples) {\n        res = msaaSamples[i];\n        break;\n      }\n    return res === 1 && (res = MSAA_QUALITY.NONE), res;\n  }\n  /**\n   * Only works with WebGL2\n   *\n   * blits framebuffer to another of the same or bigger size\n   * after that target framebuffer is bound\n   *\n   * Fails with WebGL warning if blits multisample framebuffer to different size\n   * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n   * @param sourcePixels - source rectangle in pixels\n   * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n   */\n  blit(framebuffer, sourcePixels, destPixels) {\n    const { current, renderer, gl, CONTEXT_UID } = this;\n    if (renderer.context.webGLVersion !== 2 || !current)\n      return;\n    const fbo = current.glFramebuffers[CONTEXT_UID];\n    if (!fbo)\n      return;\n    if (!framebuffer) {\n      if (!fbo.msaaBuffer)\n        return;\n      const colorTexture = current.colorTextures[0];\n      if (!colorTexture)\n        return;\n      fbo.blitFramebuffer || (fbo.blitFramebuffer = new Framebuffer(current.width, current.height), fbo.blitFramebuffer.addColorTexture(0, colorTexture)), framebuffer = fbo.blitFramebuffer, framebuffer.colorTextures[0] !== colorTexture && (framebuffer.colorTextures[0] = colorTexture, framebuffer.dirtyId++, framebuffer.dirtyFormat++), (framebuffer.width !== current.width || framebuffer.height !== current.height) && (framebuffer.width = current.width, framebuffer.height = current.height, framebuffer.dirtyId++, framebuffer.dirtySize++);\n    }\n    sourcePixels || (sourcePixels = tempRectangle, sourcePixels.width = current.width, sourcePixels.height = current.height), destPixels || (destPixels = sourcePixels);\n    const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n    this.bind(framebuffer), gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer), gl.blitFramebuffer(\n      sourcePixels.left,\n      sourcePixels.top,\n      sourcePixels.right,\n      sourcePixels.bottom,\n      destPixels.left,\n      destPixels.top,\n      destPixels.right,\n      destPixels.bottom,\n      gl.COLOR_BUFFER_BIT,\n      sameSize ? gl.NEAREST : gl.LINEAR\n    ), gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer.glFramebuffers[this.CONTEXT_UID].framebuffer);\n  }\n  /**\n   * Disposes framebuffer.\n   * @param framebuffer - framebuffer that has to be disposed of\n   * @param contextLost - If context was lost, we suppress all delete function calls\n   */\n  disposeFramebuffer(framebuffer, contextLost) {\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID], gl = this.gl;\n    if (!fbo)\n      return;\n    delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const index = this.managedFramebuffers.indexOf(framebuffer);\n    index >= 0 && this.managedFramebuffers.splice(index, 1), framebuffer.disposeRunner.remove(this), contextLost || (gl.deleteFramebuffer(fbo.framebuffer), fbo.msaaBuffer && gl.deleteRenderbuffer(fbo.msaaBuffer), fbo.stencil && gl.deleteRenderbuffer(fbo.stencil)), fbo.blitFramebuffer && this.disposeFramebuffer(fbo.blitFramebuffer, contextLost);\n  }\n  /**\n   * Disposes all framebuffers, but not textures bound to them.\n   * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n   */\n  disposeAll(contextLost) {\n    const list = this.managedFramebuffers;\n    this.managedFramebuffers = [];\n    for (let i = 0; i < list.length; i++)\n      this.disposeFramebuffer(list[i], contextLost);\n  }\n  /**\n   * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n   * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n   *\n   * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n   * @private\n   */\n  forceStencil() {\n    const framebuffer = this.current;\n    if (!framebuffer)\n      return;\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (!fbo || fbo.stencil && framebuffer.stencil)\n      return;\n    framebuffer.stencil = !0;\n    const w = framebuffer.width, h = framebuffer.height, gl = this.gl, stencil = fbo.stencil = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n    let stencilAttachment, stencilFormat;\n    this.renderer.context.webGLVersion === 1 ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH_STENCIL) : framebuffer.depth ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH24_STENCIL8) : (stencilAttachment = gl.STENCIL_ATTACHMENT, stencilFormat = gl.STENCIL_INDEX8), fbo.msaaBuffer ? gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, stencilFormat, w, h) : gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, w, h), gl.framebufferRenderbuffer(gl.FRAMEBUFFER, stencilAttachment, gl.RENDERBUFFER, stencil);\n  }\n  /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n  reset() {\n    this.current = this.unknownFramebuffer, this.viewport = new Rectangle();\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nFramebufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"framebuffer\"\n};\nextensions.add(FramebufferSystem);\nexport {\n  FramebufferSystem\n};\n//# sourceMappingURL=FramebufferSystem.mjs.map\n"],"names":["tempRectangle","Rectangle","FramebufferSystem","renderer","Framebuffer","gl","nativeDrawBuffersExtension","nativeDepthTextureExtension","settings","ENV","activeTextures","framebuffer","frame","mipLevel","fbo","i","tex","mipWidth","mipHeight","scale","x","y","width","height","v","r","g","b","a","mask","BUFFER_BITS","GLFramebuffer","stencilFormat","colorTextures","count","texture","parentTexture","depthTexture","stencilAttachment","samples","msaaSamples","res","MSAA_QUALITY","sourcePixels","destPixels","current","CONTEXT_UID","colorTexture","sameSize","contextLost","index","list","w","h","stencil","ExtensionType","extensions"],"mappings":"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","x_google_ignoreList":[0]}