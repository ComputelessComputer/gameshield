{"version":3,"file":"index70.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/shader/ShaderSystem.mjs"],"sourcesContent":["import { ExtensionType, extensions } from \"@pixi/extensions\";\nimport \"./utils/index.mjs\";\nimport { generateProgram } from \"./utils/generateProgram.mjs\";\nimport { generateUniformBufferSync } from \"./utils/generateUniformBufferSync.mjs\";\nimport { unsafeEvalSupported } from \"./utils/unsafeEvalSupported.mjs\";\nimport { generateUniformsSync } from \"./utils/generateUniformsSync.mjs\";\nlet UID = 0;\nconst defaultSyncData = { textureCount: 0, uboCount: 0 };\nclass ShaderSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this.destroyed = !1, this.renderer = renderer, this.systemCheck(), this.gl = null, this.shader = null, this.program = null, this.cache = {}, this._uboCache = {}, this.id = UID++;\n  }\n  /**\n   * Overrideable function by `@pixi/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  systemCheck() {\n    if (!unsafeEvalSupported())\n      throw new Error(\"Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.\");\n  }\n  contextChange(gl) {\n    this.gl = gl, this.reset();\n  }\n  /**\n   * Changes the current shader to the one given in parameter.\n   * @param shader - the new shader\n   * @param dontSync - false if the shader should automatically sync its uniforms.\n   * @returns the glProgram that belongs to the shader.\n   */\n  bind(shader, dontSync) {\n    shader.disposeRunner.add(this), shader.uniforms.globals = this.renderer.globalUniforms;\n    const program = shader.program, glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n    return this.shader = shader, this.program !== program && (this.program = program, this.gl.useProgram(glProgram.program)), dontSync || (defaultSyncData.textureCount = 0, defaultSyncData.uboCount = 0, this.syncUniformGroup(shader.uniformGroup, defaultSyncData)), glProgram;\n  }\n  /**\n   * Uploads the uniforms values to the currently bound shader.\n   * @param uniforms - the uniforms values that be applied to the current shader\n   */\n  setUniforms(uniforms) {\n    const shader = this.shader.program, glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n    shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n  }\n  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n  /**\n   * Syncs uniforms on the group\n   * @param group - the uniform group to sync\n   * @param syncData - this is data that is passed to the sync function and any nested sync functions\n   */\n  syncUniformGroup(group, syncData) {\n    const glProgram = this.getGlProgram();\n    (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id]) && (glProgram.uniformDirtyGroups[group.id] = group.dirtyId, this.syncUniforms(group, glProgram, syncData));\n  }\n  /**\n   * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n   * @param group\n   * @param glProgram\n   * @param syncData\n   */\n  syncUniforms(group, glProgram, syncData) {\n    (group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group))(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n  }\n  createSyncGroups(group) {\n    const id = this.getSignature(group, this.shader.program.uniformData, \"u\");\n    return this.cache[id] || (this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData)), group.syncUniforms[this.shader.program.id] = this.cache[id], group.syncUniforms[this.shader.program.id];\n  }\n  /**\n   * Syncs uniform buffers\n   * @param group - the uniform buffer group to sync\n   * @param name - the name of the uniform buffer\n   */\n  syncUniformBufferGroup(group, name) {\n    const glProgram = this.getGlProgram();\n    if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id]) {\n      group.dirtyId = 0;\n      const syncFunc = glProgram.uniformGroups[group.id] || this.createSyncBufferGroup(group, glProgram, name);\n      group.buffer.update(), syncFunc(\n        glProgram.uniformData,\n        group.uniforms,\n        this.renderer,\n        defaultSyncData,\n        group.buffer\n      );\n    }\n    this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n  }\n  /**\n   * Will create a function that uploads a uniform buffer using the STD140 standard.\n   * The upload function will then be cached for future calls\n   * If a group is manually managed, then a simple upload function is generated\n   * @param group - the uniform buffer group to sync\n   * @param glProgram - the gl program to attach the uniform bindings to\n   * @param name - the name of the uniform buffer (must exist on the shader)\n   */\n  createSyncBufferGroup(group, glProgram, name) {\n    const { gl } = this.renderer;\n    this.renderer.buffer.bind(group.buffer);\n    const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n    glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount, gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount), this.shader.uniformBindCount++;\n    const id = this.getSignature(group, this.shader.program.uniformData, \"ubo\");\n    let uboData = this._uboCache[id];\n    if (uboData || (uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData)), group.autoManage) {\n      const data = new Float32Array(uboData.size / 4);\n      group.buffer.update(data);\n    }\n    return glProgram.uniformGroups[group.id] = uboData.syncFunc, glProgram.uniformGroups[group.id];\n  }\n  /**\n   * Takes a uniform group and data and generates a unique signature for them.\n   * @param group - The uniform group to get signature of\n   * @param group.uniforms\n   * @param uniformData - Uniform information generated by the shader\n   * @param preFix\n   * @returns Unique signature of the uniform group\n   */\n  getSignature(group, uniformData, preFix) {\n    const uniforms = group.uniforms, strings = [`${preFix}-`];\n    for (const i in uniforms)\n      strings.push(i), uniformData[i] && strings.push(uniformData[i].type);\n    return strings.join(\"-\");\n  }\n  /**\n   * Returns the underlying GLShade rof the currently bound shader.\n   *\n   * This can be handy for when you to have a little more control over the setting of your uniforms.\n   * @returns The glProgram for the currently bound Shader for this context\n   */\n  getGlProgram() {\n    return this.shader ? this.shader.program.glPrograms[this.renderer.CONTEXT_UID] : null;\n  }\n  /**\n   * Generates a glProgram version of the Shader provided.\n   * @param shader - The shader that the glProgram will be based on.\n   * @returns A shiny new glProgram!\n   */\n  generateProgram(shader) {\n    const gl = this.gl, program = shader.program, glProgram = generateProgram(gl, program);\n    return program.glPrograms[this.renderer.CONTEXT_UID] = glProgram, glProgram;\n  }\n  /** Resets ShaderSystem state, does not affect WebGL state. */\n  reset() {\n    this.program = null, this.shader = null;\n  }\n  /**\n   * Disposes shader.\n   * If disposing one equals with current shader, set current as null.\n   * @param shader - Shader object\n   */\n  disposeShader(shader) {\n    this.shader === shader && (this.shader = null);\n  }\n  /** Destroys this System and removes all its textures. */\n  destroy() {\n    this.renderer = null, this.destroyed = !0;\n  }\n}\nShaderSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"shader\"\n};\nextensions.add(ShaderSystem);\nexport {\n  ShaderSystem\n};\n//# sourceMappingURL=ShaderSystem.mjs.map\n"],"names":["UID","defaultSyncData","ShaderSystem","renderer","unsafeEvalSupported","gl","shader","dontSync","program","glProgram","uniforms","group","syncData","id","generateUniformsSync","name","syncFunc","uniformBlockIndex","uboData","generateUniformBufferSync","data","uniformData","preFix","strings","generateProgram","ExtensionType","extensions"],"mappings":"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","x_google_ignoreList":[0]}