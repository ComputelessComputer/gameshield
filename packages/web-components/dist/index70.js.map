{"version":3,"file":"index70.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/state/StateSystem.mjs"],"sourcesContent":["import { BLEND_MODES } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { State } from \"./State.mjs\";\nimport { mapWebGLBlendModesToPixi } from \"./utils/mapWebGLBlendModesToPixi.mjs\";\nconst BLEND = 0, OFFSET = 1, CULLING = 2, DEPTH_TEST = 3, WINDING = 4, DEPTH_MASK = 5, _StateSystem = class _StateSystem2 {\n  constructor() {\n    this.gl = null, this.stateId = 0, this.polygonOffset = 0, this.blendMode = BLEND_MODES.NONE, this._blendEq = !1, this.map = [], this.map[BLEND] = this.setBlend, this.map[OFFSET] = this.setOffset, this.map[CULLING] = this.setCullFace, this.map[DEPTH_TEST] = this.setDepthTest, this.map[WINDING] = this.setFrontFace, this.map[DEPTH_MASK] = this.setDepthMask, this.checks = [], this.defaultState = new State(), this.defaultState.blend = !0;\n  }\n  contextChange(gl) {\n    this.gl = gl, this.blendModes = mapWebGLBlendModesToPixi(gl), this.set(this.defaultState), this.reset();\n  }\n  /**\n   * Sets the current state\n   * @param {*} state - The state to set.\n   */\n  set(state) {\n    if (state = state || this.defaultState, this.stateId !== state.data) {\n      let diff = this.stateId ^ state.data, i = 0;\n      for (; diff; )\n        diff & 1 && this.map[i].call(this, !!(state.data & 1 << i)), diff = diff >> 1, i++;\n      this.stateId = state.data;\n    }\n    for (let i = 0; i < this.checks.length; i++)\n      this.checks[i](this, state);\n  }\n  /**\n   * Sets the state, when previous state is unknown.\n   * @param {*} state - The state to set\n   */\n  forceState(state) {\n    state = state || this.defaultState;\n    for (let i = 0; i < this.map.length; i++)\n      this.map[i].call(this, !!(state.data & 1 << i));\n    for (let i = 0; i < this.checks.length; i++)\n      this.checks[i](this, state);\n    this.stateId = state.data;\n  }\n  /**\n   * Sets whether to enable or disable blending.\n   * @param value - Turn on or off WebGl blending.\n   */\n  setBlend(value) {\n    this.updateCheck(_StateSystem2.checkBlendMode, value), this.gl[value ? \"enable\" : \"disable\"](this.gl.BLEND);\n  }\n  /**\n   * Sets whether to enable or disable polygon offset fill.\n   * @param value - Turn on or off webgl polygon offset testing.\n   */\n  setOffset(value) {\n    this.updateCheck(_StateSystem2.checkPolygonOffset, value), this.gl[value ? \"enable\" : \"disable\"](this.gl.POLYGON_OFFSET_FILL);\n  }\n  /**\n   * Sets whether to enable or disable depth test.\n   * @param value - Turn on or off webgl depth testing.\n   */\n  setDepthTest(value) {\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.DEPTH_TEST);\n  }\n  /**\n   * Sets whether to enable or disable depth mask.\n   * @param value - Turn on or off webgl depth mask.\n   */\n  setDepthMask(value) {\n    this.gl.depthMask(value);\n  }\n  /**\n   * Sets whether to enable or disable cull face.\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n  setCullFace(value) {\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.CULL_FACE);\n  }\n  /**\n   * Sets the gl front face.\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n  setFrontFace(value) {\n    this.gl.frontFace(this.gl[value ? \"CW\" : \"CCW\"]);\n  }\n  /**\n   * Sets the blend mode.\n   * @param {number} value - The blend mode to set to.\n   */\n  setBlendMode(value) {\n    if (value === this.blendMode)\n      return;\n    this.blendMode = value;\n    const mode = this.blendModes[value], gl = this.gl;\n    mode.length === 2 ? gl.blendFunc(mode[0], mode[1]) : gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]), mode.length === 6 ? (this._blendEq = !0, gl.blendEquationSeparate(mode[4], mode[5])) : this._blendEq && (this._blendEq = !1, gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD));\n  }\n  /**\n   * Sets the polygon offset.\n   * @param {number} value - the polygon offset\n   * @param {number} scale - the polygon offset scale\n   */\n  setPolygonOffset(value, scale) {\n    this.gl.polygonOffset(value, scale);\n  }\n  // used\n  /** Resets all the logic and disables the VAOs. */\n  reset() {\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, !1), this.forceState(this.defaultState), this._blendEq = !0, this.blendMode = -1, this.setBlendMode(0);\n  }\n  /**\n   * Checks to see which updates should be checked based on which settings have been activated.\n   *\n   * For example, if blend is enabled then we should check the blend modes each time the state is changed\n   * or if polygon fill is activated then we need to check if the polygon offset changes.\n   * The idea is that we only check what we have too.\n   * @param func - the checking function to add or remove\n   * @param value - should the check function be added or removed.\n   */\n  updateCheck(func, value) {\n    const index = this.checks.indexOf(func);\n    value && index === -1 ? this.checks.push(func) : !value && index !== -1 && this.checks.splice(index, 1);\n  }\n  /**\n   * A private little wrapper function that we call to check the blend mode.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static checkBlendMode(system, state) {\n    system.setBlendMode(state.blendMode);\n  }\n  /**\n   * A private little wrapper function that we call to check the polygon offset.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static checkPolygonOffset(system, state) {\n    system.setPolygonOffset(1, state.polygonOffset);\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.gl = null;\n  }\n};\n_StateSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"state\"\n};\nlet StateSystem = _StateSystem;\nextensions.add(StateSystem);\nexport {\n  StateSystem\n};\n//# sourceMappingURL=StateSystem.mjs.map\n"],"names":["BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_StateSystem","_StateSystem2","BLEND_MODES","State","gl","mapWebGLBlendModesToPixi","state","diff","i","value","mode","scale","func","index","system","ExtensionType","StateSystem","extensions"],"mappings":"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","x_google_ignoreList":[0]}