{"version":3,"file":"index69.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/state/State.mjs"],"sourcesContent":["import { BLEND_MODES } from \"@pixi/constants\";\nconst BLEND = 0, OFFSET = 1, CULLING = 2, DEPTH_TEST = 3, WINDING = 4, DEPTH_MASK = 5;\nclass State {\n  constructor() {\n    this.data = 0, this.blendMode = BLEND_MODES.NORMAL, this.polygonOffset = 0, this.blend = !0, this.depthMask = !0;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    !!(this.data & 1 << BLEND) !== value && (this.data ^= 1 << BLEND);\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    !!(this.data & 1 << OFFSET) !== value && (this.data ^= 1 << OFFSET);\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    !!(this.data & 1 << CULLING) !== value && (this.data ^= 1 << CULLING);\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    !!(this.data & 1 << DEPTH_TEST) !== value && (this.data ^= 1 << DEPTH_TEST);\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    !!(this.data & 1 << DEPTH_MASK) !== value && (this.data ^= 1 << DEPTH_MASK);\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    !!(this.data & 1 << WINDING) !== value && (this.data ^= 1 << WINDING);\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== BLEND_MODES.NONE, this._blendMode = value;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value, this._polygonOffset = value;\n  }\n  static for2d() {\n    const state = new State();\n    return state.depthTest = !1, state.blend = !0, state;\n  }\n}\nState.prototype.toString = function() {\n  return `[@pixi/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n};\nexport {\n  State\n};\n//# sourceMappingURL=State.mjs.map\n"],"names":["BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","State","BLEND_MODES","value","state"],"mappings":";AACA,MAAMA,IAAQ,GAAGC,IAAS,GAAGC,IAAU,GAAGC,IAAa,GAAGC,IAAU,GAAGC,IAAa;AACpF,MAAMC,EAAM;AAAA,EACV,cAAc;AACZ,SAAK,OAAO,GAAG,KAAK,YAAYC,EAAY,QAAQ,KAAK,gBAAgB,GAAG,KAAK,QAAQ,IAAI,KAAK,YAAY;AAAA,EAC/G;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,QAAQ;AACV,WAAO,CAAC,EAAE,KAAK,OAAO,KAAKP;AAAA,EAC5B;AAAA,EACD,IAAI,MAAMQ,GAAO;AACf,KAAC,EAAE,KAAK,OAAO,KAAKR,OAAWQ,MAAU,KAAK,QAAQ,KAAKR;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,UAAU;AACZ,WAAO,CAAC,EAAE,KAAK,OAAO,KAAKC;AAAA,EAC5B;AAAA,EACD,IAAI,QAAQO,GAAO;AACjB,KAAC,EAAE,KAAK,OAAO,KAAKP,OAAYO,MAAU,KAAK,QAAQ,KAAKP;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,UAAU;AACZ,WAAO,CAAC,EAAE,KAAK,OAAO,KAAKC;AAAA,EAC5B;AAAA,EACD,IAAI,QAAQM,GAAO;AACjB,KAAC,EAAE,KAAK,OAAO,KAAKN,OAAaM,MAAU,KAAK,QAAQ,KAAKN;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,YAAY;AACd,WAAO,CAAC,EAAE,KAAK,OAAO,KAAKC;AAAA,EAC5B;AAAA,EACD,IAAI,UAAUK,GAAO;AACnB,KAAC,EAAE,KAAK,OAAO,KAAKL,OAAgBK,MAAU,KAAK,QAAQ,KAAKL;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,YAAY;AACd,WAAO,CAAC,EAAE,KAAK,OAAO,KAAKE;AAAA,EAC5B;AAAA,EACD,IAAI,UAAUG,GAAO;AACnB,KAAC,EAAE,KAAK,OAAO,KAAKH,OAAgBG,MAAU,KAAK,QAAQ,KAAKH;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,qBAAqB;AACvB,WAAO,CAAC,EAAE,KAAK,OAAO,KAAKD;AAAA,EAC5B;AAAA,EACD,IAAI,mBAAmBI,GAAO;AAC5B,KAAC,EAAE,KAAK,OAAO,KAAKJ,OAAaI,MAAU,KAAK,QAAQ,KAAKJ;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,UAAUI,GAAO;AACnB,SAAK,QAAQA,MAAUD,EAAY,MAAM,KAAK,aAAaC;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,cAAcA,GAAO;AACvB,SAAK,UAAU,CAAC,CAACA,GAAO,KAAK,iBAAiBA;AAAA,EAC/C;AAAA,EACD,OAAO,QAAQ;AACb,UAAMC,IAAQ,IAAIH;AAClB,WAAOG,EAAM,YAAY,IAAIA,EAAM,QAAQ,IAAIA;AAAA,EAChD;AACH;AACAH,EAAM,UAAU,WAAW,WAAW;AACpC,SAAO,+BAA+B,KAAK,SAAS,uBAAuB,KAAK,kBAAkB,YAAY,KAAK,OAAO,cAAc,KAAK,SAAS,kBAAkB,KAAK,aAAa;AAC5L;","x_google_ignoreList":[0]}