{"version":3,"file":"index324.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs"],"sourcesContent":["import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass CanvasSource extends TextureSource {\n  constructor(options) {\n    if (!options.resource) {\n      options.resource = DOMAdapter.get().createCanvas();\n    }\n    if (!options.width) {\n      options.width = options.resource.width;\n      if (!options.autoDensity) {\n        options.width /= options.resolution;\n      }\n    }\n    if (!options.height) {\n      options.height = options.resource.height;\n      if (!options.autoDensity) {\n        options.height /= options.resolution;\n      }\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoDensity = options.autoDensity;\n    this.resizeCanvas();\n    this.transparent = !!options.transparent;\n  }\n  resizeCanvas() {\n    if (this.autoDensity) {\n      this.resource.style.width = `${this.width}px`;\n      this.resource.style.height = `${this.height}px`;\n    }\n    if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight) {\n      this.resource.width = this.pixelWidth;\n      this.resource.height = this.pixelHeight;\n    }\n  }\n  resize(width = this.width, height = this.height, resolution = this._resolution) {\n    const didResize = super.resize(width, height, resolution);\n    if (didResize) {\n      this.resizeCanvas();\n    }\n    return didResize;\n  }\n  static test(resource) {\n    return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement || globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas;\n  }\n  /**\n   * Returns the 2D rendering context for the canvas.\n   * Caches the context after creating it.\n   * @returns The 2D rendering context of the canvas.\n   */\n  get context2D() {\n    return this._context2D || (this._context2D = this.resource.getContext(\"2d\"));\n  }\n}\nCanvasSource.extension = ExtensionType.TextureSource;\n\nexport { CanvasSource };\n//# sourceMappingURL=CanvasSource.mjs.map\n"],"names":["CanvasSource","TextureSource","options","DOMAdapter","width","height","resolution","didResize","resource","ExtensionType"],"mappings":";;;AAKA,MAAMA,UAAqBC,EAAc;AAAA,EACvC,YAAYC,GAAS;AACnB,IAAKA,EAAQ,aACXA,EAAQ,WAAWC,EAAW,IAAK,EAAC,aAAY,IAE7CD,EAAQ,UACXA,EAAQ,QAAQA,EAAQ,SAAS,OAC5BA,EAAQ,gBACXA,EAAQ,SAASA,EAAQ,cAGxBA,EAAQ,WACXA,EAAQ,SAASA,EAAQ,SAAS,QAC7BA,EAAQ,gBACXA,EAAQ,UAAUA,EAAQ,cAG9B,MAAMA,CAAO,GACb,KAAK,iBAAiB,SACtB,KAAK,cAAcA,EAAQ,aAC3B,KAAK,aAAY,GACjB,KAAK,cAAc,CAAC,CAACA,EAAQ;AAAA,EAC9B;AAAA,EACD,eAAe;AACb,IAAI,KAAK,gBACP,KAAK,SAAS,MAAM,QAAQ,GAAG,KAAK,KAAK,MACzC,KAAK,SAAS,MAAM,SAAS,GAAG,KAAK,MAAM,QAEzC,KAAK,SAAS,UAAU,KAAK,cAAc,KAAK,SAAS,WAAW,KAAK,iBAC3E,KAAK,SAAS,QAAQ,KAAK,YAC3B,KAAK,SAAS,SAAS,KAAK;AAAA,EAE/B;AAAA,EACD,OAAOE,IAAQ,KAAK,OAAOC,IAAS,KAAK,QAAQC,IAAa,KAAK,aAAa;AAC9E,UAAMC,IAAY,MAAM,OAAOH,GAAOC,GAAQC,CAAU;AACxD,WAAIC,KACF,KAAK,aAAY,GAEZA;AAAA,EACR;AAAA,EACD,OAAO,KAAKC,GAAU;AACpB,WAAO,WAAW,qBAAqBA,aAAoB,qBAAqB,WAAW,mBAAmBA,aAAoB;AAAA,EACnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,YAAY;AACd,WAAO,KAAK,eAAe,KAAK,aAAa,KAAK,SAAS,WAAW,IAAI;AAAA,EAC3E;AACH;AACAR,EAAa,YAAYS,EAAc;","x_google_ignoreList":[0]}