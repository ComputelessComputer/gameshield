{"version":3,"file":"index353.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/assets/loader/parsers/textures/loadTextures.mjs"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { getResolutionOfUrl } from '../../../../utils/network/getResolutionOfUrl.mjs';\nimport { checkDataUrl } from '../../../utils/checkDataUrl.mjs';\nimport { checkExtension } from '../../../utils/checkExtension.mjs';\nimport { WorkerManager } from '../../workers/WorkerManager.mjs';\nimport { LoaderParserPriority } from '../LoaderParser.mjs';\nimport { createTexture } from './utils/createTexture.mjs';\n\n\"use strict\";\nconst validImageExtensions = [\".jpeg\", \".jpg\", \".png\", \".webp\", \".avif\"];\nconst validImageMIMEs = [\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/webp\",\n  \"image/avif\"\n];\nasync function loadImageBitmap(url, asset) {\n  const response = await DOMAdapter.get().fetch(url);\n  if (!response.ok) {\n    throw new Error(`[loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n  }\n  const imageBlob = await response.blob();\n  return asset?.data?.alphaMode === \"premultiplied-alpha\" ? createImageBitmap(imageBlob, { premultiplyAlpha: \"none\" }) : createImageBitmap(imageBlob);\n}\nconst loadTextures = {\n  name: \"loadTextures\",\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High,\n    name: \"loadTextures\"\n  },\n  config: {\n    preferWorkers: true,\n    preferCreateImageBitmap: true,\n    crossOrigin: \"anonymous\"\n  },\n  test(url) {\n    return checkDataUrl(url, validImageMIMEs) || checkExtension(url, validImageExtensions);\n  },\n  async load(url, asset, loader) {\n    let src = null;\n    if (globalThis.createImageBitmap && this.config.preferCreateImageBitmap) {\n      if (this.config.preferWorkers && await WorkerManager.isImageBitmapSupported()) {\n        src = await WorkerManager.loadImageBitmap(url, asset);\n      } else {\n        src = await loadImageBitmap(url, asset);\n      }\n    } else {\n      src = await new Promise((resolve, reject) => {\n        src = new Image();\n        src.crossOrigin = this.config.crossOrigin;\n        src.src = url;\n        if (src.complete) {\n          resolve(src);\n        } else {\n          src.onload = () => {\n            resolve(src);\n          };\n          src.onerror = reject;\n        }\n      });\n    }\n    const base = new ImageSource({\n      resource: src,\n      alphaMode: \"premultiply-alpha-on-upload\",\n      resolution: asset.data?.resolution || getResolutionOfUrl(url),\n      ...asset.data\n    });\n    return createTexture(base, loader, url);\n  },\n  unload(texture) {\n    texture.destroy(true);\n  }\n};\n\nexport { loadImageBitmap, loadTextures };\n//# sourceMappingURL=loadTextures.mjs.map\n"],"names":["validImageExtensions","validImageMIMEs","loadImageBitmap","url","asset","response","DOMAdapter","imageBlob","_a","loadTextures","ExtensionType","LoaderParserPriority","checkDataUrl","checkExtension","loader","src","WorkerManager","resolve","reject","base","ImageSource","getResolutionOfUrl","createTexture","texture"],"mappings":";;;;;;;;;AAWA,MAAMA,IAAuB,CAAC,SAAS,QAAQ,QAAQ,SAAS,OAAO,GACjEC,IAAkB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,eAAeC,EAAgBC,GAAKC,GAAO;;AACzC,QAAMC,IAAW,MAAMC,EAAW,IAAG,EAAG,MAAMH,CAAG;AACjD,MAAI,CAACE,EAAS;AACZ,UAAM,IAAI,MAAM,qCAAqCF,CAAG,KAAKE,EAAS,MAAM,IAAIA,EAAS,UAAU,EAAE;AAEvG,QAAME,IAAY,MAAMF,EAAS;AACjC,WAAOG,IAAAJ,KAAA,gBAAAA,EAAO,SAAP,gBAAAI,EAAa,eAAc,wBAAwB,kBAAkBD,GAAW,EAAE,kBAAkB,OAAQ,CAAA,IAAI,kBAAkBA,CAAS;AACpJ;AACK,MAACE,IAAe;AAAA,EACnB,MAAM;AAAA,EACN,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,UAAUC,EAAqB;AAAA,IAC/B,MAAM;AAAA,EACP;AAAA,EACD,QAAQ;AAAA,IACN,eAAe;AAAA,IACf,yBAAyB;AAAA,IACzB,aAAa;AAAA,EACd;AAAA,EACD,KAAKR,GAAK;AACR,WAAOS,EAAaT,GAAKF,CAAe,KAAKY,EAAeV,GAAKH,CAAoB;AAAA,EACtF;AAAA,EACD,MAAM,KAAKG,GAAKC,GAAOU,GAAQ;;AAC7B,QAAIC,IAAM;AACV,IAAI,WAAW,qBAAqB,KAAK,OAAO,0BAC1C,KAAK,OAAO,iBAAiB,MAAMC,EAAc,uBAAsB,IACzED,IAAM,MAAMC,EAAc,gBAAgBb,GAAKC,CAAK,IAEpDW,IAAM,MAAMb,EAAgBC,GAAKC,CAAK,IAGxCW,IAAM,MAAM,IAAI,QAAQ,CAACE,GAASC,MAAW;AAC3C,MAAAH,IAAM,IAAI,SACVA,EAAI,cAAc,KAAK,OAAO,aAC9BA,EAAI,MAAMZ,GACNY,EAAI,WACNE,EAAQF,CAAG,KAEXA,EAAI,SAAS,MAAM;AACjB,QAAAE,EAAQF,CAAG;AAAA,MACvB,GACUA,EAAI,UAAUG;AAAA,IAExB,CAAO;AAEH,UAAMC,IAAO,IAAIC,EAAY;AAAA,MAC3B,UAAUL;AAAA,MACV,WAAW;AAAA,MACX,cAAYP,IAAAJ,EAAM,SAAN,gBAAAI,EAAY,eAAca,EAAmBlB,CAAG;AAAA,MAC5D,GAAGC,EAAM;AAAA,IACf,CAAK;AACD,WAAOkB,EAAcH,GAAML,GAAQX,CAAG;AAAA,EACvC;AAAA,EACD,OAAOoB,GAAS;AACd,IAAAA,EAAQ,QAAQ,EAAI;AAAA,EACrB;AACH;","x_google_ignoreList":[0]}