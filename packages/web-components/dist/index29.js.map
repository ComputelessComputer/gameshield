{"version":3,"file":"index29.js","sources":["../../../node_modules/.pnpm/@pixi+math@7.4.3/node_modules/@pixi/math/lib/shapes/RoundedRectangle.mjs"],"sourcesContent":["import { SHAPES } from \"../const.mjs\";\nclass RoundedRectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0, radius = 20) {\n    this.x = x, this.y = y, this.width = width, this.height = height, this.radius = radius, this.type = SHAPES.RREC;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0)\n      return !1;\n    if (x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height) {\n      const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n      if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius)\n        return !0;\n      let dx = x - (this.x + radius), dy = y - (this.y + radius);\n      const radius2 = radius * radius;\n      if (dx * dx + dy * dy <= radius2 || (dx = x - (this.x + this.width - radius), dx * dx + dy * dy <= radius2) || (dy = y - (this.y + this.height - radius), dx * dx + dy * dy <= radius2) || (dx = x - (this.x + radius), dx * dx + dy * dy <= radius2))\n        return !0;\n    }\n    return !1;\n  }\n}\nRoundedRectangle.prototype.toString = function() {\n  return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n};\nexport {\n  RoundedRectangle\n};\n//# sourceMappingURL=RoundedRectangle.mjs.map\n"],"names":["RoundedRectangle","x","y","width","height","radius","SHAPES","dx","dy","radius2"],"mappings":";AACA,MAAMA,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,YAAYC,IAAI,GAAGC,IAAI,GAAGC,IAAQ,GAAGC,IAAS,GAAGC,IAAS,IAAI;AAC5D,SAAK,IAAIJ,GAAG,KAAK,IAAIC,GAAG,KAAK,QAAQC,GAAO,KAAK,SAASC,GAAQ,KAAK,SAASC,GAAQ,KAAK,OAAOC,EAAO;AAAA,EAC5G;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,WAAO,IAAIN,EAAiB,KAAK,GAAG,KAAK,GAAG,KAAK,OAAO,KAAK,QAAQ,KAAK,MAAM;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAASC,GAAGC,GAAG;AACb,QAAI,KAAK,SAAS,KAAK,KAAK,UAAU;AACpC,aAAO;AACT,QAAID,KAAK,KAAK,KAAKA,KAAK,KAAK,IAAI,KAAK,SAASC,KAAK,KAAK,KAAKA,KAAK,KAAK,IAAI,KAAK,QAAQ;AACvF,YAAMG,IAAS,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,OAAO,KAAK,MAAM,IAAI,CAAC,CAAC;AACvF,UAAIH,KAAK,KAAK,IAAIG,KAAUH,KAAK,KAAK,IAAI,KAAK,SAASG,KAAUJ,KAAK,KAAK,IAAII,KAAUJ,KAAK,KAAK,IAAI,KAAK,QAAQI;AACnH,eAAO;AACT,UAAIE,IAAKN,KAAK,KAAK,IAAII,IAASG,IAAKN,KAAK,KAAK,IAAIG;AACnD,YAAMI,IAAUJ,IAASA;AACzB,UAAIE,IAAKA,IAAKC,IAAKA,KAAMC,MAAYF,IAAKN,KAAK,KAAK,IAAI,KAAK,QAAQI,IAASE,IAAKA,IAAKC,IAAKA,KAAMC,OAAaD,IAAKN,KAAK,KAAK,IAAI,KAAK,SAASG,IAASE,IAAKA,IAAKC,IAAKA,KAAMC,OAAaF,IAAKN,KAAK,KAAK,IAAII,IAASE,IAAKA,IAAKC,IAAKA,KAAMC;AAC3O,eAAO;AAAA,IACV;AACD,WAAO;AAAA,EACR;AACH;AACAT,EAAiB,UAAU,WAAW,WAAW;AAC/C,SAAO,kCAAkC,KAAK,CAAC,MAAM,KAAK,CAAC,SAAS,KAAK,KAAK,WAAW,KAAK,MAAM,WAAW,KAAK,MAAM;AAC5H;","x_google_ignoreList":[0]}