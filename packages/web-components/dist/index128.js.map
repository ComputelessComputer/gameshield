{"version":3,"file":"index128.js","sources":["../../../node_modules/.pnpm/@pixi+text-html@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3__@pixi+spri_e9b7c0d77278afb72d362574a9013bd1/node_modules/@pixi/text-html/lib/HTMLTextStyle.mjs"],"sourcesContent":["import { settings, utils } from \"@pixi/core\";\nimport { TextStyle } from \"@pixi/text\";\nconst _HTMLTextStyle = class _HTMLTextStyle2 extends TextStyle {\n  constructor() {\n    super(...arguments), this._fonts = [], this._overrides = [], this._stylesheet = \"\", this.fontsDirty = !1;\n  }\n  /**\n   * Convert a TextStyle to HTMLTextStyle\n   * @param originalStyle\n   * @example\n   * import {TextStyle } from 'pixi.js';\n   * import {HTMLTextStyle} from '@pixi/text-html';\n   * const style = new TextStyle();\n   * const htmlStyle = HTMLTextStyle.from(style);\n   */\n  static from(originalStyle) {\n    return new _HTMLTextStyle2(\n      Object.keys(_HTMLTextStyle2.defaultOptions).reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop] }), {})\n    );\n  }\n  /** Clear the current font */\n  cleanFonts() {\n    this._fonts.length > 0 && (this._fonts.forEach((font) => {\n      URL.revokeObjectURL(font.src), font.refs--, font.refs === 0 && (font.fontFace && document.fonts.delete(font.fontFace), delete _HTMLTextStyle2.availableFonts[font.originalUrl]);\n    }), this.fontFamily = \"Arial\", this._fonts.length = 0, this.styleID++, this.fontsDirty = !0);\n  }\n  /**\n   * Because of how HTMLText renders, fonts need to be imported\n   * @param url\n   * @param options\n   */\n  loadFont(url, options = {}) {\n    const { availableFonts } = _HTMLTextStyle2;\n    if (availableFonts[url]) {\n      const font = availableFonts[url];\n      return this._fonts.push(font), font.refs++, this.styleID++, this.fontsDirty = !0, Promise.resolve();\n    }\n    return settings.ADAPTER.fetch(url).then((response) => response.blob()).then(async (blob) => new Promise((resolve, reject) => {\n      const src = URL.createObjectURL(blob), reader = new FileReader();\n      reader.onload = () => resolve([src, reader.result]), reader.onerror = reject, reader.readAsDataURL(blob);\n    })).then(async ([src, dataSrc]) => {\n      const font = Object.assign({\n        family: utils.path.basename(url, utils.path.extname(url)),\n        weight: \"normal\",\n        style: \"normal\",\n        display: \"auto\",\n        src,\n        dataSrc,\n        refs: 1,\n        originalUrl: url,\n        fontFace: null\n      }, options);\n      availableFonts[url] = font, this._fonts.push(font), this.styleID++;\n      const fontFace = new FontFace(font.family, `url(${font.src})`, {\n        weight: font.weight,\n        style: font.style,\n        display: font.display\n      });\n      font.fontFace = fontFace, await fontFace.load(), document.fonts.add(fontFace), await document.fonts.ready, this.styleID++, this.fontsDirty = !0;\n    });\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this._overrides.includes(v));\n    toAdd.length > 0 && (this._overrides.push(...toAdd), this.styleID++);\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this._overrides.includes(v));\n    toRemove.length > 0 && (this._overrides = this._overrides.filter((v) => !toRemove.includes(v)), this.styleID++);\n  }\n  /**\n   * Internally converts all of the style properties into CSS equivalents.\n   * @param scale\n   * @returns The CSS style string, for setting `style` property of root HTMLElement.\n   */\n  toCSS(scale) {\n    return [\n      `transform: scale(${scale})`,\n      \"transform-origin: top left\",\n      \"display: inline-block\",\n      `color: ${this.normalizeColor(this.fill)}`,\n      `font-size: ${this.fontSize}px`,\n      `font-family: ${this.fontFamily}`,\n      `font-weight: ${this.fontWeight}`,\n      `font-style: ${this.fontStyle}`,\n      `font-variant: ${this.fontVariant}`,\n      `letter-spacing: ${this.letterSpacing}px`,\n      `text-align: ${this.align}`,\n      `padding: ${this.padding}px`,\n      `white-space: ${this.whiteSpace}`,\n      ...this.lineHeight ? [`line-height: ${this.lineHeight}px`] : [],\n      ...this.wordWrap ? [\n        `word-wrap: ${this.breakWords ? \"break-all\" : \"break-word\"}`,\n        `max-width: ${this.wordWrapWidth}px`\n      ] : [],\n      ...this.strokeThickness ? [\n        `-webkit-text-stroke-width: ${this.strokeThickness}px`,\n        `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n        `text-stroke-width: ${this.strokeThickness}px`,\n        `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n        \"paint-order: stroke\"\n      ] : [],\n      ...this.dropShadow ? [this.dropShadowToCSS()] : [],\n      ...this._overrides\n    ].join(\";\");\n  }\n  /** Get the font CSS styles from the loaded font, If available. */\n  toGlobalCSS() {\n    return this._fonts.reduce((result, font) => `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style};\n                font-display: ${font.display};\n            }`, this._stylesheet);\n  }\n  /** Internal stylesheet contents, useful for creating rules for rendering */\n  get stylesheet() {\n    return this._stylesheet;\n  }\n  set stylesheet(value) {\n    this._stylesheet !== value && (this._stylesheet = value, this.styleID++);\n  }\n  /**\n   * Convert numerical colors into hex-strings\n   * @param color\n   */\n  normalizeColor(color) {\n    return Array.isArray(color) && (color = utils.rgb2hex(color)), typeof color == \"number\" ? utils.hex2string(color) : color;\n  }\n  /** Convert the internal drop-shadow settings to CSS text-shadow */\n  dropShadowToCSS() {\n    let color = this.normalizeColor(this.dropShadowColor);\n    const alpha = this.dropShadowAlpha, x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance), y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n    color.startsWith(\"#\") && alpha < 1 && (color += (alpha * 255 | 0).toString(16).padStart(2, \"0\"));\n    const position = `${x}px ${y}px`;\n    return this.dropShadowBlur > 0 ? `text-shadow: ${position} ${this.dropShadowBlur}px ${color}` : `text-shadow: ${position} ${color}`;\n  }\n  /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n  reset() {\n    Object.assign(this, _HTMLTextStyle2.defaultOptions);\n  }\n  /**\n   * Called after the image is loaded but before drawing to the canvas.\n   * Mostly used to handle Safari's font loading bug.\n   * @ignore\n   */\n  onBeforeDraw() {\n    const { fontsDirty: prevFontsDirty } = this;\n    return this.fontsDirty = !1, this.isSafari && this._fonts.length > 0 && prevFontsDirty ? new Promise((resolve) => setTimeout(resolve, 100)) : Promise.resolve();\n  }\n  /**\n   * Proving that Safari is the new IE\n   * @ignore\n   */\n  get isSafari() {\n    const { userAgent } = settings.ADAPTER.getNavigator();\n    return /^((?!chrome|android).)*safari/i.test(userAgent);\n  }\n  set fillGradientStops(_value) {\n    console.warn(\"[HTMLTextStyle] fillGradientStops is not supported by HTMLText\");\n  }\n  get fillGradientStops() {\n    return super.fillGradientStops;\n  }\n  set fillGradientType(_value) {\n    console.warn(\"[HTMLTextStyle] fillGradientType is not supported by HTMLText\");\n  }\n  get fillGradientType() {\n    return super.fillGradientType;\n  }\n  set miterLimit(_value) {\n    console.warn(\"[HTMLTextStyle] miterLimit is not supported by HTMLText\");\n  }\n  get miterLimit() {\n    return super.miterLimit;\n  }\n  set trim(_value) {\n    console.warn(\"[HTMLTextStyle] trim is not supported by HTMLText\");\n  }\n  get trim() {\n    return super.trim;\n  }\n  set textBaseline(_value) {\n    console.warn(\"[HTMLTextStyle] textBaseline is not supported by HTMLText\");\n  }\n  get textBaseline() {\n    return super.textBaseline;\n  }\n  set leading(_value) {\n    console.warn(\"[HTMLTextStyle] leading is not supported by HTMLText\");\n  }\n  get leading() {\n    return super.leading;\n  }\n  set lineJoin(_value) {\n    console.warn(\"[HTMLTextStyle] lineJoin is not supported by HTMLText\");\n  }\n  get lineJoin() {\n    return super.lineJoin;\n  }\n};\n_HTMLTextStyle.availableFonts = {}, /**\n* List of default options, these are largely the same as TextStyle,\n* with the exception of whiteSpace, which is set to 'normal' by default.\n*/\n_HTMLTextStyle.defaultOptions = {\n  /** Align */\n  align: \"left\",\n  /** Break words */\n  breakWords: !1,\n  /** Drop shadow */\n  dropShadow: !1,\n  /** Drop shadow alpha */\n  dropShadowAlpha: 1,\n  /**\n   * Drop shadow angle\n   * @type {number}\n   * @default Math.PI / 6\n   */\n  dropShadowAngle: Math.PI / 6,\n  /** Drop shadow blur */\n  dropShadowBlur: 0,\n  /** Drop shadow color */\n  dropShadowColor: \"black\",\n  /** Drop shadow distance */\n  dropShadowDistance: 5,\n  /** Fill */\n  fill: \"black\",\n  /** Font family */\n  fontFamily: \"Arial\",\n  /** Font size */\n  fontSize: 26,\n  /** Font style */\n  fontStyle: \"normal\",\n  /** Font variant */\n  fontVariant: \"normal\",\n  /** Font weight */\n  fontWeight: \"normal\",\n  /** Letter spacing */\n  letterSpacing: 0,\n  /** Line height */\n  lineHeight: 0,\n  /** Padding */\n  padding: 0,\n  /** Stroke */\n  stroke: \"black\",\n  /** Stroke thickness */\n  strokeThickness: 0,\n  /** White space */\n  whiteSpace: \"normal\",\n  /** Word wrap */\n  wordWrap: !1,\n  /** Word wrap width */\n  wordWrapWidth: 100\n};\nlet HTMLTextStyle = _HTMLTextStyle;\nexport {\n  HTMLTextStyle\n};\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n"],"names":["_HTMLTextStyle","_HTMLTextStyle2","TextStyle","originalStyle","obj","prop","font","url","options","availableFonts","settings","response","blob","resolve","reject","src","reader","dataSrc","utils.path","fontFace","value","toAdd","v","toRemove","scale","result","color","utils.rgb2hex","utils.hex2string","alpha","x","y","position","prevFontsDirty","userAgent","_value","HTMLTextStyle"],"mappings":"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","x_google_ignoreList":[0]}