{"version":3,"file":"index91.js","sources":["../../../node_modules/.pnpm/@pixi+assets@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/assets/lib/loader/parsers/textures/loadVideo.mjs"],"sourcesContent":["import { ExtensionType, settings, VideoResource, BaseTexture, utils, extensions } from \"@pixi/core\";\nimport { checkDataUrl } from \"../../../utils/checkDataUrl.mjs\";\nimport { checkExtension } from \"../../../utils/checkExtension.mjs\";\nimport { LoaderParserPriority } from \"../LoaderParser.mjs\";\nimport { createTexture } from \"./utils/createTexture.mjs\";\nconst validVideoExtensions = [\".mp4\", \".m4v\", \".webm\", \".ogv\"], validVideoMIMEs = [\n  \"video/mp4\",\n  \"video/webm\",\n  \"video/ogg\"\n], loadVideo = {\n  name: \"loadVideo\",\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  config: {\n    defaultAutoPlay: !0,\n    defaultUpdateFPS: 0,\n    defaultLoop: !1,\n    defaultMuted: !1,\n    defaultPlaysinline: !0\n  },\n  test(url) {\n    return checkDataUrl(url, validVideoMIMEs) || checkExtension(url, validVideoExtensions);\n  },\n  async load(url, loadAsset, loader) {\n    let texture;\n    const blob = await (await settings.ADAPTER.fetch(url)).blob(), blobURL = URL.createObjectURL(blob);\n    try {\n      const options = {\n        autoPlay: this.config.defaultAutoPlay,\n        updateFPS: this.config.defaultUpdateFPS,\n        loop: this.config.defaultLoop,\n        muted: this.config.defaultMuted,\n        playsinline: this.config.defaultPlaysinline,\n        ...loadAsset?.data?.resourceOptions,\n        autoLoad: !0\n      }, src = new VideoResource(blobURL, options);\n      await src.load();\n      const base = new BaseTexture(src, {\n        alphaMode: await utils.detectVideoAlphaMode(),\n        resolution: utils.getResolutionOfUrl(url),\n        ...loadAsset?.data\n      });\n      base.resource.src = url, texture = createTexture(base, loader, url), texture.baseTexture.once(\"destroyed\", () => {\n        URL.revokeObjectURL(blobURL);\n      });\n    } catch (e) {\n      throw URL.revokeObjectURL(blobURL), e;\n    }\n    return texture;\n  },\n  unload(texture) {\n    texture.destroy(!0);\n  }\n};\nextensions.add(loadVideo);\nexport {\n  loadVideo\n};\n//# sourceMappingURL=loadVideo.mjs.map\n"],"names":["validVideoExtensions","validVideoMIMEs","loadVideo","ExtensionType","LoaderParserPriority","url","checkDataUrl","checkExtension","loadAsset","loader","texture","blob","settings","blobURL","options","_a","src","VideoResource","base","BaseTexture","utils.detectVideoAlphaMode","utils.getResolutionOfUrl","createTexture","extensions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKK,MAACA,IAAuB,CAAC,QAAQ,QAAQ,SAAS,MAAM,GAAGC,IAAkB;AAAA,EAChF;AAAA,EACA;AAAA,EACA;AACF,GAAGC,IAAY;AAAA,EACb,MAAM;AAAA,EACN,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,UAAUC,EAAqB;AAAA,EAChC;AAAA,EACD,QAAQ;AAAA,IACN,iBAAiB;AAAA,IACjB,kBAAkB;AAAA,IAClB,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,EACrB;AAAA,EACD,KAAKC,GAAK;AACR,WAAOC,EAAaD,GAAKJ,CAAe,KAAKM,EAAeF,GAAKL,CAAoB;AAAA,EACtF;AAAA,EACD,MAAM,KAAKK,GAAKG,GAAWC,GAAQ;;AACjC,QAAIC;AACJ,UAAMC,IAAO,OAAO,MAAMC,EAAS,QAAQ,MAAMP,CAAG,GAAG,KAAM,GAAEQ,IAAU,IAAI,gBAAgBF,CAAI;AACjG,QAAI;AACF,YAAMG,IAAU;AAAA,QACd,UAAU,KAAK,OAAO;AAAA,QACtB,WAAW,KAAK,OAAO;AAAA,QACvB,MAAM,KAAK,OAAO;AAAA,QAClB,OAAO,KAAK,OAAO;AAAA,QACnB,aAAa,KAAK,OAAO;AAAA,QACzB,IAAGC,IAAAP,KAAA,gBAAAA,EAAW,SAAX,gBAAAO,EAAiB;AAAA,QACpB,UAAU;AAAA,MACX,GAAEC,IAAM,IAAIC,EAAcJ,GAASC,CAAO;AAC3C,YAAME,EAAI;AACV,YAAME,IAAO,IAAIC,EAAYH,GAAK;AAAA,QAChC,WAAW,MAAMI,EAA4B;AAAA,QAC7C,YAAYC,EAAyBhB,CAAG;AAAA,QACxC,GAAGG,KAAA,gBAAAA,EAAW;AAAA,MACtB,CAAO;AACD,MAAAU,EAAK,SAAS,MAAMb,GAAKK,IAAUY,EAAcJ,GAAMT,GAAQJ,CAAG,GAAGK,EAAQ,YAAY,KAAK,aAAa,MAAM;AAC/G,YAAI,gBAAgBG,CAAO;AAAA,MACnC,CAAO;AAAA,IACF,SAAQ,GAAG;AACV,YAAM,IAAI,gBAAgBA,CAAO,GAAG;AAAA,IACrC;AACD,WAAOH;AAAA,EACR;AAAA,EACD,OAAOA,GAAS;AACd,IAAAA,EAAQ,QAAQ,EAAE;AAAA,EACnB;AACH;AACAa,EAAW,IAAIrB,CAAS;","x_google_ignoreList":[0]}