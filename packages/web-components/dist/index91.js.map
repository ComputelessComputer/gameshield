{"version":3,"file":"index91.js","sources":["../../../node_modules/.pnpm/@pixi+assets@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/assets/lib/loader/parsers/loadWebFont.mjs"],"sourcesContent":["import { utils, ExtensionType, settings, extensions } from \"@pixi/core\";\nimport { checkDataUrl } from \"../../utils/checkDataUrl.mjs\";\nimport { checkExtension } from \"../../utils/checkExtension.mjs\";\nimport { LoaderParserPriority } from \"./LoaderParser.mjs\";\nconst validWeights = [\n  \"normal\",\n  \"bold\",\n  \"100\",\n  \"200\",\n  \"300\",\n  \"400\",\n  \"500\",\n  \"600\",\n  \"700\",\n  \"800\",\n  \"900\"\n], validFontExtensions = [\".ttf\", \".otf\", \".woff\", \".woff2\"], validFontMIMEs = [\n  \"font/ttf\",\n  \"font/otf\",\n  \"font/woff\",\n  \"font/woff2\"\n], CSS_IDENT_TOKEN_REGEX = /^(--|-?[A-Z_])[0-9A-Z_-]*$/i;\nfunction getFontFamilyName(url) {\n  const ext = utils.path.extname(url), nameTokens = utils.path.basename(url, ext).replace(/(-|_)/g, \" \").toLowerCase().split(\" \").map((word) => word.charAt(0).toUpperCase() + word.slice(1));\n  let valid = nameTokens.length > 0;\n  for (const token of nameTokens)\n    if (!token.match(CSS_IDENT_TOKEN_REGEX)) {\n      valid = !1;\n      break;\n    }\n  let fontFamilyName = nameTokens.join(\" \");\n  return valid || (fontFamilyName = `\"${fontFamilyName.replace(/[\\\\\"]/g, \"\\\\$&\")}\"`), fontFamilyName;\n}\nconst validURICharactersRegex = /^[0-9A-Za-z%:/?#\\[\\]@!\\$&'()\\*\\+,;=\\-._~]*$/;\nfunction encodeURIWhenNeeded(uri) {\n  return validURICharactersRegex.test(uri) ? uri : encodeURI(uri);\n}\nconst loadWebFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Low\n  },\n  name: \"loadWebFont\",\n  test(url) {\n    return checkDataUrl(url, validFontMIMEs) || checkExtension(url, validFontExtensions);\n  },\n  async load(url, options) {\n    const fonts = settings.ADAPTER.getFontFaceSet();\n    if (fonts) {\n      const fontFaces = [], name = options.data?.family ?? getFontFamilyName(url), weights = options.data?.weights?.filter((weight) => validWeights.includes(weight)) ?? [\"normal\"], data = options.data ?? {};\n      for (let i = 0; i < weights.length; i++) {\n        const weight = weights[i], font = new FontFace(name, `url(${encodeURIWhenNeeded(url)})`, {\n          ...data,\n          weight\n        });\n        await font.load(), fonts.add(font), fontFaces.push(font);\n      }\n      return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n    }\n    return console.warn(\"[loadWebFont] FontFace API is not supported. Skipping loading font\"), null;\n  },\n  unload(font) {\n    (Array.isArray(font) ? font : [font]).forEach((t) => settings.ADAPTER.getFontFaceSet().delete(t));\n  }\n};\nextensions.add(loadWebFont);\nexport {\n  getFontFamilyName,\n  loadWebFont\n};\n//# sourceMappingURL=loadWebFont.mjs.map\n"],"names":["validWeights","validFontExtensions","validFontMIMEs","CSS_IDENT_TOKEN_REGEX","getFontFamilyName","url","ext","utils.path","nameTokens","word","valid","token","fontFamilyName","validURICharactersRegex","encodeURIWhenNeeded","uri","loadWebFont","ExtensionType","LoaderParserPriority","checkDataUrl","checkExtension","options","fonts","settings","fontFaces","name","_a","weights","_c","_b","weight","data","i","font","t","extensions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAMA,IAAe;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAGC,IAAsB,CAAC,QAAQ,QAAQ,SAAS,QAAQ,GAAGC,IAAiB;AAAA,EAC7E;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAGC,IAAwB;AAC3B,SAASC,EAAkBC,GAAK;AAC9B,QAAMC,IAAMC,EAAW,QAAQF,CAAG,GAAGG,IAAaD,EAAW,SAASF,GAAKC,CAAG,EAAE,QAAQ,UAAU,GAAG,EAAE,cAAc,MAAM,GAAG,EAAE,IAAI,CAACG,MAASA,EAAK,OAAO,CAAC,EAAE,YAAW,IAAKA,EAAK,MAAM,CAAC,CAAC;AAC1L,MAAIC,IAAQF,EAAW,SAAS;AAChC,aAAWG,KAASH;AAClB,QAAI,CAACG,EAAM,MAAMR,CAAqB,GAAG;AACvC,MAAAO,IAAQ;AACR;AAAA,IACD;AACH,MAAIE,IAAiBJ,EAAW,KAAK,GAAG;AACxC,SAAOE,MAAUE,IAAiB,IAAIA,EAAe,QAAQ,UAAU,MAAM,CAAC,MAAMA;AACtF;AACA,MAAMC,IAA0B;AAChC,SAASC,EAAoBC,GAAK;AAChC,SAAOF,EAAwB,KAAKE,CAAG,IAAIA,IAAM,UAAUA,CAAG;AAChE;AACK,MAACC,IAAc;AAAA,EAClB,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,UAAUC,EAAqB;AAAA,EAChC;AAAA,EACD,MAAM;AAAA,EACN,KAAKb,GAAK;AACR,WAAOc,EAAad,GAAKH,CAAc,KAAKkB,EAAef,GAAKJ,CAAmB;AAAA,EACpF;AAAA,EACD,MAAM,KAAKI,GAAKgB,GAAS;;AACvB,UAAMC,IAAQC,EAAS,QAAQ,eAAc;AAC7C,QAAID,GAAO;AACT,YAAME,IAAY,CAAA,GAAIC,MAAOC,IAAAL,EAAQ,SAAR,gBAAAK,EAAc,WAAUtB,EAAkBC,CAAG,GAAGsB,MAAUC,KAAAC,IAAAR,EAAQ,SAAR,gBAAAQ,EAAc,YAAd,gBAAAD,EAAuB,OAAO,CAACE,MAAW9B,EAAa,SAAS8B,CAAM,OAAM,CAAC,QAAQ,GAAGC,IAAOV,EAAQ,QAAQ,CAAA;AACtM,eAASW,IAAI,GAAGA,IAAIL,EAAQ,QAAQK,KAAK;AACvC,cAAMF,IAASH,EAAQK,CAAC,GAAGC,IAAO,IAAI,SAASR,GAAM,OAAOX,EAAoBT,CAAG,CAAC,KAAK;AAAA,UACvF,GAAG0B;AAAA,UACH,QAAAD;AAAA,QACV,CAAS;AACD,cAAMG,EAAK,KAAM,GAAEX,EAAM,IAAIW,CAAI,GAAGT,EAAU,KAAKS,CAAI;AAAA,MACxD;AACD,aAAOT,EAAU,WAAW,IAAIA,EAAU,CAAC,IAAIA;AAAA,IAChD;AACD,WAAO,QAAQ,KAAK,oEAAoE,GAAG;AAAA,EAC5F;AAAA,EACD,OAAOS,GAAM;AACX,KAAC,MAAM,QAAQA,CAAI,IAAIA,IAAO,CAACA,CAAI,GAAG,QAAQ,CAACC,MAAMX,EAAS,QAAQ,eAAgB,EAAC,OAAOW,CAAC,CAAC;AAAA,EACjG;AACH;AACAC,EAAW,IAAInB,CAAW;","x_google_ignoreList":[0]}