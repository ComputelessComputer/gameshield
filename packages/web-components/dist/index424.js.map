{"version":3,"file":"index424.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/batcher/shared/DefaultBatcher.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Batcher } from './Batcher.mjs';\nimport { BatchGeometry } from './BatchGeometry.mjs';\nimport { DefaultShader } from './DefaultShader.mjs';\n\n\"use strict\";\nlet defaultShader = null;\nconst _DefaultBatcher = class _DefaultBatcher extends Batcher {\n  constructor() {\n    super(...arguments);\n    this.geometry = new BatchGeometry();\n    this.shader = defaultShader || (defaultShader = new DefaultShader(this.maxTextures));\n    this.name = _DefaultBatcher.extension.name;\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    this.vertexSize = 6;\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n   * @param element - The DefaultBatchableMeshElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packAttributes(element, float32View, uint32View, index, textureId) {\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const { positions, uvs } = element;\n    const argb = element.color;\n    const offset = element.attributeOffset;\n    const end = offset + element.attributeSize;\n    for (let i = offset; i < end; i++) {\n      const i2 = i * 2;\n      const x = positions[i2];\n      const y = positions[i2 + 1];\n      float32View[index++] = a * x + c * y + tx;\n      float32View[index++] = d * y + b * x + ty;\n      float32View[index++] = uvs[i2];\n      float32View[index++] = uvs[i2 + 1];\n      uint32View[index++] = argb;\n      uint32View[index++] = textureIdAndRound;\n    }\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n   * @param element - The DefaultBatchableQuadElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packQuadAttributes(element, float32View, uint32View, index, textureId) {\n    const texture = element.texture;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = element.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = element.color;\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n};\n/** @ignore */\n_DefaultBatcher.extension = {\n  type: [\n    ExtensionType.Batcher\n  ],\n  name: \"default\"\n};\nlet DefaultBatcher = _DefaultBatcher;\n\nexport { DefaultBatcher };\n//# sourceMappingURL=DefaultBatcher.mjs.map\n"],"names":["defaultShader","_DefaultBatcher","Batcher","BatchGeometry","DefaultShader","element","float32View","uint32View","index","textureId","textureIdAndRound","wt","a","b","c","d","tx","ty","positions","uvs","argb","offset","end","i","i2","x","y","texture","bounds","w0","w1","h0","h1","ExtensionType","DefaultBatcher"],"mappings":"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","x_google_ignoreList":[0]}