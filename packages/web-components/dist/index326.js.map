{"version":3,"file":"index326.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/VideoSource.mjs"],"sourcesContent":["import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../../../ticker/Ticker.mjs';\nimport { detectVideoAlphaMode } from '../../../../../utils/browser/detectVideoAlphaMode.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nconst _VideoSource = class _VideoSource extends TextureSource {\n  constructor(options) {\n    super(options);\n    // Public\n    /** Whether or not the video is ready to play. */\n    this.isReady = false;\n    /** The upload method for this texture. */\n    this.uploadMethodId = \"video\";\n    options = {\n      ..._VideoSource.defaultOptions,\n      ...options\n    };\n    this._autoUpdate = true;\n    this._isConnectedToTicker = false;\n    this._updateFPS = options.updateFPS || 0;\n    this._msToNextUpdate = 0;\n    this.autoPlay = options.autoPlay !== false;\n    this.alphaMode = options.alphaMode ?? \"premultiply-alpha-on-upload\";\n    this._videoFrameRequestCallback = this._videoFrameRequestCallback.bind(this);\n    this._videoFrameRequestCallbackHandle = null;\n    this._load = null;\n    this._resolve = null;\n    this._reject = null;\n    this._onCanPlay = this._onCanPlay.bind(this);\n    this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n    this._onError = this._onError.bind(this);\n    this._onPlayStart = this._onPlayStart.bind(this);\n    this._onPlayStop = this._onPlayStop.bind(this);\n    this._onSeeked = this._onSeeked.bind(this);\n    if (options.autoLoad !== false) {\n      void this.load();\n    }\n  }\n  /** Update the video frame if the source is not destroyed and meets certain conditions. */\n  updateFrame() {\n    if (this.destroyed) {\n      return;\n    }\n    if (this._updateFPS) {\n      const elapsedMS = Ticker.shared.elapsedMS * this.resource.playbackRate;\n      this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n    }\n    if (!this._updateFPS || this._msToNextUpdate <= 0) {\n      this._msToNextUpdate = this._updateFPS ? Math.floor(1e3 / this._updateFPS) : 0;\n    }\n    if (this.isValid) {\n      this.update();\n    }\n  }\n  /** Callback to update the video frame and potentially request the next frame update. */\n  _videoFrameRequestCallback() {\n    this.updateFrame();\n    if (this.destroyed) {\n      this._videoFrameRequestCallbackHandle = null;\n    } else {\n      this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n        this._videoFrameRequestCallback\n      );\n    }\n  }\n  /**\n   * Checks if the resource has valid dimensions.\n   * @returns {boolean} True if width and height are set, otherwise false.\n   */\n  get isValid() {\n    return !!this.resource.videoWidth && !!this.resource.videoHeight;\n  }\n  /**\n   * Start preloading the video resource.\n   * @returns {Promise<this>} Handle the validate event\n   */\n  async load() {\n    if (this._load) {\n      return this._load;\n    }\n    const source = this.resource;\n    const options = this.options;\n    if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {\n      source.complete = true;\n    }\n    source.addEventListener(\"play\", this._onPlayStart);\n    source.addEventListener(\"pause\", this._onPlayStop);\n    source.addEventListener(\"seeked\", this._onSeeked);\n    if (!this._isSourceReady()) {\n      if (!options.preload) {\n        source.addEventListener(\"canplay\", this._onCanPlay);\n      }\n      source.addEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.addEventListener(\"error\", this._onError, true);\n    } else {\n      this._mediaReady();\n    }\n    this.alphaMode = await detectVideoAlphaMode();\n    this._load = new Promise((resolve, reject) => {\n      if (this.isValid) {\n        resolve(this);\n      } else {\n        this._resolve = resolve;\n        this._reject = reject;\n        if (options.preloadTimeoutMs !== void 0) {\n          this._preloadTimeout = setTimeout(() => {\n            this._onError(new ErrorEvent(`Preload exceeded timeout of ${options.preloadTimeoutMs}ms`));\n          });\n        }\n        source.load();\n      }\n    });\n    return this._load;\n  }\n  /**\n   * Handle video error events.\n   * @param event - The error event\n   */\n  _onError(event) {\n    this.resource.removeEventListener(\"error\", this._onError, true);\n    this.emit(\"error\", event);\n    if (this._reject) {\n      this._reject(event);\n      this._reject = null;\n      this._resolve = null;\n    }\n  }\n  /**\n   * Checks if the underlying source is playing.\n   * @returns True if playing.\n   */\n  _isSourcePlaying() {\n    const source = this.resource;\n    return !source.paused && !source.ended;\n  }\n  /**\n   * Checks if the underlying source is ready for playing.\n   * @returns True if ready.\n   */\n  _isSourceReady() {\n    const source = this.resource;\n    return source.readyState > 2;\n  }\n  /** Runs the update loop when the video is ready to play. */\n  _onPlayStart() {\n    if (!this.isValid) {\n      this._mediaReady();\n    }\n    this._configureAutoUpdate();\n  }\n  /** Stops the update loop when a pause event is triggered. */\n  _onPlayStop() {\n    this._configureAutoUpdate();\n  }\n  /** Handles behavior when the video completes seeking to the current playback position. */\n  _onSeeked() {\n    if (this._autoUpdate && !this._isSourcePlaying()) {\n      this._msToNextUpdate = 0;\n      this.updateFrame();\n      this._msToNextUpdate = 0;\n    }\n  }\n  _onCanPlay() {\n    const source = this.resource;\n    source.removeEventListener(\"canplay\", this._onCanPlay);\n    this._mediaReady();\n  }\n  _onCanPlayThrough() {\n    const source = this.resource;\n    source.removeEventListener(\"canplaythrough\", this._onCanPlay);\n    if (this._preloadTimeout) {\n      clearTimeout(this._preloadTimeout);\n      this._preloadTimeout = void 0;\n    }\n    this._mediaReady();\n  }\n  /** Fired when the video is loaded and ready to play. */\n  _mediaReady() {\n    const source = this.resource;\n    if (this.isValid) {\n      this.isReady = true;\n      this.resize(source.videoWidth, source.videoHeight);\n    }\n    this._msToNextUpdate = 0;\n    this.updateFrame();\n    this._msToNextUpdate = 0;\n    if (this._resolve) {\n      this._resolve(this);\n      this._resolve = null;\n      this._reject = null;\n    }\n    if (this._isSourcePlaying()) {\n      this._onPlayStart();\n    } else if (this.autoPlay) {\n      void this.resource.play();\n    }\n  }\n  /** Cleans up resources and event listeners associated with this texture. */\n  destroy() {\n    this._configureAutoUpdate();\n    const source = this.resource;\n    if (source) {\n      source.removeEventListener(\"play\", this._onPlayStart);\n      source.removeEventListener(\"pause\", this._onPlayStop);\n      source.removeEventListener(\"seeked\", this._onSeeked);\n      source.removeEventListener(\"canplay\", this._onCanPlay);\n      source.removeEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.removeEventListener(\"error\", this._onError, true);\n      source.pause();\n      source.src = \"\";\n      source.load();\n    }\n    super.destroy();\n  }\n  /** Should the base texture automatically update itself, set to true by default. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * How many times a second to update the texture from the video.\n   * Leave at 0 to update at every render.\n   * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n   */\n  get updateFPS() {\n    return this._updateFPS;\n  }\n  set updateFPS(value) {\n    if (value !== this._updateFPS) {\n      this._updateFPS = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * Configures the updating mechanism based on the current state and settings.\n   *\n   * This method decides between using the browser's native video frame callback or a custom ticker\n   * for updating the video frame. It ensures optimal performance and responsiveness\n   * based on the video's state, playback status, and the desired frames-per-second setting.\n   *\n   * - If `_autoUpdate` is enabled and the video source is playing:\n   *   - It will prefer the native video frame callback if available and no specific FPS is set.\n   *   - Otherwise, it will use a custom ticker for manual updates.\n   * - If `_autoUpdate` is disabled or the video isn't playing, any active update mechanisms are halted.\n   */\n  _configureAutoUpdate() {\n    if (this._autoUpdate && this._isSourcePlaying()) {\n      if (!this._updateFPS && this.resource.requestVideoFrameCallback) {\n        if (this._isConnectedToTicker) {\n          Ticker.shared.remove(this.updateFrame, this);\n          this._isConnectedToTicker = false;\n          this._msToNextUpdate = 0;\n        }\n        if (this._videoFrameRequestCallbackHandle === null) {\n          this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n            this._videoFrameRequestCallback\n          );\n        }\n      } else {\n        if (this._videoFrameRequestCallbackHandle !== null) {\n          this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n          this._videoFrameRequestCallbackHandle = null;\n        }\n        if (!this._isConnectedToTicker) {\n          Ticker.shared.add(this.updateFrame, this);\n          this._isConnectedToTicker = true;\n          this._msToNextUpdate = 0;\n        }\n      }\n    } else {\n      if (this._videoFrameRequestCallbackHandle !== null) {\n        this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n        this._videoFrameRequestCallbackHandle = null;\n      }\n      if (this._isConnectedToTicker) {\n        Ticker.shared.remove(this.updateFrame, this);\n        this._isConnectedToTicker = false;\n        this._msToNextUpdate = 0;\n      }\n    }\n  }\n  static test(resource) {\n    return globalThis.HTMLVideoElement && resource instanceof HTMLVideoElement;\n  }\n};\n_VideoSource.extension = ExtensionType.TextureSource;\n/** The default options for video sources. */\n_VideoSource.defaultOptions = {\n  ...TextureSource.defaultOptions,\n  /** If true, the video will start loading immediately. */\n  autoLoad: true,\n  /** If true, the video will start playing as soon as it is loaded. */\n  autoPlay: true,\n  /** The number of times a second to update the texture from the video. Leave at 0 to update at every render. */\n  updateFPS: 0,\n  /** If true, the video will be loaded with the `crossorigin` attribute. */\n  crossorigin: true,\n  /** If true, the video will loop when it ends. */\n  loop: false,\n  /** If true, the video will be muted. */\n  muted: true,\n  /** If true, the video will play inline. */\n  playsinline: true,\n  /** If true, the video will be preloaded. */\n  preload: false\n};\n/**\n * Map of video MIME types that can't be directly derived from file extensions.\n * @readonly\n */\n_VideoSource.MIME_TYPES = {\n  ogv: \"video/ogg\",\n  mov: \"video/quicktime\",\n  m4v: \"video/mp4\"\n};\nlet VideoSource = _VideoSource;\n\nexport { VideoSource };\n//# sourceMappingURL=VideoSource.mjs.map\n"],"names":["_VideoSource","TextureSource","options","elapsedMS","Ticker","source","detectVideoAlphaMode","resolve","reject","event","value","resource","ExtensionType","VideoSource"],"mappings":"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","x_google_ignoreList":[0]}