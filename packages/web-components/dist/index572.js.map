{"version":3,"file":"index572.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs"],"sourcesContent":["import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern.mjs';\n\n\"use strict\";\nconst PRECISION = 1e5;\nfunction getCanvasFillStyle(fillStyle, context, textMetrics, padding = 0) {\n  if (fillStyle.texture === Texture.WHITE && !fillStyle.fill) {\n    return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n  } else if (!fillStyle.fill) {\n    const pattern = context.createPattern(fillStyle.texture.source.resource, \"repeat\");\n    const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n    tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillPattern) {\n    const fillPattern = fillStyle.fill;\n    const pattern = context.createPattern(fillPattern.texture.source.resource, \"repeat\");\n    const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n    tempMatrix.scale(\n      fillPattern.texture.frame.width,\n      fillPattern.texture.frame.height\n    );\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillGradient) {\n    const fillGradient = fillStyle.fill;\n    const isLinear = fillGradient.type === \"linear\";\n    const isLocal = fillGradient.textureSpace === \"local\";\n    let width = 1;\n    let height = 1;\n    if (isLocal && textMetrics) {\n      width = textMetrics.width + padding;\n      height = textMetrics.height + padding;\n    }\n    let gradient;\n    let isNearlyVertical = false;\n    if (isLinear) {\n      const { start, end } = fillGradient;\n      gradient = context.createLinearGradient(\n        start.x * width,\n        start.y * height,\n        end.x * width,\n        end.y * height\n      );\n      isNearlyVertical = Math.abs(end.x - start.x) < Math.abs((end.y - start.y) * 0.1);\n    } else {\n      const { center, innerRadius, outerCenter, outerRadius } = fillGradient;\n      gradient = context.createRadialGradient(\n        center.x * width,\n        center.y * height,\n        innerRadius * width,\n        outerCenter.x * width,\n        outerCenter.y * height,\n        outerRadius * width\n      );\n    }\n    if (isNearlyVertical && isLocal && textMetrics) {\n      const ratio = textMetrics.lineHeight / height;\n      for (let i = 0; i < textMetrics.lines.length; i++) {\n        const start = (i * textMetrics.lineHeight + padding / 2) / height;\n        fillGradient.colorStops.forEach((stop) => {\n          const globalStop = start + stop.offset * ratio;\n          gradient.addColorStop(\n            // fix to 5 decimal places to avoid floating point precision issues\n            Math.floor(globalStop * PRECISION) / PRECISION,\n            Color.shared.setValue(stop.color).toHex()\n          );\n        });\n      }\n    } else {\n      fillGradient.colorStops.forEach((stop) => {\n        gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n      });\n    }\n    return gradient;\n  }\n  warn(\"FillStyle not recognised\", fillStyle);\n  return \"red\";\n}\n\nexport { getCanvasFillStyle };\n//# sourceMappingURL=getCanvasFillStyle.mjs.map\n"],"names":["PRECISION","getCanvasFillStyle","fillStyle","context","textMetrics","padding","Texture","Color","FillPattern","fillPattern","pattern","tempMatrix","Matrix","FillGradient","fillGradient","isLinear","isLocal","width","height","gradient","isNearlyVertical","start","end","center","innerRadius","outerCenter","outerRadius","ratio","i","stop","globalStop","warn"],"mappings":";;;;;;AAQA,MAAMA,IAAY;AAClB,SAASC,EAAmBC,GAAWC,GAASC,GAAaC,IAAU,GAAG;AACxE,MAAIH,EAAU,YAAYI,EAAQ,SAAS,CAACJ,EAAU;AACpD,WAAOK,EAAM,OAAO,SAASL,EAAU,KAAK,EAAE,SAASA,EAAU,SAAS,CAAC,EAAE,OAAM;AAC9E,MAAKA,EAAU;AAMf,QAAIA,EAAU,gBAAgBM,GAAa;AAChD,YAAMC,IAAcP,EAAU,MACxBQ,IAAUP,EAAQ,cAAcM,EAAY,QAAQ,OAAO,UAAU,QAAQ,GAC7EE,IAAaF,EAAY,UAAU,OAAOG,EAAO,MAAM;AAC7D,aAAAD,EAAW;AAAA,QACTF,EAAY,QAAQ,MAAM;AAAA,QAC1BA,EAAY,QAAQ,MAAM;AAAA,MAChC,GACIC,EAAQ,aAAaC,CAAU,GACxBD;AAAA,IACX,WAAaR,EAAU,gBAAgBW,GAAc;AACjD,YAAMC,IAAeZ,EAAU,MACzBa,IAAWD,EAAa,SAAS,UACjCE,IAAUF,EAAa,iBAAiB;AAC9C,UAAIG,IAAQ,GACRC,IAAS;AACb,MAAIF,KAAWZ,MACba,IAAQb,EAAY,QAAQC,GAC5Ba,IAASd,EAAY,SAASC;AAEhC,UAAIc,GACAC,IAAmB;AACvB,UAAIL,GAAU;AACZ,cAAM,EAAE,OAAAM,GAAO,KAAAC,EAAK,IAAGR;AACvB,QAAAK,IAAWhB,EAAQ;AAAA,UACjBkB,EAAM,IAAIJ;AAAA,UACVI,EAAM,IAAIH;AAAA,UACVI,EAAI,IAAIL;AAAA,UACRK,EAAI,IAAIJ;AAAA,QAChB,GACME,IAAmB,KAAK,IAAIE,EAAI,IAAID,EAAM,CAAC,IAAI,KAAK,KAAKC,EAAI,IAAID,EAAM,KAAK,GAAG;AAAA,MACrF,OAAW;AACL,cAAM,EAAE,QAAAE,GAAQ,aAAAC,GAAa,aAAAC,GAAa,aAAAC,EAAW,IAAKZ;AAC1D,QAAAK,IAAWhB,EAAQ;AAAA,UACjBoB,EAAO,IAAIN;AAAA,UACXM,EAAO,IAAIL;AAAA,UACXM,IAAcP;AAAA,UACdQ,EAAY,IAAIR;AAAA,UAChBQ,EAAY,IAAIP;AAAA,UAChBQ,IAAcT;AAAA,QACtB;AAAA,MACK;AACD,UAAIG,KAAoBJ,KAAWZ,GAAa;AAC9C,cAAMuB,IAAQvB,EAAY,aAAac;AACvC,iBAASU,IAAI,GAAGA,IAAIxB,EAAY,MAAM,QAAQwB,KAAK;AACjD,gBAAMP,KAASO,IAAIxB,EAAY,aAAaC,IAAU,KAAKa;AAC3D,UAAAJ,EAAa,WAAW,QAAQ,CAACe,MAAS;AACxC,kBAAMC,IAAaT,IAAQQ,EAAK,SAASF;AACzC,YAAAR,EAAS;AAAA;AAAA,cAEP,KAAK,MAAMW,IAAa9B,CAAS,IAAIA;AAAA,cACrCO,EAAM,OAAO,SAASsB,EAAK,KAAK,EAAE,MAAO;AAAA,YACrD;AAAA,UACA,CAAS;AAAA,QACF;AAAA,MACP;AACM,QAAAf,EAAa,WAAW,QAAQ,CAACe,MAAS;AACxC,UAAAV,EAAS,aAAaU,EAAK,QAAQtB,EAAM,OAAO,SAASsB,EAAK,KAAK,EAAE,MAAO,CAAA;AAAA,QACpF,CAAO;AAEH,aAAOV;AAAA,IACR;AAAA,SAnE2B;AAC1B,UAAMT,IAAUP,EAAQ,cAAcD,EAAU,QAAQ,OAAO,UAAU,QAAQ,GAC3ES,IAAaT,EAAU,OAAO,OAAOU,EAAO,MAAM;AACxD,WAAAD,EAAW,MAAMT,EAAU,QAAQ,MAAM,OAAOA,EAAU,QAAQ,MAAM,MAAM,GAC9EQ,EAAQ,aAAaC,CAAU,GACxBD;AAAA,EACX;AA8DE,SAAAqB,EAAK,4BAA4B7B,CAAS,GACnC;AACT;","x_google_ignoreList":[0]}