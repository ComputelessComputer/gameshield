{"version":3,"file":"index579.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n"],"names":["HTMLTextSystem","renderer","RendererType","options","text","resolution","style","textKey","promise","texture","htmlTextData","BigPool","HTMLTextRenderData","fontFamilies","extractFontFamilies","fontCSS","getFontCss","HTMLTextStyle","measured","measureHtmlText","width","height","image","uvSafeOffset","svgURL","getSVGUrl","loadSVGImage","isSafari","resource","canvasAndContext","getTemporaryCanvasFromImage","getPo2TextureFromSource","CanvasPool","activeTexture","warn","TexturePool","ExtensionType"],"mappings":"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","x_google_ignoreList":[0]}