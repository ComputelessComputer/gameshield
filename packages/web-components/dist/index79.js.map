{"version":3,"file":"index79.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/resources/CubeResource.mjs"],"sourcesContent":["import { TARGETS } from \"@pixi/constants\";\nimport { AbstractMultiResource } from \"./AbstractMultiResource.mjs\";\nconst _CubeResource = class _CubeResource2 extends AbstractMultiResource {\n  /**\n   * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources\n   *        to use as the sides of the cube.\n   * @param options - ImageResource options\n   * @param {number} [options.width] - Width of resource\n   * @param {number} [options.height] - Height of resource\n   * @param {number} [options.autoLoad=true] - Whether to auto-load resources\n   * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\n   *   whether to copy them or use\n   */\n  constructor(source, options) {\n    const { width, height, autoLoad, linkBaseTexture } = options || {};\n    if (source && source.length !== _CubeResource2.SIDES)\n      throw new Error(`Invalid length. Got ${source.length}, expected 6`);\n    super(6, { width, height });\n    for (let i = 0; i < _CubeResource2.SIDES; i++)\n      this.items[i].target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;\n    this.linkBaseTexture = linkBaseTexture !== !1, source && this.initFromArray(source, options), autoLoad !== !1 && this.load();\n  }\n  /**\n   * Add binding.\n   * @param baseTexture - parent base texture\n   */\n  bind(baseTexture) {\n    super.bind(baseTexture), baseTexture.target = TARGETS.TEXTURE_CUBE_MAP;\n  }\n  addBaseTextureAt(baseTexture, index, linkBaseTexture) {\n    if (linkBaseTexture === void 0 && (linkBaseTexture = this.linkBaseTexture), !this.items[index])\n      throw new Error(`Index ${index} is out of bounds`);\n    if (!this.linkBaseTexture || baseTexture.parentTextureArray || Object.keys(baseTexture._glTextures).length > 0)\n      if (baseTexture.resource)\n        this.addResourceAt(baseTexture.resource, index);\n      else\n        throw new Error(\"CubeResource does not support copying of renderTexture.\");\n    else\n      baseTexture.target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index, baseTexture.parentTextureArray = this.baseTexture, this.items[index] = baseTexture;\n    return baseTexture.valid && !this.valid && this.resize(baseTexture.realWidth, baseTexture.realHeight), this.items[index] = baseTexture, this;\n  }\n  /**\n   * Upload the resource\n   * @param renderer\n   * @param _baseTexture\n   * @param glTexture\n   * @returns {boolean} true is success\n   */\n  upload(renderer, _baseTexture, glTexture) {\n    const dirty = this.itemDirtyIds;\n    for (let i = 0; i < _CubeResource2.SIDES; i++) {\n      const side = this.items[i];\n      (dirty[i] < side.dirtyId || glTexture.dirtyId < _baseTexture.dirtyId) && (side.valid && side.resource ? (side.resource.upload(renderer, side, glTexture), dirty[i] = side.dirtyId) : dirty[i] < -1 && (renderer.gl.texImage2D(\n        side.target,\n        0,\n        glTexture.internalFormat,\n        _baseTexture.realWidth,\n        _baseTexture.realHeight,\n        0,\n        _baseTexture.format,\n        glTexture.type,\n        null\n      ), dirty[i] = -1));\n    }\n    return !0;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if source is an array of 6 elements\n   */\n  static test(source) {\n    return Array.isArray(source) && source.length === _CubeResource2.SIDES;\n  }\n};\n_CubeResource.SIDES = 6;\nlet CubeResource = _CubeResource;\nexport {\n  CubeResource\n};\n//# sourceMappingURL=CubeResource.mjs.map\n"],"names":["_CubeResource","_CubeResource2","AbstractMultiResource","source","options","width","height","autoLoad","linkBaseTexture","i","TARGETS","baseTexture","index","renderer","_baseTexture","glTexture","dirty","side","CubeResource"],"mappings":";;AAEA,MAAMA,IAAgB,MAAMC,UAAuBC,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWvE,YAAYC,GAAQC,GAAS;AAC3B,UAAM,EAAE,OAAAC,GAAO,QAAAC,GAAQ,UAAAC,GAAU,iBAAAC,EAAiB,IAAGJ,KAAW;AAChE,QAAID,KAAUA,EAAO,WAAWF,EAAe;AAC7C,YAAM,IAAI,MAAM,uBAAuBE,EAAO,MAAM,cAAc;AACpE,UAAM,GAAG,EAAE,OAAAE,GAAO,QAAAC,EAAQ,CAAA;AAC1B,aAASG,IAAI,GAAGA,IAAIR,EAAe,OAAOQ;AACxC,WAAK,MAAMA,CAAC,EAAE,SAASC,EAAQ,8BAA8BD;AAC/D,SAAK,kBAAkBD,MAAoB,IAAIL,KAAU,KAAK,cAAcA,GAAQC,CAAO,GAAGG,MAAa,MAAM,KAAK;EACvH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAKI,GAAa;AAChB,UAAM,KAAKA,CAAW,GAAGA,EAAY,SAASD,EAAQ;AAAA,EACvD;AAAA,EACD,iBAAiBC,GAAaC,GAAOJ,GAAiB;AACpD,QAAIA,MAAoB,WAAWA,IAAkB,KAAK,kBAAkB,CAAC,KAAK,MAAMI,CAAK;AAC3F,YAAM,IAAI,MAAM,SAASA,CAAK,mBAAmB;AACnD,QAAI,CAAC,KAAK,mBAAmBD,EAAY,sBAAsB,OAAO,KAAKA,EAAY,WAAW,EAAE,SAAS;AAC3G,UAAIA,EAAY;AACd,aAAK,cAAcA,EAAY,UAAUC,CAAK;AAAA;AAE9C,cAAM,IAAI,MAAM,yDAAyD;AAAA;AAE3E,MAAAD,EAAY,SAASD,EAAQ,8BAA8BE,GAAOD,EAAY,qBAAqB,KAAK,aAAa,KAAK,MAAMC,CAAK,IAAID;AAC3I,WAAOA,EAAY,SAAS,CAAC,KAAK,SAAS,KAAK,OAAOA,EAAY,WAAWA,EAAY,UAAU,GAAG,KAAK,MAAMC,CAAK,IAAID,GAAa;AAAA,EACzI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAOE,GAAUC,GAAcC,GAAW;AACxC,UAAMC,IAAQ,KAAK;AACnB,aAASP,IAAI,GAAGA,IAAIR,EAAe,OAAOQ,KAAK;AAC7C,YAAMQ,IAAO,KAAK,MAAMR,CAAC;AACzB,OAACO,EAAMP,CAAC,IAAIQ,EAAK,WAAWF,EAAU,UAAUD,EAAa,aAAaG,EAAK,SAASA,EAAK,YAAYA,EAAK,SAAS,OAAOJ,GAAUI,GAAMF,CAAS,GAAGC,EAAMP,CAAC,IAAIQ,EAAK,WAAWD,EAAMP,CAAC,IAAI,OAAOI,EAAS,GAAG;AAAA,QACjNI,EAAK;AAAA,QACL;AAAA,QACAF,EAAU;AAAA,QACVD,EAAa;AAAA,QACbA,EAAa;AAAA,QACb;AAAA,QACAA,EAAa;AAAA,QACbC,EAAU;AAAA,QACV;AAAA,MACD,GAAEC,EAAMP,CAAC,IAAI;AAAA,IACf;AACD,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,KAAKN,GAAQ;AAClB,WAAO,MAAM,QAAQA,CAAM,KAAKA,EAAO,WAAWF,EAAe;AAAA,EAClE;AACH;AACAD,EAAc,QAAQ;AACnB,IAACkB,IAAelB;","x_google_ignoreList":[0]}