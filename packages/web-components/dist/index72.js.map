{"version":3,"file":"index72.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/TextureSystem.mjs"],"sourcesContent":["import { SAMPLER_TYPES, TYPES, MIPMAP_MODES, WRAP_MODES, SCALE_MODES } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { removeItems } from \"@pixi/utils\";\nimport { BaseTexture } from \"./BaseTexture.mjs\";\nimport { GLTexture } from \"./GLTexture.mjs\";\nimport { mapInternalFormatToSamplerType } from \"./utils/mapInternalFormatToSamplerType.mjs\";\nimport { mapTypeAndFormatToInternalFormat } from \"./utils/mapTypeAndFormatToInternalFormat.mjs\";\nclass TextureSystem {\n  /**\n   * @param renderer - The renderer this system works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.boundTextures = [], this.currentLocation = -1, this.managedTextures = [], this._unknownBoundTextures = !1, this.unknownTexture = new BaseTexture(), this.hasIntegerTextures = !1;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    const gl = this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID, this.webGLVersion = this.renderer.context.webGLVersion, this.internalFormats = mapTypeAndFormatToInternalFormat(gl), this.samplerTypes = mapInternalFormatToSamplerType(gl);\n    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    this.boundTextures.length = maxTextures;\n    for (let i = 0; i < maxTextures; i++)\n      this.boundTextures[i] = null;\n    this.emptyTextures = {};\n    const emptyTexture2D = new GLTexture(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture), gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4)), this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D, this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(gl.createTexture()), gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);\n    for (let i = 0; i < 6; i++)\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR), gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    for (let i = 0; i < this.boundTextures.length; i++)\n      this.bind(null, i);\n  }\n  /**\n   * Bind a texture to a specific location\n   *\n   * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n   * @param texture - Texture to bind\n   * @param [location=0] - Location to bind at\n   */\n  bind(texture, location = 0) {\n    const { gl } = this;\n    if (texture = texture?.castToBaseTexture(), texture?.valid && !texture.parentTextureArray) {\n      texture.touched = this.renderer.textureGC.count;\n      const glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);\n      this.boundTextures[location] !== texture && (this.currentLocation !== location && (this.currentLocation = location, gl.activeTexture(gl.TEXTURE0 + location)), gl.bindTexture(texture.target, glTexture.texture)), glTexture.dirtyId !== texture.dirtyId ? (this.currentLocation !== location && (this.currentLocation = location, gl.activeTexture(gl.TEXTURE0 + location)), this.updateTexture(texture)) : glTexture.dirtyStyleId !== texture.dirtyStyleId && this.updateTextureStyle(texture), this.boundTextures[location] = texture;\n    } else\n      this.currentLocation !== location && (this.currentLocation = location, gl.activeTexture(gl.TEXTURE0 + location)), gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture), this.boundTextures[location] = null;\n  }\n  /** Resets texture location and bound textures Actual `bind(null, i)` calls will be performed at next `unbind()` call */\n  reset() {\n    this._unknownBoundTextures = !0, this.hasIntegerTextures = !1, this.currentLocation = -1;\n    for (let i = 0; i < this.boundTextures.length; i++)\n      this.boundTextures[i] = this.unknownTexture;\n  }\n  /**\n   * Unbind a texture.\n   * @param texture - Texture to bind\n   */\n  unbind(texture) {\n    const { gl, boundTextures } = this;\n    if (this._unknownBoundTextures) {\n      this._unknownBoundTextures = !1;\n      for (let i = 0; i < boundTextures.length; i++)\n        boundTextures[i] === this.unknownTexture && this.bind(null, i);\n    }\n    for (let i = 0; i < boundTextures.length; i++)\n      boundTextures[i] === texture && (this.currentLocation !== i && (gl.activeTexture(gl.TEXTURE0 + i), this.currentLocation = i), gl.bindTexture(texture.target, this.emptyTextures[texture.target].texture), boundTextures[i] = null);\n  }\n  /**\n   * Ensures that current boundTextures all have FLOAT sampler type,\n   * see {@link PIXI.SAMPLER_TYPES} for explanation.\n   * @param maxTextures - number of locations to check\n   */\n  ensureSamplerType(maxTextures) {\n    const { boundTextures, hasIntegerTextures, CONTEXT_UID } = this;\n    if (hasIntegerTextures)\n      for (let i = maxTextures - 1; i >= 0; --i) {\n        const tex = boundTextures[i];\n        tex && tex._glTextures[CONTEXT_UID].samplerType !== SAMPLER_TYPES.FLOAT && this.renderer.texture.unbind(tex);\n      }\n  }\n  /**\n   * Initialize a texture\n   * @private\n   * @param texture - Texture to initialize\n   */\n  initTexture(texture) {\n    const glTexture = new GLTexture(this.gl.createTexture());\n    return glTexture.dirtyId = -1, texture._glTextures[this.CONTEXT_UID] = glTexture, this.managedTextures.push(texture), texture.on(\"dispose\", this.destroyTexture, this), glTexture;\n  }\n  initTextureType(texture, glTexture) {\n    glTexture.internalFormat = this.internalFormats[texture.type]?.[texture.format] ?? texture.format, glTexture.samplerType = this.samplerTypes[glTexture.internalFormat] ?? SAMPLER_TYPES.FLOAT, this.webGLVersion === 2 && texture.type === TYPES.HALF_FLOAT ? glTexture.type = this.gl.HALF_FLOAT : glTexture.type = texture.type;\n  }\n  /**\n   * Update a texture\n   * @private\n   * @param {PIXI.BaseTexture} texture - Texture to initialize\n   */\n  updateTexture(texture) {\n    const glTexture = texture._glTextures[this.CONTEXT_UID];\n    if (!glTexture)\n      return;\n    const renderer = this.renderer;\n    if (this.initTextureType(texture, glTexture), texture.resource?.upload(renderer, texture, glTexture))\n      glTexture.samplerType !== SAMPLER_TYPES.FLOAT && (this.hasIntegerTextures = !0);\n    else {\n      const width = texture.realWidth, height = texture.realHeight, gl = renderer.gl;\n      (glTexture.width !== width || glTexture.height !== height || glTexture.dirtyId < 0) && (glTexture.width = width, glTexture.height = height, gl.texImage2D(\n        texture.target,\n        0,\n        glTexture.internalFormat,\n        width,\n        height,\n        0,\n        texture.format,\n        glTexture.type,\n        null\n      ));\n    }\n    texture.dirtyStyleId !== glTexture.dirtyStyleId && this.updateTextureStyle(texture), glTexture.dirtyId = texture.dirtyId;\n  }\n  /**\n   * Deletes the texture from WebGL\n   * @private\n   * @param texture - the texture to destroy\n   * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n   */\n  destroyTexture(texture, skipRemove) {\n    const { gl } = this;\n    if (texture = texture.castToBaseTexture(), texture._glTextures[this.CONTEXT_UID] && (this.unbind(texture), gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture), texture.off(\"dispose\", this.destroyTexture, this), delete texture._glTextures[this.CONTEXT_UID], !skipRemove)) {\n      const i = this.managedTextures.indexOf(texture);\n      i !== -1 && removeItems(this.managedTextures, i, 1);\n    }\n  }\n  /**\n   * Update texture style such as mipmap flag\n   * @private\n   * @param {PIXI.BaseTexture} texture - Texture to update\n   */\n  updateTextureStyle(texture) {\n    const glTexture = texture._glTextures[this.CONTEXT_UID];\n    glTexture && ((texture.mipmap === MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo ? glTexture.mipmap = !1 : glTexture.mipmap = texture.mipmap >= 1, this.webGLVersion !== 2 && !texture.isPowerOfTwo ? glTexture.wrapMode = WRAP_MODES.CLAMP : glTexture.wrapMode = texture.wrapMode, texture.resource?.style(this.renderer, texture, glTexture) || this.setStyle(texture, glTexture), glTexture.dirtyStyleId = texture.dirtyStyleId);\n  }\n  /**\n   * Set style for texture\n   * @private\n   * @param texture - Texture to update\n   * @param glTexture\n   */\n  setStyle(texture, glTexture) {\n    const gl = this.gl;\n    if (glTexture.mipmap && texture.mipmap !== MIPMAP_MODES.ON_MANUAL && gl.generateMipmap(texture.target), gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode), gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode), glTexture.mipmap) {\n      gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n      const anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;\n      if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === SCALE_MODES.LINEAR) {\n        const level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n        gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n      }\n    } else\n      gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nTextureSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"texture\"\n};\nextensions.add(TextureSystem);\nexport {\n  TextureSystem\n};\n//# sourceMappingURL=TextureSystem.mjs.map\n"],"names":["TextureSystem","renderer","BaseTexture","gl","mapTypeAndFormatToInternalFormat","mapInternalFormatToSamplerType","maxTextures","emptyTexture2D","GLTexture","texture","location","glTexture","i","boundTextures","hasIntegerTextures","CONTEXT_UID","tex","SAMPLER_TYPES","_a","TYPES","width","height","skipRemove","removeItems","MIPMAP_MODES","WRAP_MODES","SCALE_MODES","anisotropicExt","level","ExtensionType","extensions"],"mappings":"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","x_google_ignoreList":[0]}