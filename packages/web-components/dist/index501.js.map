{"version":3,"file":"index501.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/BatchableGraphics.mjs"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors.mjs';\n\n\"use strict\";\nconst identityMatrix = new Matrix();\nclass BatchableGraphics {\n  constructor() {\n    this.packAsQuad = false;\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    this.applyTransform = true;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n  }\n  get uvs() {\n    return this.geometryData.uvs;\n  }\n  get positions() {\n    return this.geometryData.vertices;\n  }\n  get indices() {\n    return this.geometryData.indices;\n  }\n  get blendMode() {\n    if (this.applyTransform) {\n      return this.renderable.groupBlendMode;\n    }\n    return \"normal\";\n  }\n  get color() {\n    const rgb = this.baseColor;\n    const bgr = rgb >> 16 | rgb & 65280 | (rgb & 255) << 16;\n    const renderable = this.renderable;\n    if (renderable) {\n      return multiplyHexColors(bgr, renderable.groupColor) + (this.alpha * renderable.groupAlpha * 255 << 24);\n    }\n    return bgr + (this.alpha * 255 << 24);\n  }\n  get transform() {\n    return this.renderable?.groupTransform || identityMatrix;\n  }\n  copyTo(gpuBuffer) {\n    gpuBuffer.indexOffset = this.indexOffset;\n    gpuBuffer.indexSize = this.indexSize;\n    gpuBuffer.attributeOffset = this.attributeOffset;\n    gpuBuffer.attributeSize = this.attributeSize;\n    gpuBuffer.baseColor = this.baseColor;\n    gpuBuffer.alpha = this.alpha;\n    gpuBuffer.texture = this.texture;\n    gpuBuffer.geometryData = this.geometryData;\n    gpuBuffer.topology = this.topology;\n  }\n  reset() {\n    this.applyTransform = true;\n    this.renderable = null;\n    this.topology = \"triangle-list\";\n  }\n}\n\nexport { BatchableGraphics };\n//# sourceMappingURL=BatchableGraphics.mjs.map\n"],"names":["identityMatrix","Matrix","BatchableGraphics","rgb","bgr","renderable","multiplyHexColors","_a","gpuBuffer"],"mappings":";;AAIA,MAAMA,IAAiB,IAAIC;AAC3B,MAAMC,EAAkB;AAAA,EACtB,cAAc;AACZ,SAAK,aAAa,IAClB,KAAK,cAAc,WACnB,KAAK,WAAW,iBAChB,KAAK,iBAAiB,IACtB,KAAK,cAAc,GACnB,KAAK,WAAW,MAChB,KAAK,SAAS;AAAA,EACf;AAAA,EACD,IAAI,MAAM;AACR,WAAO,KAAK,aAAa;AAAA,EAC1B;AAAA,EACD,IAAI,YAAY;AACd,WAAO,KAAK,aAAa;AAAA,EAC1B;AAAA,EACD,IAAI,UAAU;AACZ,WAAO,KAAK,aAAa;AAAA,EAC1B;AAAA,EACD,IAAI,YAAY;AACd,WAAI,KAAK,iBACA,KAAK,WAAW,iBAElB;AAAA,EACR;AAAA,EACD,IAAI,QAAQ;AACV,UAAMC,IAAM,KAAK,WACXC,IAAMD,KAAO,KAAKA,IAAM,SAASA,IAAM,QAAQ,IAC/CE,IAAa,KAAK;AACxB,WAAIA,IACKC,EAAkBF,GAAKC,EAAW,UAAU,KAAK,KAAK,QAAQA,EAAW,aAAa,OAAO,MAE/FD,KAAO,KAAK,QAAQ,OAAO;AAAA,EACnC;AAAA,EACD,IAAI,YAAY;;AACd,aAAOG,IAAA,KAAK,eAAL,gBAAAA,EAAiB,mBAAkBP;AAAA,EAC3C;AAAA,EACD,OAAOQ,GAAW;AAChB,IAAAA,EAAU,cAAc,KAAK,aAC7BA,EAAU,YAAY,KAAK,WAC3BA,EAAU,kBAAkB,KAAK,iBACjCA,EAAU,gBAAgB,KAAK,eAC/BA,EAAU,YAAY,KAAK,WAC3BA,EAAU,QAAQ,KAAK,OACvBA,EAAU,UAAU,KAAK,SACzBA,EAAU,eAAe,KAAK,cAC9BA,EAAU,WAAW,KAAK;AAAA,EAC3B;AAAA,EACD,QAAQ;AACN,SAAK,iBAAiB,IACtB,KAAK,aAAa,MAClB,KAAK,WAAW;AAAA,EACjB;AACH;","x_google_ignoreList":[0]}