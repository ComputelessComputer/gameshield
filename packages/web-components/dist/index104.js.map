{"version":3,"file":"index104.js","sources":["../../../node_modules/.pnpm/@pixi+display@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/display/lib/DisplayObject.mjs"],"sourcesContent":["import { utils, Transform, Rectangle, RAD_TO_DEG, DEG_TO_RAD } from \"@pixi/core\";\nimport { Bounds } from \"./Bounds.mjs\";\nclass DisplayObject extends utils.EventEmitter {\n  constructor() {\n    super(), this.tempDisplayObjectParent = null, this.transform = new Transform(), this.alpha = 1, this.visible = !0, this.renderable = !0, this.cullable = !1, this.cullArea = null, this.parent = null, this.worldAlpha = 1, this._lastSortedIndex = 0, this._zIndex = 0, this.filterArea = null, this.filters = null, this._enabledFilters = null, this._bounds = new Bounds(), this._localBounds = null, this._boundsID = 0, this._boundsRect = null, this._localBoundsRect = null, this._mask = null, this._maskRefCount = 0, this._destroyed = !1, this.isSprite = !1, this.isMask = !1;\n  }\n  /**\n   * Mixes all enumerable properties and methods from a source object to DisplayObject.\n   * @param source - The source of properties and methods to mix in.\n   */\n  static mixin(source) {\n    const keys = Object.keys(source);\n    for (let i = 0; i < keys.length; ++i) {\n      const propertyName = keys[i];\n      Object.defineProperty(\n        DisplayObject.prototype,\n        propertyName,\n        Object.getOwnPropertyDescriptor(source, propertyName)\n      );\n    }\n  }\n  /**\n   * Fired when this DisplayObject is added to a Container.\n   * @instance\n   * @event added\n   * @param {PIXI.Container} container - The container added to.\n   */\n  /**\n   * Fired when this DisplayObject is removed from a Container.\n   * @instance\n   * @event removed\n   * @param {PIXI.Container} container - The container removed from.\n   */\n  /**\n   * Fired when this DisplayObject is destroyed. This event is emitted once\n   * destroy is finished.\n   * @instance\n   * @event destroyed\n   */\n  /** Readonly flag for destroyed display objects. */\n  get destroyed() {\n    return this._destroyed;\n  }\n  /** Recursively updates transform of all objects from the root to this one internal function for toLocal() */\n  _recursivePostUpdateTransform() {\n    this.parent ? (this.parent._recursivePostUpdateTransform(), this.transform.updateTransform(this.parent.transform)) : this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n  }\n  /** Updates the object transform for rendering. TODO - Optimization pass! */\n  updateTransform() {\n    this._boundsID++, this.transform.updateTransform(this.parent.transform), this.worldAlpha = this.alpha * this.parent.worldAlpha;\n  }\n  /**\n   * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.\n   *\n   * This method is expensive on containers with a large subtree (like the stage). This is because the bounds\n   * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to\n   * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update\n   * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n   * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,\n   * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as\n   * its height increases.\n   *\n   * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.\n   * The world bounds of all display objects in a container's **subtree** will also be recalculated.\n   *\n   * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds\n   * calculation if needed.\n   *\n   * ```js\n   * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n   * ```\n   *\n   * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This\n   * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\n   * details.\n   *\n   * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms\n   * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\n   * cases.\n   * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n   *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n   *  nice performance boost.\n   * @param rect - Optional rectangle to store the result of the bounds calculation.\n   * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n   */\n  getBounds(skipUpdate, rect) {\n    return skipUpdate || (this.parent ? (this._recursivePostUpdateTransform(), this.updateTransform()) : (this.parent = this._tempDisplayObjectParent, this.updateTransform(), this.parent = null)), this._bounds.updateID !== this._boundsID && (this.calculateBounds(), this._bounds.updateID = this._boundsID), rect || (this._boundsRect || (this._boundsRect = new Rectangle()), rect = this._boundsRect), this._bounds.getRectangle(rect);\n  }\n  /**\n   * Retrieves the local bounds of the displayObject as a rectangle object.\n   * @param rect - Optional rectangle to store the result of the bounds calculation.\n   * @returns - The rectangular bounding area.\n   */\n  getLocalBounds(rect) {\n    rect || (this._localBoundsRect || (this._localBoundsRect = new Rectangle()), rect = this._localBoundsRect), this._localBounds || (this._localBounds = new Bounds());\n    const transformRef = this.transform, parentRef = this.parent;\n    this.parent = null, this._tempDisplayObjectParent.worldAlpha = parentRef?.worldAlpha ?? 1, this.transform = this._tempDisplayObjectParent.transform;\n    const worldBounds = this._bounds, worldBoundsID = this._boundsID;\n    this._bounds = this._localBounds;\n    const bounds = this.getBounds(!1, rect);\n    return this.parent = parentRef, this.transform = transformRef, this._bounds = worldBounds, this._bounds.updateID += this._boundsID - worldBoundsID, bounds;\n  }\n  /**\n   * Calculates the global position of the display object.\n   * @param position - The world origin to calculate from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform.\n   * @returns - A point object representing the position of this object.\n   */\n  toGlobal(position, point, skipUpdate = !1) {\n    return skipUpdate || (this._recursivePostUpdateTransform(), this.parent ? this.displayObjectUpdateTransform() : (this.parent = this._tempDisplayObjectParent, this.displayObjectUpdateTransform(), this.parent = null)), this.worldTransform.apply(position, point);\n  }\n  /**\n   * Calculates the local position of the display object relative to another point.\n   * @param position - The world origin to calculate from.\n   * @param from - The DisplayObject to calculate the global position from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform\n   * @returns - A point object representing the position of this object\n   */\n  toLocal(position, from, point, skipUpdate) {\n    return from && (position = from.toGlobal(position, point, skipUpdate)), skipUpdate || (this._recursivePostUpdateTransform(), this.parent ? this.displayObjectUpdateTransform() : (this.parent = this._tempDisplayObjectParent, this.displayObjectUpdateTransform(), this.parent = null)), this.worldTransform.applyInverse(position, point);\n  }\n  /**\n   * Set the parent Container of this DisplayObject.\n   * @param container - The Container to add this DisplayObject to.\n   * @returns - The Container that this DisplayObject was added to.\n   */\n  setParent(container) {\n    if (!container || !container.addChild)\n      throw new Error(\"setParent: Argument must be a Container\");\n    return container.addChild(this), container;\n  }\n  /** Remove the DisplayObject from its parent Container. If the DisplayObject has no parent, do nothing. */\n  removeFromParent() {\n    this.parent?.removeChild(this);\n  }\n  /**\n   * Convenience function to set the position, scale, skew and pivot at once.\n   * @param x - The X position\n   * @param y - The Y position\n   * @param scaleX - The X scale value\n   * @param scaleY - The Y scale value\n   * @param rotation - The rotation\n   * @param skewX - The X skew value\n   * @param skewY - The Y skew value\n   * @param pivotX - The X pivot value\n   * @param pivotY - The Y pivot value\n   * @returns - The DisplayObject instance\n   */\n  setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0) {\n    return this.position.x = x, this.position.y = y, this.scale.x = scaleX || 1, this.scale.y = scaleY || 1, this.rotation = rotation, this.skew.x = skewX, this.skew.y = skewY, this.pivot.x = pivotX, this.pivot.y = pivotY, this;\n  }\n  /**\n   * Base destroy method for generic display objects. This will automatically\n   * remove the display object from its parent Container as well as remove\n   * all current event listeners and internal references. Do not use a DisplayObject\n   * after calling `destroy()`.\n   * @param _options\n   */\n  destroy(_options) {\n    this.removeFromParent(), this._destroyed = !0, this.transform = null, this.parent = null, this._bounds = null, this.mask = null, this.cullArea = null, this.filters = null, this.filterArea = null, this.hitArea = null, this.eventMode = \"auto\", this.interactiveChildren = !1, this.emit(\"destroyed\"), this.removeAllListeners();\n  }\n  /**\n   * @protected\n   * @member {PIXI.Container}\n   */\n  get _tempDisplayObjectParent() {\n    return this.tempDisplayObjectParent === null && (this.tempDisplayObjectParent = new TemporaryDisplayObject()), this.tempDisplayObjectParent;\n  }\n  /**\n   * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root.\n   *\n   * ```js\n   * const cacheParent = elem.enableTempParent();\n   * elem.updateTransform();\n   * elem.disableTempParent(cacheParent);\n   * ```\n   * @returns - Current parent\n   */\n  enableTempParent() {\n    const myParent = this.parent;\n    return this.parent = this._tempDisplayObjectParent, myParent;\n  }\n  /**\n   * Pair method for `enableTempParent`\n   * @param cacheParent - Actual parent of element\n   */\n  disableTempParent(cacheParent) {\n    this.parent = cacheParent;\n  }\n  /**\n   * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n   * An alias to position.x\n   */\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    this.transform.position.x = value;\n  }\n  /**\n   * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n   * An alias to position.y\n   */\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    this.transform.position.y = value;\n  }\n  /**\n   * Current transform of the object based on world (parent) factors.\n   * @readonly\n   */\n  get worldTransform() {\n    return this.transform.worldTransform;\n  }\n  /**\n   * Current transform of the object based on local factors: position, scale, other stuff.\n   * @readonly\n   */\n  get localTransform() {\n    return this.transform.localTransform;\n  }\n  /**\n   * The coordinate of the object relative to the local coordinates of the parent.\n   * @since 4.0.0\n   */\n  get position() {\n    return this.transform.position;\n  }\n  set position(value) {\n    this.transform.position.copyFrom(value);\n  }\n  /**\n   * The scale factors of this object along the local coordinate axes.\n   *\n   * The default scale is (1, 1).\n   * @since 4.0.0\n   */\n  get scale() {\n    return this.transform.scale;\n  }\n  set scale(value) {\n    this.transform.scale.copyFrom(value);\n  }\n  /**\n   * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n   * is the projection of `pivot` in the parent's local space.\n   *\n   * By default, the pivot is the origin (0, 0).\n   * @since 4.0.0\n   */\n  get pivot() {\n    return this.transform.pivot;\n  }\n  set pivot(value) {\n    this.transform.pivot.copyFrom(value);\n  }\n  /**\n   * The skew factor for the object in radians.\n   * @since 4.0.0\n   */\n  get skew() {\n    return this.transform.skew;\n  }\n  set skew(value) {\n    this.transform.skew.copyFrom(value);\n  }\n  /**\n   * The rotation of the object in radians.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get rotation() {\n    return this.transform.rotation;\n  }\n  set rotation(value) {\n    this.transform.rotation = value;\n  }\n  /**\n   * The angle of the object in degrees.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get angle() {\n    return this.transform.rotation * RAD_TO_DEG;\n  }\n  set angle(value) {\n    this.transform.rotation = value * DEG_TO_RAD;\n  }\n  /**\n   * The zIndex of the displayObject.\n   *\n   * If a container has the sortableChildren property set to true, children will be automatically\n   * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n   * and thus rendered on top of other display objects within the same container.\n   * @see PIXI.Container#sortableChildren\n   */\n  get zIndex() {\n    return this._zIndex;\n  }\n  set zIndex(value) {\n    this._zIndex !== value && (this._zIndex = value, this.parent && (this.parent.sortDirty = !0));\n  }\n  /**\n   * Indicates if the object is globally visible.\n   * @readonly\n   */\n  get worldVisible() {\n    let item = this;\n    do {\n      if (!item.visible)\n        return !1;\n      item = item.parent;\n    } while (item);\n    return !0;\n  }\n  /**\n   * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n   * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n   * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n   * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n   * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n   * To remove a mask, set this property to `null`.\n   *\n   * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.mask = graphics;\n   * @todo At the moment, CanvasRenderer doesn't support Sprite as mask.\n   */\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    if (this._mask !== value) {\n      if (this._mask) {\n        const maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;\n        maskObject && (maskObject._maskRefCount--, maskObject._maskRefCount === 0 && (maskObject.renderable = !0, maskObject.isMask = !1));\n      }\n      if (this._mask = value, this._mask) {\n        const maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;\n        maskObject && (maskObject._maskRefCount === 0 && (maskObject.renderable = !1, maskObject.isMask = !0), maskObject._maskRefCount++);\n      }\n    }\n  }\n}\nclass TemporaryDisplayObject extends DisplayObject {\n  constructor() {\n    super(...arguments), this.sortDirty = null;\n  }\n}\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\nexport {\n  DisplayObject,\n  TemporaryDisplayObject\n};\n//# sourceMappingURL=DisplayObject.mjs.map\n"],"names":["DisplayObject","utils.EventEmitter","Transform","Bounds","source","keys","i","propertyName","skipUpdate","rect","Rectangle","transformRef","parentRef","worldBounds","worldBoundsID","bounds","position","point","from","container","_a","x","y","scaleX","scaleY","rotation","skewX","skewY","pivotX","pivotY","_options","TemporaryDisplayObject","myParent","cacheParent","value","RAD_TO_DEG","DEG_TO_RAD","item","maskObject"],"mappings":"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","x_google_ignoreList":[0]}