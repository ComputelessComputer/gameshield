{"version":3,"file":"index143.js","sources":["../../../node_modules/.pnpm/@pixi+filter-noise@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/filter-noise/lib/NoiseFilter.mjs"],"sourcesContent":["import { Filter, defaultFilterVertex } from \"@pixi/core\";\nimport fragment from \"./noise.frag.mjs\";\nclass NoiseFilter extends Filter {\n  /**\n   * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n   * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n   */\n  constructor(noise = 0.5, seed = Math.random()) {\n    super(defaultFilterVertex, fragment, {\n      uNoise: 0,\n      uSeed: 0\n    }), this.noise = noise, this.seed = seed;\n  }\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   * @default 0.5\n   */\n  get noise() {\n    return this.uniforms.uNoise;\n  }\n  set noise(value) {\n    this.uniforms.uNoise = value;\n  }\n  /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n  get seed() {\n    return this.uniforms.uSeed;\n  }\n  set seed(value) {\n    this.uniforms.uSeed = value;\n  }\n}\nexport {\n  NoiseFilter\n};\n//# sourceMappingURL=NoiseFilter.mjs.map\n"],"names":["NoiseFilter","Filter","noise","seed","defaultFilterVertex","fragment","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,WAAoBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/B,YAAYC,IAAQ,KAAKC,IAAO,KAAK,OAAM,GAAI;AAC7C,UAAMC,GAAqBC,GAAU;AAAA,MACnC,QAAQ;AAAA,MACR,OAAO;AAAA,IACb,CAAK,GAAG,KAAK,QAAQH,GAAO,KAAK,OAAOC;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,QAAQ;AACV,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA,EACD,IAAI,MAAMG,GAAO;AACf,SAAK,SAAS,SAASA;AAAA,EACxB;AAAA;AAAA,EAED,IAAI,OAAO;AACT,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA,EACD,IAAI,KAAKA,GAAO;AACd,SAAK,SAAS,QAAQA;AAAA,EACvB;AACH;","x_google_ignoreList":[0]}