{"version":3,"file":"index388.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/events/EventSystem.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { EventBoundary } from './EventBoundary.mjs';\nimport { EventsTicker } from './EventTicker.mjs';\nimport { FederatedPointerEvent } from './FederatedPointerEvent.mjs';\nimport { FederatedWheelEvent } from './FederatedWheelEvent.mjs';\n\n\"use strict\";\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER = {\n  touchstart: \"pointerdown\",\n  touchend: \"pointerup\",\n  touchendoutside: \"pointerupoutside\",\n  touchmove: \"pointermove\",\n  touchcancel: \"pointercancel\"\n};\nconst _EventSystem = class _EventSystem {\n  /**\n   * @param {Renderer} renderer\n   */\n  constructor(renderer) {\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    this.supportsTouchEvents = \"ontouchstart\" in globalThis;\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    this.supportsPointerEvents = !!globalThis.PointerEvent;\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link Renderer#view view}.\n     */\n    this.domElement = null;\n    /** The resolution used to convert between the DOM client space into world space. */\n    this.resolution = 1;\n    this.renderer = renderer;\n    this.rootBoundary = new EventBoundary(null);\n    EventsTicker.init(this);\n    this.autoPreventDefault = true;\n    this._eventsAdded = false;\n    this._rootPointerEvent = new FederatedPointerEvent(null);\n    this._rootWheelEvent = new FederatedWheelEvent(null);\n    this.cursorStyles = {\n      default: \"inherit\",\n      pointer: \"pointer\"\n    };\n    this.features = new Proxy({ ..._EventSystem.defaultEventFeatures }, {\n      set: (target, key, value) => {\n        if (key === \"globalMove\") {\n          this.rootBoundary.enableGlobalMoveEvents = value;\n        }\n        target[key] = value;\n        return true;\n      }\n    });\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerUp = this._onPointerUp.bind(this);\n    this._onPointerOverOut = this._onPointerOverOut.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n  }\n  /**\n   * The default interaction mode for all display objects.\n   * @see Container.eventMode\n   * @type {EventMode}\n   * @readonly\n   * @since 7.2.0\n   */\n  static get defaultEventMode() {\n    return this._defaultEventMode;\n  }\n  /**\n   * Runner init called, view is available at this point.\n   * @ignore\n   */\n  init(options) {\n    const { canvas, resolution } = this.renderer;\n    this.setTargetElement(canvas);\n    this.resolution = resolution;\n    _EventSystem._defaultEventMode = options.eventMode ?? \"passive\";\n    Object.assign(this.features, options.eventFeatures ?? {});\n    this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n  }\n  /**\n   * Handle changing resolution.\n   * @ignore\n   */\n  resolutionChange(resolution) {\n    this.resolution = resolution;\n  }\n  /** Destroys all event listeners and detaches the renderer. */\n  destroy() {\n    this.setTargetElement(null);\n    this.renderer = null;\n    this._currentCursor = null;\n  }\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   * @param mode - cursor mode, a key from the cursorStyles dictionary\n   */\n  setCursor(mode) {\n    mode || (mode = \"default\");\n    let applyStyles = true;\n    if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas) {\n      applyStyles = false;\n    }\n    if (this._currentCursor === mode) {\n      return;\n    }\n    this._currentCursor = mode;\n    const style = this.cursorStyles[mode];\n    if (style) {\n      switch (typeof style) {\n        case \"string\":\n          if (applyStyles) {\n            this.domElement.style.cursor = style;\n          }\n          break;\n        case \"function\":\n          style(mode);\n          break;\n        case \"object\":\n          if (applyStyles) {\n            Object.assign(this.domElement.style, style);\n          }\n          break;\n      }\n    } else if (applyStyles && typeof mode === \"string\" && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      this.domElement.style.cursor = mode;\n    }\n  }\n  /**\n   * The global pointer event.\n   * Useful for getting the pointer position without listening to events.\n   * @since 7.2.0\n   */\n  get pointer() {\n    return this._rootPointerEvent;\n  }\n  /**\n   * Event handler for pointer down events on {@link EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch event.\n   */\n  _onPointerDown(nativeEvent) {\n    if (!this.features.click)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    const events = this._normalizeToPointerData(nativeEvent);\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      const cancelable = nativeEvent.cancelable || !(\"cancelable\" in nativeEvent);\n      if (cancelable) {\n        nativeEvent.preventDefault();\n      }\n    }\n    for (let i = 0, j = events.length; i < j; i++) {\n      const nativeEvent2 = events[i];\n      const federatedEvent = this._bootstrapEvent(this._rootPointerEvent, nativeEvent2);\n      this.rootBoundary.mapEvent(federatedEvent);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Event handler for pointer move events on on {@link EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch events.\n   */\n  _onPointerMove(nativeEvent) {\n    if (!this.features.move)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    EventsTicker.pointerMoved();\n    const normalizedEvents = this._normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this._bootstrapEvent(this._rootPointerEvent, normalizedEvents[i]);\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Event handler for pointer up events on {@link EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch event.\n   */\n  _onPointerUp(nativeEvent) {\n    if (!this.features.click)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    let target = nativeEvent.target;\n    if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0) {\n      target = nativeEvent.composedPath()[0];\n    }\n    const outside = target !== this.domElement ? \"outside\" : \"\";\n    const normalizedEvents = this._normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this._bootstrapEvent(this._rootPointerEvent, normalizedEvents[i]);\n      event.type += outside;\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Event handler for pointer over & out events on {@link EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch event.\n   */\n  _onPointerOverOut(nativeEvent) {\n    if (!this.features.click)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    const normalizedEvents = this._normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this._bootstrapEvent(this._rootPointerEvent, normalizedEvents[i]);\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Passive handler for `wheel` events on {@link EventSystem.domElement this.domElement}.\n   * @param nativeEvent - The native wheel event.\n   */\n  onWheel(nativeEvent) {\n    if (!this.features.wheel)\n      return;\n    const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    this.rootBoundary.mapEvent(wheelEvent);\n  }\n  /**\n   * Sets the {@link EventSystem#domElement domElement} and binds event listeners.\n   *\n   * To deregister the current DOM element without setting a new one, pass {@code null}.\n   * @param element - The new DOM element.\n   */\n  setTargetElement(element) {\n    this._removeEvents();\n    this.domElement = element;\n    EventsTicker.domElement = element;\n    this._addEvents();\n  }\n  /** Register event listeners on {@link Renderer#domElement this.domElement}. */\n  _addEvents() {\n    if (this._eventsAdded || !this.domElement) {\n      return;\n    }\n    EventsTicker.addTickerListener();\n    const style = this.domElement.style;\n    if (style) {\n      if (globalThis.navigator.msPointerEnabled) {\n        style.msContentZooming = \"none\";\n        style.msTouchAction = \"none\";\n      } else if (this.supportsPointerEvents) {\n        style.touchAction = \"none\";\n      }\n    }\n    if (this.supportsPointerEvents) {\n      globalThis.document.addEventListener(\"pointermove\", this._onPointerMove, true);\n      this.domElement.addEventListener(\"pointerdown\", this._onPointerDown, true);\n      this.domElement.addEventListener(\"pointerleave\", this._onPointerOverOut, true);\n      this.domElement.addEventListener(\"pointerover\", this._onPointerOverOut, true);\n      globalThis.addEventListener(\"pointerup\", this._onPointerUp, true);\n    } else {\n      globalThis.document.addEventListener(\"mousemove\", this._onPointerMove, true);\n      this.domElement.addEventListener(\"mousedown\", this._onPointerDown, true);\n      this.domElement.addEventListener(\"mouseout\", this._onPointerOverOut, true);\n      this.domElement.addEventListener(\"mouseover\", this._onPointerOverOut, true);\n      globalThis.addEventListener(\"mouseup\", this._onPointerUp, true);\n      if (this.supportsTouchEvents) {\n        this.domElement.addEventListener(\"touchstart\", this._onPointerDown, true);\n        this.domElement.addEventListener(\"touchend\", this._onPointerUp, true);\n        this.domElement.addEventListener(\"touchmove\", this._onPointerMove, true);\n      }\n    }\n    this.domElement.addEventListener(\"wheel\", this.onWheel, {\n      passive: true,\n      capture: true\n    });\n    this._eventsAdded = true;\n  }\n  /** Unregister event listeners on {@link EventSystem#domElement this.domElement}. */\n  _removeEvents() {\n    if (!this._eventsAdded || !this.domElement) {\n      return;\n    }\n    EventsTicker.removeTickerListener();\n    const style = this.domElement.style;\n    if (style) {\n      if (globalThis.navigator.msPointerEnabled) {\n        style.msContentZooming = \"\";\n        style.msTouchAction = \"\";\n      } else if (this.supportsPointerEvents) {\n        style.touchAction = \"\";\n      }\n    }\n    if (this.supportsPointerEvents) {\n      globalThis.document.removeEventListener(\"pointermove\", this._onPointerMove, true);\n      this.domElement.removeEventListener(\"pointerdown\", this._onPointerDown, true);\n      this.domElement.removeEventListener(\"pointerleave\", this._onPointerOverOut, true);\n      this.domElement.removeEventListener(\"pointerover\", this._onPointerOverOut, true);\n      globalThis.removeEventListener(\"pointerup\", this._onPointerUp, true);\n    } else {\n      globalThis.document.removeEventListener(\"mousemove\", this._onPointerMove, true);\n      this.domElement.removeEventListener(\"mousedown\", this._onPointerDown, true);\n      this.domElement.removeEventListener(\"mouseout\", this._onPointerOverOut, true);\n      this.domElement.removeEventListener(\"mouseover\", this._onPointerOverOut, true);\n      globalThis.removeEventListener(\"mouseup\", this._onPointerUp, true);\n      if (this.supportsTouchEvents) {\n        this.domElement.removeEventListener(\"touchstart\", this._onPointerDown, true);\n        this.domElement.removeEventListener(\"touchend\", this._onPointerUp, true);\n        this.domElement.removeEventListener(\"touchmove\", this._onPointerMove, true);\n      }\n    }\n    this.domElement.removeEventListener(\"wheel\", this.onWheel, true);\n    this.domElement = null;\n    this._eventsAdded = false;\n  }\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   * @param  {PointData} point - the point that the result will be stored in\n   * @param  {number} x - the x coord of the position to map\n   * @param  {number} y - the y coord of the position to map\n   */\n  mapPositionToPoint(point, x, y) {\n    const rect = this.domElement.isConnected ? this.domElement.getBoundingClientRect() : {\n      x: 0,\n      y: 0,\n      width: this.domElement.width,\n      height: this.domElement.height,\n      left: 0,\n      top: 0\n    };\n    const resolutionMultiplier = 1 / this.resolution;\n    point.x = (x - rect.left) * (this.domElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.domElement.height / rect.height) * resolutionMultiplier;\n  }\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   * @param event - The original event data from a touch or mouse event\n   * @returns An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n  _normalizeToPointerData(event) {\n    const normalizedEvents = [];\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (let i = 0, li = event.changedTouches.length; i < li; i++) {\n        const touch = event.changedTouches[i];\n        if (typeof touch.button === \"undefined\")\n          touch.button = 0;\n        if (typeof touch.buttons === \"undefined\")\n          touch.buttons = 1;\n        if (typeof touch.isPrimary === \"undefined\") {\n          touch.isPrimary = event.touches.length === 1 && event.type === \"touchstart\";\n        }\n        if (typeof touch.width === \"undefined\")\n          touch.width = touch.radiusX || 1;\n        if (typeof touch.height === \"undefined\")\n          touch.height = touch.radiusY || 1;\n        if (typeof touch.tiltX === \"undefined\")\n          touch.tiltX = 0;\n        if (typeof touch.tiltY === \"undefined\")\n          touch.tiltY = 0;\n        if (typeof touch.pointerType === \"undefined\")\n          touch.pointerType = \"touch\";\n        if (typeof touch.pointerId === \"undefined\")\n          touch.pointerId = touch.identifier || 0;\n        if (typeof touch.pressure === \"undefined\")\n          touch.pressure = touch.force || 0.5;\n        if (typeof touch.twist === \"undefined\")\n          touch.twist = 0;\n        if (typeof touch.tangentialPressure === \"undefined\")\n          touch.tangentialPressure = 0;\n        if (typeof touch.layerX === \"undefined\")\n          touch.layerX = touch.offsetX = touch.clientX;\n        if (typeof touch.layerY === \"undefined\")\n          touch.layerY = touch.offsetY = touch.clientY;\n        touch.isNormalized = true;\n        touch.type = event.type;\n        normalizedEvents.push(touch);\n      }\n    } else if (!globalThis.MouseEvent || event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))) {\n      const tempEvent = event;\n      if (typeof tempEvent.isPrimary === \"undefined\")\n        tempEvent.isPrimary = true;\n      if (typeof tempEvent.width === \"undefined\")\n        tempEvent.width = 1;\n      if (typeof tempEvent.height === \"undefined\")\n        tempEvent.height = 1;\n      if (typeof tempEvent.tiltX === \"undefined\")\n        tempEvent.tiltX = 0;\n      if (typeof tempEvent.tiltY === \"undefined\")\n        tempEvent.tiltY = 0;\n      if (typeof tempEvent.pointerType === \"undefined\")\n        tempEvent.pointerType = \"mouse\";\n      if (typeof tempEvent.pointerId === \"undefined\")\n        tempEvent.pointerId = MOUSE_POINTER_ID;\n      if (typeof tempEvent.pressure === \"undefined\")\n        tempEvent.pressure = 0.5;\n      if (typeof tempEvent.twist === \"undefined\")\n        tempEvent.twist = 0;\n      if (typeof tempEvent.tangentialPressure === \"undefined\")\n        tempEvent.tangentialPressure = 0;\n      tempEvent.isNormalized = true;\n      normalizedEvents.push(tempEvent);\n    } else {\n      normalizedEvents.push(event);\n    }\n    return normalizedEvents;\n  }\n  /**\n   * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n   *\n   * The returned {@link FederatedWheelEvent} is a shared instance. It will not persist across\n   * multiple native wheel events.\n   * @param nativeEvent - The native wheel event that occurred on the canvas.\n   * @returns A federated wheel event.\n   */\n  normalizeWheelEvent(nativeEvent) {\n    const event = this._rootWheelEvent;\n    this._transferMouseData(event, nativeEvent);\n    event.deltaX = nativeEvent.deltaX;\n    event.deltaY = nativeEvent.deltaY;\n    event.deltaZ = nativeEvent.deltaZ;\n    event.deltaMode = nativeEvent.deltaMode;\n    this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n    event.global.copyFrom(event.screen);\n    event.offset.copyFrom(event.screen);\n    event.nativeEvent = nativeEvent;\n    event.type = nativeEvent.type;\n    return event;\n  }\n  /**\n   * Normalizes the `nativeEvent` into a federateed {@link FederatedPointerEvent}.\n   * @param event\n   * @param nativeEvent\n   */\n  _bootstrapEvent(event, nativeEvent) {\n    event.originalEvent = null;\n    event.nativeEvent = nativeEvent;\n    event.pointerId = nativeEvent.pointerId;\n    event.width = nativeEvent.width;\n    event.height = nativeEvent.height;\n    event.isPrimary = nativeEvent.isPrimary;\n    event.pointerType = nativeEvent.pointerType;\n    event.pressure = nativeEvent.pressure;\n    event.tangentialPressure = nativeEvent.tangentialPressure;\n    event.tiltX = nativeEvent.tiltX;\n    event.tiltY = nativeEvent.tiltY;\n    event.twist = nativeEvent.twist;\n    this._transferMouseData(event, nativeEvent);\n    this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n    event.global.copyFrom(event.screen);\n    event.offset.copyFrom(event.screen);\n    event.isTrusted = nativeEvent.isTrusted;\n    if (event.type === \"pointerleave\") {\n      event.type = \"pointerout\";\n    }\n    if (event.type.startsWith(\"mouse\")) {\n      event.type = event.type.replace(\"mouse\", \"pointer\");\n    }\n    if (event.type.startsWith(\"touch\")) {\n      event.type = TOUCH_TO_POINTER[event.type] || event.type;\n    }\n    return event;\n  }\n  /**\n   * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n   * @param event\n   * @param nativeEvent\n   */\n  _transferMouseData(event, nativeEvent) {\n    event.isTrusted = nativeEvent.isTrusted;\n    event.srcElement = nativeEvent.srcElement;\n    event.timeStamp = performance.now();\n    event.type = nativeEvent.type;\n    event.altKey = nativeEvent.altKey;\n    event.button = nativeEvent.button;\n    event.buttons = nativeEvent.buttons;\n    event.client.x = nativeEvent.clientX;\n    event.client.y = nativeEvent.clientY;\n    event.ctrlKey = nativeEvent.ctrlKey;\n    event.metaKey = nativeEvent.metaKey;\n    event.movement.x = nativeEvent.movementX;\n    event.movement.y = nativeEvent.movementY;\n    event.page.x = nativeEvent.pageX;\n    event.page.y = nativeEvent.pageY;\n    event.relatedTarget = null;\n    event.shiftKey = nativeEvent.shiftKey;\n  }\n};\n/** @ignore */\n_EventSystem.extension = {\n  name: \"events\",\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.CanvasSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  priority: -1\n};\n/**\n * The event features that are enabled by the EventSystem\n * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n * @since 7.2.0\n */\n_EventSystem.defaultEventFeatures = {\n  /** Enables pointer events associated with pointer movement. */\n  move: true,\n  /** Enables global pointer move events. */\n  globalMove: true,\n  /** Enables pointer events associated with clicking. */\n  click: true,\n  /** Enables wheel events. */\n  wheel: true\n};\nlet EventSystem = _EventSystem;\n\nexport { EventSystem };\n//# sourceMappingURL=EventSystem.mjs.map\n"],"names":["MOUSE_POINTER_ID","TOUCH_TO_POINTER","_EventSystem","renderer","EventBoundary","EventsTicker","FederatedPointerEvent","FederatedWheelEvent","target","key","value","options","canvas","resolution","mode","applyStyles","style","nativeEvent","events","i","j","nativeEvent2","federatedEvent","normalizedEvents","event","outside","wheelEvent","element","point","x","y","rect","resolutionMultiplier","li","touch","tempEvent","ExtensionType","EventSystem"],"mappings":"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","x_google_ignoreList":[0]}