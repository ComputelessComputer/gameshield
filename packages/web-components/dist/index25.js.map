{"version":3,"file":"index25.js","sources":["../../../node_modules/.pnpm/@pixi+math@7.4.3/node_modules/@pixi/math/lib/shapes/Rectangle.mjs"],"sourcesContent":["import { SHAPES } from \"../const.mjs\";\nimport { Point } from \"../Point.mjs\";\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nclass Rectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rectangle\n   * @param width - The overall width of the rectangle\n   * @param height - The overall height of the rectangle\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = Number(x), this.y = Number(y), this.width = Number(width), this.height = Number(height), this.type = SHAPES.RECT;\n  }\n  /** Returns the left edge of the rectangle. */\n  get left() {\n    return this.x;\n  }\n  /** Returns the right edge of the rectangle. */\n  get right() {\n    return this.x + this.width;\n  }\n  /** Returns the top edge of the rectangle. */\n  get top() {\n    return this.y;\n  }\n  /** Returns the bottom edge of the rectangle. */\n  get bottom() {\n    return this.y + this.height;\n  }\n  /** A constant empty rectangle. */\n  static get EMPTY() {\n    return new Rectangle(0, 0, 0, 0);\n  }\n  /**\n   * Creates a clone of this Rectangle\n   * @returns a copy of the rectangle\n   */\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    return this.x = rectangle.x, this.y = rectangle.y, this.width = rectangle.width, this.height = rectangle.height, this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    return rectangle.x = this.x, rectangle.y = this.y, rectangle.width = this.width, rectangle.height = this.height, rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Rectangle\n   */\n  contains(x, y) {\n    return this.width <= 0 || this.height <= 0 ? !1 : x >= this.x && x < this.x + this.width && y >= this.y && y < this.y + this.height;\n  }\n  /**\n   * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n   * Returns true only if the area of the intersection is >0, this means that Rectangles\n   * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n   * (width or height equal to zero) can't intersect any other rectangle.\n   * @param {Rectangle} other - The Rectangle to intersect with `this`.\n   * @param {Matrix} transform - The transformation matrix of `other`.\n   * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n   */\n  intersects(other, transform) {\n    if (!transform) {\n      const x02 = this.x < other.x ? other.x : this.x;\n      if ((this.right > other.right ? other.right : this.right) <= x02)\n        return !1;\n      const y02 = this.y < other.y ? other.y : this.y;\n      return (this.bottom > other.bottom ? other.bottom : this.bottom) > y02;\n    }\n    const x0 = this.left, x1 = this.right, y0 = this.top, y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0)\n      return !1;\n    const lt = tempPoints[0].set(other.left, other.top), lb = tempPoints[1].set(other.left, other.bottom), rt = tempPoints[2].set(other.right, other.top), rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y)\n      return !1;\n    const s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0 || (transform.apply(lt, lt), transform.apply(lb, lb), transform.apply(rt, rt), transform.apply(rb, rb), Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1))\n      return !1;\n    const nx = s * (lb.y - lt.y), ny = s * (lt.x - lb.x), n00 = nx * x0 + ny * y0, n10 = nx * x1 + ny * y0, n01 = nx * x0 + ny * y1, n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y)\n      return !1;\n    const mx = s * (lt.y - rt.y), my = s * (rt.x - lt.x), m00 = mx * x0 + my * y0, m10 = mx * x1 + my * y0, m01 = mx * x0 + my * y1, m11 = mx * x1 + my * y1;\n    return !(Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y);\n  }\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   * @returns Returns itself.\n   */\n  pad(paddingX = 0, paddingY = paddingX) {\n    return this.x -= paddingX, this.y -= paddingY, this.width += paddingX * 2, this.height += paddingY * 2, this;\n  }\n  /**\n   * Fits this rectangle around the passed one.\n   * @param rectangle - The rectangle to fit.\n   * @returns Returns itself.\n   */\n  fit(rectangle) {\n    const x1 = Math.max(this.x, rectangle.x), x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width), y1 = Math.max(this.y, rectangle.y), y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    return this.x = x1, this.width = Math.max(x2 - x1, 0), this.y = y1, this.height = Math.max(y2 - y1, 0), this;\n  }\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   * @param resolution - resolution\n   * @param eps - precision\n   * @returns Returns itself.\n   */\n  ceil(resolution = 1, eps = 1e-3) {\n    const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution, y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    return this.x = Math.floor((this.x + eps) * resolution) / resolution, this.y = Math.floor((this.y + eps) * resolution) / resolution, this.width = x2 - this.x, this.height = y2 - this.y, this;\n  }\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   * @param rectangle - The rectangle to include.\n   * @returns Returns itself.\n   */\n  enlarge(rectangle) {\n    const x1 = Math.min(this.x, rectangle.x), x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width), y1 = Math.min(this.y, rectangle.y), y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    return this.x = x1, this.width = x2 - x1, this.y = y1, this.height = y2 - y1, this;\n  }\n}\nRectangle.prototype.toString = function() {\n  return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n};\nexport {\n  Rectangle\n};\n//# sourceMappingURL=Rectangle.mjs.map\n"],"names":["tempPoints","Point","Rectangle","x","y","width","height","SHAPES","rectangle","other","transform","x02","y02","x0","x1","y0","y1","lt","lb","rt","rb","s","nx","ny","n00","n10","n01","n11","mx","my","m00","m10","m01","m11","paddingX","paddingY","x2","y2","resolution","eps"],"mappings":"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","x_google_ignoreList":[0]}