{"version":3,"file":"index472.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs"],"sourcesContent":["\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n"],"names":["blendModeIds","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_State","value","state","State"],"mappings":"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","x_google_ignoreList":[0]}