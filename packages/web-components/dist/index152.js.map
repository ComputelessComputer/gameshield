{"version":3,"file":"index152.js","sources":["../../../node_modules/.pnpm/@pixi+compressed-textures@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3/node_modules/@pixi/compressed-textures/lib/resources/CompressedTextureResource.mjs"],"sourcesContent":["import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from \"../const.mjs\";\nimport { BlobResource } from \"./BlobResource.mjs\";\nclass CompressedTextureResource extends BlobResource {\n  /**\n   * @param source - the buffer/URL holding the compressed texture data\n   * @param options\n   * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n   * @param {number} options.width - the image width in pixels.\n   * @param {number} options.height - the image height in pixels.\n   * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n   * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n   *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n   */\n  constructor(source, options) {\n    super(source, options), this.format = options.format, this.levels = options.levels || 1, this._width = options.width, this._height = options.height, this._extension = CompressedTextureResource._formatToExtension(this.format), (options.levelBuffers || this.buffer) && (this._levelBuffers = options.levelBuffers || CompressedTextureResource._createLevelBuffers(\n      source instanceof Uint8Array ? source : this.buffer.uint8View,\n      this.format,\n      this.levels,\n      4,\n      4,\n      // PVRTC has 8x4 blocks in 2bpp mode\n      this.width,\n      this.height\n    ));\n  }\n  /**\n   * @override\n   * @param renderer - A reference to the current renderer\n   * @param _texture - the texture\n   * @param _glTexture - texture instance for this webgl context\n   */\n  upload(renderer, _texture, _glTexture) {\n    const gl = renderer.gl;\n    if (!renderer.context.extensions[this._extension])\n      throw new Error(`${this._extension} textures are not supported on the current machine`);\n    if (!this._levelBuffers)\n      return !1;\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    for (let i = 0, j = this.levels; i < j; i++) {\n      const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n      gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n    }\n    return !0;\n  }\n  /** @protected */\n  onBlobLoaded() {\n    this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n      this.buffer.uint8View,\n      this.format,\n      this.levels,\n      4,\n      4,\n      // PVRTC has 8x4 blocks in 2bpp mode\n      this.width,\n      this.height\n    );\n  }\n  /**\n   * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n   * @private\n   * @param format - the compression format to get the extension for.\n   */\n  static _formatToExtension(format) {\n    if (format >= 33776 && format <= 33779)\n      return \"s3tc\";\n    if (format >= 35916 && format <= 35919)\n      return \"s3tc_sRGB\";\n    if (format >= 37488 && format <= 37497)\n      return \"etc\";\n    if (format >= 35840 && format <= 35843)\n      return \"pvrtc\";\n    if (format === 36196)\n      return \"etc1\";\n    if (format === 35986 || format === 35987 || format === 34798)\n      return \"atc\";\n    if (format >= 36492 && format <= 36495)\n      return \"bptc\";\n    if (format === 37808)\n      return \"astc\";\n    throw new Error(`Invalid (compressed) texture format given: ${format}`);\n  }\n  /**\n   * Pre-creates buffer views for each mipmap level\n   * @private\n   * @param buffer -\n   * @param format - compression formats\n   * @param levels - mipmap levels\n   * @param blockWidth -\n   * @param blockHeight -\n   * @param imageWidth - width of the image in pixels\n   * @param imageHeight - height of the image in pixels\n   */\n  static _createLevelBuffers(buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n    const buffers = new Array(levels);\n    let offset = buffer.byteOffset, levelWidth = imageWidth, levelHeight = imageHeight, alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1), alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1), levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    for (let i = 0; i < levels; i++)\n      buffers[i] = {\n        levelID: i,\n        levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n        levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n        levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n      }, offset += levelSize, levelWidth = levelWidth >> 1 || 1, levelHeight = levelHeight >> 1 || 1, alignedLevelWidth = levelWidth + blockWidth - 1 & ~(blockWidth - 1), alignedLevelHeight = levelHeight + blockHeight - 1 & ~(blockHeight - 1), levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n    return buffers;\n  }\n}\nexport {\n  CompressedTextureResource\n};\n//# sourceMappingURL=CompressedTextureResource.mjs.map\n"],"names":["CompressedTextureResource","BlobResource","source","options","renderer","_texture","_glTexture","gl","i","j","levelID","levelWidth","levelHeight","levelBuffer","format","buffer","levels","blockWidth","blockHeight","imageWidth","imageHeight","buffers","offset","alignedLevelWidth","alignedLevelHeight","levelSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL"],"mappings":"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","x_google_ignoreList":[0]}