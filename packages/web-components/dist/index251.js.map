{"version":3,"file":"index251.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/resources/ArrayResource.mjs"],"sourcesContent":["import { TARGETS } from \"@pixi/constants\";\nimport { AbstractMultiResource } from \"./AbstractMultiResource.mjs\";\nclass ArrayResource extends AbstractMultiResource {\n  /**\n   * @param source - Number of items in array or the collection\n   *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n   * @param options - Options to apply to {@link PIXI.autoDetectResource}\n   * @param {number} [options.width] - Width of the resource\n   * @param {number} [options.height] - Height of the resource\n   */\n  constructor(source, options) {\n    const { width, height } = options || {};\n    let urls, length;\n    Array.isArray(source) ? (urls = source, length = source.length) : length = source, super(length, { width, height }), urls && this.initFromArray(urls, options);\n  }\n  /**\n   * Set a baseTexture by ID,\n   * ArrayResource just takes resource from it, nothing more\n   * @param baseTexture\n   * @param index - Zero-based index of resource to set\n   * @returns - Instance for chaining\n   */\n  addBaseTextureAt(baseTexture, index) {\n    if (baseTexture.resource)\n      this.addResourceAt(baseTexture.resource, index);\n    else\n      throw new Error(\"ArrayResource does not support RenderTexture\");\n    return this;\n  }\n  /**\n   * Add binding\n   * @param baseTexture\n   */\n  bind(baseTexture) {\n    super.bind(baseTexture), baseTexture.target = TARGETS.TEXTURE_2D_ARRAY;\n  }\n  /**\n   * Upload the resources to the GPU.\n   * @param renderer\n   * @param texture\n   * @param glTexture\n   * @returns - whether texture was uploaded\n   */\n  upload(renderer, texture, glTexture) {\n    const { length, itemDirtyIds, items } = this, { gl } = renderer;\n    glTexture.dirtyId < 0 && gl.texImage3D(\n      gl.TEXTURE_2D_ARRAY,\n      0,\n      glTexture.internalFormat,\n      this._width,\n      this._height,\n      length,\n      0,\n      texture.format,\n      glTexture.type,\n      null\n    );\n    for (let i = 0; i < length; i++) {\n      const item = items[i];\n      itemDirtyIds[i] < item.dirtyId && (itemDirtyIds[i] = item.dirtyId, item.valid && gl.texSubImage3D(\n        gl.TEXTURE_2D_ARRAY,\n        0,\n        0,\n        // xoffset\n        0,\n        // yoffset\n        i,\n        // zoffset\n        item.resource.width,\n        item.resource.height,\n        1,\n        texture.format,\n        glTexture.type,\n        item.resource.source\n      ));\n    }\n    return !0;\n  }\n}\nexport {\n  ArrayResource\n};\n//# sourceMappingURL=ArrayResource.mjs.map\n"],"names":["ArrayResource","AbstractMultiResource","source","options","width","height","urls","length","baseTexture","index","TARGETS","renderer","texture","glTexture","itemDirtyIds","items","gl","i","item"],"mappings":";;AAEA,MAAMA,UAAsBC,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhD,YAAYC,GAAQC,GAAS;AAC3B,UAAM,EAAE,OAAAC,GAAO,QAAAC,MAAWF,KAAW,CAAA;AACrC,QAAIG,GAAMC;AACV,UAAM,QAAQL,CAAM,KAAKI,IAAOJ,GAAQK,IAASL,EAAO,UAAUK,IAASL,GAAQ,MAAMK,GAAQ,EAAE,OAAAH,GAAO,QAAAC,GAAQ,GAAGC,KAAQ,KAAK,cAAcA,GAAMH,CAAO;AAAA,EAC9J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,iBAAiBK,GAAaC,GAAO;AACnC,QAAID,EAAY;AACd,WAAK,cAAcA,EAAY,UAAUC,CAAK;AAAA;AAE9C,YAAM,IAAI,MAAM,8CAA8C;AAChE,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAKD,GAAa;AAChB,UAAM,KAAKA,CAAW,GAAGA,EAAY,SAASE,EAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAOC,GAAUC,GAASC,GAAW;AACnC,UAAM,EAAE,QAAAN,GAAQ,cAAAO,GAAc,OAAAC,EAAK,IAAK,MAAM,EAAE,IAAAC,EAAI,IAAGL;AACvD,IAAAE,EAAU,UAAU,KAAKG,EAAG;AAAA,MAC1BA,EAAG;AAAA,MACH;AAAA,MACAH,EAAU;AAAA,MACV,KAAK;AAAA,MACL,KAAK;AAAA,MACLN;AAAA,MACA;AAAA,MACAK,EAAQ;AAAA,MACRC,EAAU;AAAA,MACV;AAAA,IACN;AACI,aAASI,IAAI,GAAGA,IAAIV,GAAQU,KAAK;AAC/B,YAAMC,IAAOH,EAAME,CAAC;AACpB,MAAAH,EAAaG,CAAC,IAAIC,EAAK,YAAYJ,EAAaG,CAAC,IAAIC,EAAK,SAASA,EAAK,SAASF,EAAG;AAAA,QAClFA,EAAG;AAAA,QACH;AAAA,QACA;AAAA;AAAA,QAEA;AAAA;AAAA,QAEAC;AAAA;AAAA,QAEAC,EAAK,SAAS;AAAA,QACdA,EAAK,SAAS;AAAA,QACd;AAAA,QACAN,EAAQ;AAAA,QACRC,EAAU;AAAA,QACVK,EAAK,SAAS;AAAA,MACtB;AAAA,IACK;AACD,WAAO;AAAA,EACR;AACH;","x_google_ignoreList":[0]}