{"version":3,"file":"index149.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/Graphics.mjs"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { ViewContainer } from '../../view/ViewContainer.mjs';\nimport { GraphicsContext } from './GraphicsContext.mjs';\n\n\"use strict\";\nclass Graphics extends ViewContainer {\n  /**\n   * @param options - Options for the Graphics.\n   */\n  constructor(options) {\n    if (options instanceof GraphicsContext) {\n      options = { context: options };\n    }\n    const { context, roundPixels, ...rest } = options || {};\n    super({\n      label: \"Graphics\",\n      ...rest\n    });\n    this.renderPipeId = \"graphics\";\n    if (!context) {\n      this._context = this._ownedContext = new GraphicsContext();\n    } else {\n      this._context = context;\n    }\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.allowChildren = false;\n    this.roundPixels = roundPixels ?? false;\n  }\n  set context(context) {\n    if (context === this._context)\n      return;\n    this._context.off(\"update\", this.onViewUpdate, this);\n    this._context = context;\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.onViewUpdate();\n  }\n  get context() {\n    return this._context;\n  }\n  /**\n   * The local bounds of the graphic.\n   * @type {rendering.Bounds}\n   */\n  get bounds() {\n    return this._context.bounds;\n  }\n  /**\n   * Graphics objects do not need to update their bounds as the context handles this.\n   * @private\n   */\n  updateBounds() {\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    return this._context.containsPoint(point);\n  }\n  /**\n   * Destroys this graphics renderable and optionally its context.\n   * @param options - Options parameter. A boolean will act as if all options\n   *\n   * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n   * then the context will still be destroyed.\n   *\n   * If you want to explicitly not destroy this context that this graphics created,\n   * then you should pass destroy({ context: false })\n   *\n   * If the context was passed in as an argument to the constructor then it will not be destroyed\n   * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n   * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n   * @param {boolean} [options.context=false] - Should destroy the context\n   */\n  destroy(options) {\n    if (this._ownedContext && !options) {\n      this._ownedContext.destroy(options);\n    } else if (options === true || options?.context === true) {\n      this._context.destroy(options);\n    }\n    this._ownedContext = null;\n    this._context = null;\n    super.destroy(options);\n  }\n  _callContextMethod(method, args) {\n    this.context[method](...args);\n    return this;\n  }\n  // --------------------------------------- GraphicsContext methods ---------------------------------------\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param {FillInput} args - The fill style to apply. This can be a simple color, a gradient or\n   * pattern object, or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(...args) {\n    return this._callContextMethod(\"setFillStyle\", args);\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param {StrokeInput} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   * or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(...args) {\n    return this._callContextMethod(\"setStrokeStyle\", args);\n  }\n  fill(...args) {\n    return this._callContextMethod(\"fill\", args);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillStyle parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param {FillStyle} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n   * complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(...args) {\n    return this._callContextMethod(\"stroke\", args);\n  }\n  texture(...args) {\n    return this._callContextMethod(\"texture\", args);\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    return this._callContextMethod(\"beginPath\", []);\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   */\n  cut() {\n    return this._callContextMethod(\"cut\", []);\n  }\n  arc(...args) {\n    return this._callContextMethod(\"arc\", args);\n  }\n  arcTo(...args) {\n    return this._callContextMethod(\"arcTo\", args);\n  }\n  arcToSvg(...args) {\n    return this._callContextMethod(\"arcToSvg\", args);\n  }\n  bezierCurveTo(...args) {\n    return this._callContextMethod(\"bezierCurveTo\", args);\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    return this._callContextMethod(\"closePath\", []);\n  }\n  ellipse(...args) {\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  circle(...args) {\n    return this._callContextMethod(\"circle\", args);\n  }\n  path(...args) {\n    return this._callContextMethod(\"path\", args);\n  }\n  lineTo(...args) {\n    return this._callContextMethod(\"lineTo\", args);\n  }\n  moveTo(...args) {\n    return this._callContextMethod(\"moveTo\", args);\n  }\n  quadraticCurveTo(...args) {\n    return this._callContextMethod(\"quadraticCurveTo\", args);\n  }\n  rect(...args) {\n    return this._callContextMethod(\"rect\", args);\n  }\n  roundRect(...args) {\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  poly(...args) {\n    return this._callContextMethod(\"poly\", args);\n  }\n  regularPoly(...args) {\n    return this._callContextMethod(\"regularPoly\", args);\n  }\n  roundPoly(...args) {\n    return this._callContextMethod(\"roundPoly\", args);\n  }\n  roundShape(...args) {\n    return this._callContextMethod(\"roundShape\", args);\n  }\n  filletRect(...args) {\n    return this._callContextMethod(\"filletRect\", args);\n  }\n  chamferRect(...args) {\n    return this._callContextMethod(\"chamferRect\", args);\n  }\n  star(...args) {\n    return this._callContextMethod(\"star\", args);\n  }\n  svg(...args) {\n    return this._callContextMethod(\"svg\", args);\n  }\n  restore(...args) {\n    return this._callContextMethod(\"restore\", args);\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    return this._callContextMethod(\"save\", []);\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this.context.getTransform();\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing\n   * any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    return this._callContextMethod(\"resetTransform\", []);\n  }\n  rotateTransform(...args) {\n    return this._callContextMethod(\"rotate\", args);\n  }\n  scaleTransform(...args) {\n    return this._callContextMethod(\"scale\", args);\n  }\n  setTransform(...args) {\n    return this._callContextMethod(\"setTransform\", args);\n  }\n  transform(...args) {\n    return this._callContextMethod(\"transform\", args);\n  }\n  translateTransform(...args) {\n    return this._callContextMethod(\"translate\", args);\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    return this._callContextMethod(\"clear\", []);\n  }\n  /**\n   * The fill style to use.\n   * @type {ConvertedFillStyle}\n   */\n  get fillStyle() {\n    return this._context.fillStyle;\n  }\n  set fillStyle(value) {\n    this._context.fillStyle = value;\n  }\n  /**\n   * The stroke style to use.\n   * @type {ConvertedStrokeStyle}\n   */\n  get strokeStyle() {\n    return this._context.strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._context.strokeStyle = value;\n  }\n  /**\n   * Creates a new Graphics object.\n   * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n   * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n   * will be shared between the two objects (default false). If true, the context will be\n   * cloned (recommended if you need to modify the context in any way).\n   * @returns - A clone of the graphics object\n   */\n  clone(deep = false) {\n    if (deep) {\n      return new Graphics(this._context.clone());\n    }\n    this._ownedContext = null;\n    const clone = new Graphics(this._context);\n    return clone;\n  }\n  // -------- v7 deprecations ---------\n  /**\n   * @param width\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n   */\n  lineStyle(width, color, alpha) {\n    deprecation(v8_0_0, \"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.\");\n    const strokeStyle = {};\n    width && (strokeStyle.width = width);\n    color && (strokeStyle.color = color);\n    alpha && (strokeStyle.alpha = alpha);\n    this.context.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  beginFill(color, alpha) {\n    deprecation(v8_0_0, \"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    const fillStyle = {};\n    if (color !== void 0)\n      fillStyle.color = color;\n    if (alpha !== void 0)\n      fillStyle.alpha = alpha;\n    this.context.fillStyle = fillStyle;\n    return this;\n  }\n  /**\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  endFill() {\n    deprecation(v8_0_0, \"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    this.context.fill();\n    const strokeStyle = this.context.strokeStyle;\n    if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha) {\n      this.context.stroke();\n    }\n    return this;\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n   */\n  drawCircle(...args) {\n    deprecation(v8_0_0, \"Graphics#drawCircle has been renamed to Graphics#circle\");\n    return this._callContextMethod(\"circle\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n   */\n  drawEllipse(...args) {\n    deprecation(v8_0_0, \"Graphics#drawEllipse has been renamed to Graphics#ellipse\");\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n   */\n  drawPolygon(...args) {\n    deprecation(v8_0_0, \"Graphics#drawPolygon has been renamed to Graphics#poly\");\n    return this._callContextMethod(\"poly\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n   */\n  drawRect(...args) {\n    deprecation(v8_0_0, \"Graphics#drawRect has been renamed to Graphics#rect\");\n    return this._callContextMethod(\"rect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n   */\n  drawRoundedRect(...args) {\n    deprecation(v8_0_0, \"Graphics#drawRoundedRect has been renamed to Graphics#roundRect\");\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n   */\n  drawStar(...args) {\n    deprecation(v8_0_0, \"Graphics#drawStar has been renamed to Graphics#star\");\n    return this._callContextMethod(\"star\", args);\n  }\n}\n\nexport { Graphics };\n//# sourceMappingURL=Graphics.mjs.map\n"],"names":["Graphics","ViewContainer","options","GraphicsContext","context","roundPixels","rest","point","method","args","value","deep","width","color","alpha","deprecation","v8_0_0","strokeStyle","fillStyle"],"mappings":"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","x_google_ignoreList":[0]}