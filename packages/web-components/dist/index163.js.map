{"version":3,"file":"index163.js","sources":["../../../node_modules/.pnpm/@pixi+display@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/display/lib/Bounds.mjs"],"sourcesContent":["import { Rectangle } from \"@pixi/core\";\nclass Bounds {\n  constructor() {\n    this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = -1 / 0, this.maxY = -1 / 0, this.rect = null, this.updateID = -1;\n  }\n  /**\n   * Checks if bounds are empty.\n   * @returns - True if empty.\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /** Clears the bounds and resets. */\n  clear() {\n    this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = -1 / 0, this.maxY = -1 / 0;\n  }\n  /**\n   * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n   * It is not guaranteed that it will return tempRect\n   * @param rect - Temporary object will be used if AABB is not empty\n   * @returns - A rectangle of the bounds\n   */\n  getRectangle(rect) {\n    return this.minX > this.maxX || this.minY > this.maxY ? Rectangle.EMPTY : (rect = rect || new Rectangle(0, 0, 1, 1), rect.x = this.minX, rect.y = this.minY, rect.width = this.maxX - this.minX, rect.height = this.maxY - this.minY, rect);\n  }\n  /**\n   * This function should be inlined when its possible.\n   * @param point - The point to add.\n   */\n  addPoint(point) {\n    this.minX = Math.min(this.minX, point.x), this.maxX = Math.max(this.maxX, point.x), this.minY = Math.min(this.minY, point.y), this.maxY = Math.max(this.maxY, point.y);\n  }\n  /**\n   * Adds a point, after transformed. This should be inlined when its possible.\n   * @param matrix\n   * @param point\n   */\n  addPointMatrix(matrix, point) {\n    const { a, b, c, d, tx, ty } = matrix, x = a * point.x + c * point.y + tx, y = b * point.x + d * point.y + ty;\n    this.minX = Math.min(this.minX, x), this.maxX = Math.max(this.maxX, x), this.minY = Math.min(this.minY, y), this.maxY = Math.max(this.maxY, y);\n  }\n  /**\n   * Adds a quad, not transformed\n   * @param vertices - The verts to add.\n   */\n  addQuad(vertices) {\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY, x = vertices[0], y = vertices[1];\n    minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = vertices[2], y = vertices[3], minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = vertices[4], y = vertices[5], minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = vertices[6], y = vertices[7], minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Adds sprite frame, transformed.\n   * @param transform - transform to apply\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  addFrame(transform, x0, y0, x1, y1) {\n    this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n  }\n  /**\n   * Adds sprite frame, multiplied by matrix\n   * @param matrix - matrix to apply\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  addFrameMatrix(matrix, x0, y0, x1, y1) {\n    const a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY, x = a * x0 + c * y0 + tx, y = b * x0 + d * y0 + ty;\n    minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = a * x1 + c * y0 + tx, y = b * x1 + d * y0 + ty, minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = a * x0 + c * y1 + tx, y = b * x0 + d * y1 + ty, minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, x = a * x1 + c * y1 + tx, y = b * x1 + d * y1 + ty, minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY, this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Adds screen vertices from array\n   * @param vertexData - calculated vertices\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   */\n  addVertexData(vertexData, beginOffset, endOffset) {\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const x = vertexData[i], y = vertexData[i + 1];\n      minX = x < minX ? x : minX, minY = y < minY ? y : minY, maxX = x > maxX ? x : maxX, maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Add an array of mesh vertices\n   * @param transform - mesh transform\n   * @param vertices - mesh coordinates in array\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   */\n  addVertices(transform, vertices, beginOffset, endOffset) {\n    this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n  }\n  /**\n   * Add an array of mesh vertices.\n   * @param matrix - mesh matrix\n   * @param vertices - mesh coordinates in array\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   * @param padX - x padding\n   * @param padY - y padding\n   */\n  addVerticesMatrix(matrix, vertices, beginOffset, endOffset, padX = 0, padY = padX) {\n    const a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;\n    let minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const rawX = vertices[i], rawY = vertices[i + 1], x = a * rawX + c * rawY + tx, y = d * rawY + b * rawX + ty;\n      minX = Math.min(minX, x - padX), maxX = Math.max(maxX, x + padX), minY = Math.min(minY, y - padY), maxY = Math.max(maxY, y + padY);\n    }\n    this.minX = minX, this.minY = minY, this.maxX = maxX, this.maxY = maxY;\n  }\n  /**\n   * Adds other {@link PIXI.Bounds}.\n   * @param bounds - The Bounds to be added\n   */\n  addBounds(bounds) {\n    const minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n    this.minX = bounds.minX < minX ? bounds.minX : minX, this.minY = bounds.minY < minY ? bounds.minY : minY, this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX, this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n  }\n  /**\n   * Adds other Bounds, masked with Bounds.\n   * @param bounds - The Bounds to be added.\n   * @param mask - TODO\n   */\n  addBoundsMask(bounds, mask) {\n    const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX, _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY, _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX, _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n    if (_minX <= _maxX && _minY <= _maxY) {\n      const minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX, this.minY = _minY < minY ? _minY : minY, this.maxX = _maxX > maxX ? _maxX : maxX, this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  }\n  /**\n   * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n   * @param bounds - other bounds\n   * @param matrix - multiplicator\n   */\n  addBoundsMatrix(bounds, matrix) {\n    this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n  }\n  /**\n   * Adds other Bounds, masked with Rectangle.\n   * @param bounds - TODO\n   * @param area - TODO\n   */\n  addBoundsArea(bounds, area) {\n    const _minX = bounds.minX > area.x ? bounds.minX : area.x, _minY = bounds.minY > area.y ? bounds.minY : area.y, _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width, _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n    if (_minX <= _maxX && _minY <= _maxY) {\n      const minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX, this.minY = _minY < minY ? _minY : minY, this.maxX = _maxX > maxX ? _maxX : maxX, this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   */\n  pad(paddingX = 0, paddingY = paddingX) {\n    this.isEmpty() || (this.minX -= paddingX, this.maxX += paddingX, this.minY -= paddingY, this.maxY += paddingY);\n  }\n  /**\n   * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   * @param padX - padding X\n   * @param padY - padding Y\n   */\n  addFramePad(x0, y0, x1, y1, padX, padY) {\n    x0 -= padX, y0 -= padY, x1 += padX, y1 += padY, this.minX = this.minX < x0 ? this.minX : x0, this.maxX = this.maxX > x1 ? this.maxX : x1, this.minY = this.minY < y0 ? this.minY : y0, this.maxY = this.maxY > y1 ? this.maxY : y1;\n  }\n}\nexport {\n  Bounds\n};\n//# sourceMappingURL=Bounds.mjs.map\n"],"names":["Bounds","rect","Rectangle","point","matrix","a","b","c","d","tx","ty","x","y","vertices","minX","minY","maxX","maxY","transform","x0","y0","x1","y1","vertexData","beginOffset","endOffset","i","padX","padY","rawX","rawY","bounds","mask","_minX","_minY","_maxX","_maxY","area","paddingX","paddingY"],"mappings":"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","x_google_ignoreList":[0]}