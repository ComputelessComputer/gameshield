{"version":3,"file":"index101.js","sources":["../../../node_modules/.pnpm/@pixi+compressed-textures@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3/node_modules/@pixi/compressed-textures/lib/parsers/parseKTX.mjs"],"sourcesContent":["import { TYPES, FORMATS, BufferResource } from \"@pixi/core\";\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from \"../const.mjs\";\nimport \"../resources/index.mjs\";\nimport { CompressedTextureResource } from \"../resources/CompressedTextureResource.mjs\";\nconst FILE_IDENTIFIER = [171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10], ENDIANNESS = 67305985, KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n}, FILE_HEADER_SIZE = 64, TYPES_TO_BYTES_PER_COMPONENT = {\n  [TYPES.UNSIGNED_BYTE]: 1,\n  [TYPES.UNSIGNED_SHORT]: 2,\n  [TYPES.INT]: 4,\n  [TYPES.UNSIGNED_INT]: 4,\n  [TYPES.FLOAT]: 4,\n  [TYPES.HALF_FLOAT]: 8\n}, FORMATS_TO_COMPONENTS = {\n  [FORMATS.RGBA]: 4,\n  [FORMATS.RGB]: 3,\n  [FORMATS.RG]: 2,\n  [FORMATS.RED]: 1,\n  [FORMATS.LUMINANCE]: 1,\n  [FORMATS.LUMINANCE_ALPHA]: 2,\n  [FORMATS.ALPHA]: 1\n}, TYPES_TO_BYTES_PER_PIXEL = {\n  [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n  [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n  [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\nfunction parseKTX(url, arrayBuffer, loadKeyValueData = !1) {\n  const dataView = new DataView(arrayBuffer);\n  if (!validate(url, dataView))\n    return null;\n  const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, !0) === ENDIANNESS, glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian), glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian), glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian), pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian), pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1, pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1, numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1, numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian), numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian), bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  if (pixelHeight === 0 || pixelDepth !== 1)\n    throw new Error(\"Only 2D textures are supported\");\n  if (numberOfFaces !== 1)\n    throw new Error(\"CubeTextures are not supported by KTXLoader yet!\");\n  if (numberOfArrayElements !== 1)\n    throw new Error(\"WebGL does not support array textures\");\n  const blockWidth = 4, blockHeight = 4, alignedWidth = pixelWidth + 3 & -4, alignedHeight = pixelHeight + 3 & -4, imageBuffers = new Array(numberOfArrayElements);\n  let imagePixels = pixelWidth * pixelHeight;\n  glType === 0 && (imagePixels = alignedWidth * alignedHeight);\n  let imagePixelByteSize;\n  if (glType !== 0 ? TYPES_TO_BYTES_PER_COMPONENT[glType] ? imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat] : imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType] : imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat], imagePixelByteSize === void 0)\n    throw new Error(\"Unable to resolve the pixel format stored in the *.ktx file!\");\n  const kvData = loadKeyValueData ? parseKvData(dataView, bytesOfKeyValueData, littleEndian) : null;\n  let mipByteSize = imagePixels * imagePixelByteSize, mipWidth = pixelWidth, mipHeight = pixelHeight, alignedMipWidth = alignedWidth, alignedMipHeight = alignedHeight, imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n  for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    const imageSize = dataView.getUint32(imageOffset, littleEndian);\n    let elementOffset = imageOffset + 4;\n    for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n      let mips = imageBuffers[arrayElement];\n      mips || (mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels)), mips[mipmapLevel] = {\n        levelID: mipmapLevel,\n        // don't align mipWidth when texture not compressed! (glType not zero)\n        levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n        levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n        levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n      }, elementOffset += mipByteSize;\n    }\n    imageOffset += imageSize + 4, imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset, mipWidth = mipWidth >> 1 || 1, mipHeight = mipHeight >> 1 || 1, alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1), alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1), mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  return glType !== 0 ? {\n    uncompressed: imageBuffers.map((levelBuffers) => {\n      let buffer = levelBuffers[0].levelBuffer, convertToInt = !1;\n      return glType === TYPES.FLOAT ? buffer = new Float32Array(\n        levelBuffers[0].levelBuffer.buffer,\n        levelBuffers[0].levelBuffer.byteOffset,\n        levelBuffers[0].levelBuffer.byteLength / 4\n      ) : glType === TYPES.UNSIGNED_INT ? (convertToInt = !0, buffer = new Uint32Array(\n        levelBuffers[0].levelBuffer.buffer,\n        levelBuffers[0].levelBuffer.byteOffset,\n        levelBuffers[0].levelBuffer.byteLength / 4\n      )) : glType === TYPES.INT && (convertToInt = !0, buffer = new Int32Array(\n        levelBuffers[0].levelBuffer.buffer,\n        levelBuffers[0].levelBuffer.byteOffset,\n        levelBuffers[0].levelBuffer.byteLength / 4\n      )), {\n        resource: new BufferResource(\n          buffer,\n          {\n            width: levelBuffers[0].levelWidth,\n            height: levelBuffers[0].levelHeight\n          }\n        ),\n        type: glType,\n        format: convertToInt ? convertFormatToInteger(glFormat) : glFormat\n      };\n    }),\n    kvData\n  } : {\n    compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n      format: glInternalFormat,\n      width: pixelWidth,\n      height: pixelHeight,\n      levels: numberOfMipmapLevels,\n      levelBuffers\n    })),\n    kvData\n  };\n}\nfunction validate(url, dataView) {\n  for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n      return console.error(`${url} is not a valid *.ktx file!`), !1;\n  return !0;\n}\nfunction convertFormatToInteger(format) {\n  switch (format) {\n    case FORMATS.RGBA:\n      return FORMATS.RGBA_INTEGER;\n    case FORMATS.RGB:\n      return FORMATS.RGB_INTEGER;\n    case FORMATS.RG:\n      return FORMATS.RG_INTEGER;\n    case FORMATS.RED:\n      return FORMATS.RED_INTEGER;\n    default:\n      return format;\n  }\n}\nfunction parseKvData(dataView, bytesOfKeyValueData, littleEndian) {\n  const kvData = /* @__PURE__ */ new Map();\n  let bytesIntoKeyValueData = 0;\n  for (; bytesIntoKeyValueData < bytesOfKeyValueData; ) {\n    const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian), keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4, valuePadding = 3 - (keyAndValueByteSize + 3) % 4;\n    if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData) {\n      console.error(\"KTXLoader: keyAndValueByteSize out of bounds\");\n      break;\n    }\n    let keyNulByte = 0;\n    for (; keyNulByte < keyAndValueByteSize && dataView.getUint8(keyAndValueByteOffset + keyNulByte) !== 0; keyNulByte++)\n      ;\n    if (keyNulByte === -1) {\n      console.error(\"KTXLoader: Failed to find null byte terminating kvData key\");\n      break;\n    }\n    const key = new TextDecoder().decode(\n      new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n    ), value = new DataView(\n      dataView.buffer,\n      keyAndValueByteOffset + keyNulByte + 1,\n      keyAndValueByteSize - keyNulByte - 1\n    );\n    kvData.set(key, value), bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n  }\n  return kvData;\n}\nexport {\n  FORMATS_TO_COMPONENTS,\n  TYPES_TO_BYTES_PER_COMPONENT,\n  TYPES_TO_BYTES_PER_PIXEL,\n  parseKTX\n};\n//# sourceMappingURL=parseKTX.mjs.map\n"],"names":["FILE_IDENTIFIER","ENDIANNESS","KTX_FIELDS","FILE_HEADER_SIZE","TYPES_TO_BYTES_PER_COMPONENT","TYPES","FORMATS_TO_COMPONENTS","FORMATS","TYPES_TO_BYTES_PER_PIXEL","parseKTX","url","arrayBuffer","loadKeyValueData","dataView","validate","littleEndian","glType","glFormat","glInternalFormat","pixelWidth","pixelHeight","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","blockWidth","blockHeight","alignedWidth","alignedHeight","imageBuffers","imagePixels","imagePixelByteSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","kvData","parseKvData","mipByteSize","mipWidth","mipHeight","alignedMipWidth","alignedMipHeight","imageOffset","mipmapLevel","imageSize","elementOffset","arrayElement","mips","levelBuffers","buffer","convertToInt","BufferResource","convertFormatToInteger","CompressedTextureResource","i","format","bytesIntoKeyValueData","keyAndValueByteSize","keyAndValueByteOffset","valuePadding","keyNulByte","key","value"],"mappings":"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","x_google_ignoreList":[0]}