{"version":3,"file":"index130.js","sources":["../../game-core/dist/src/games/snake.js"],"sourcesContent":["/**\n * Snake Game Implementation\n *\n * A classic snake game where the player controls a snake that grows when eating food.\n *\n * @packageDocumentation\n */\nimport * as PIXI from 'pixi.js';\nimport { BaseGame } from './base-game';\n/**\n * Class representing a Snake game implementation\n */\nexport class SnakeGame extends BaseGame {\n    /**\n     * Create a new SnakeGame instance\n     *\n     * @param options - Game creation options\n     */\n    constructor(options) {\n        var _a;\n        super(options.app, {\n            width: options.width,\n            height: options.height,\n            difficulty: options.difficulty,\n            backgroundColor: options.backgroundColor,\n            assetsPath: options.assetsPath,\n            onLoad: options.onLoad\n        });\n        /** Snake body segments */\n        this.snake = [];\n        /** Direction of movement */\n        this.direction = { x: 1, y: 0 };\n        /** Next queued direction change */\n        this.nextDirection = { x: 1, y: 0 };\n        /** Food position */\n        this.food = { x: 0, y: 0 };\n        /** Graphics for rendering */\n        this.graphics = null;\n        /** Cell size in pixels */\n        this.cellSize = 0;\n        /** Score (food eaten) */\n        this.score = 0;\n        /** Text display for score */\n        this.scoreText = null;\n        /** Last update time for movement timing */\n        this.lastUpdateTime = 0;\n        // Set up snake specific options based on difficulty\n        this.gameConfig = {\n            gridSize: options.gridSize || this.getDifficultyBasedGridSize(),\n            startLength: options.startLength || this.getDifficultyBasedStartLength(),\n            speed: options.speed || this.getDifficultyBasedSpeed(),\n            wrapAround: (_a = options.wrapAround) !== null && _a !== void 0 ? _a : this.getDifficultyBasedWrapAround()\n        };\n        // Calculate cell size\n        this.cellSize = Math.min(this.config.width / this.gameConfig.gridSize, this.config.height / this.gameConfig.gridSize);\n        // Set completion callback if provided\n        if (options.onComplete) {\n            this.setCompletionCallback(options.onComplete);\n        }\n        // Initialize the game\n        this.init();\n    }\n    /**\n     * Initialize the snake game\n     *\n     * @protected\n     */\n    initialize() {\n        // This would contain the full implementation with:\n        // - Setting up the snake and initial food\n        // - Handling keyboard input\n        // - Setting up the game grid\n        // - Creating score display\n        // For now, we'll just add a placeholder message\n        const comingSoonText = new PIXI.Text('Snake Game\\n\\nClick to complete demo', {\n            fontFamily: 'Arial',\n            fontSize: 24,\n            fill: 0xffffff,\n            align: 'center'\n        });\n        comingSoonText.anchor.set(0.5);\n        comingSoonText.x = this.config.width / 2;\n        comingSoonText.y = this.config.height / 2;\n        this.container.addChild(comingSoonText);\n        // For demo purposes, add a click handler that completes the game\n        this.container.eventMode = 'static';\n        this.container.cursor = 'pointer';\n        this.container.on('pointerdown', () => {\n            this.complete(true, 75, { demo: true });\n        });\n        // Set up the game ticker\n        this.app.ticker.add(this.update.bind(this));\n    }\n    /**\n     * Update game state on each frame\n     *\n     * @param ticker - PIXI ticker\n     * @protected\n     */\n    update(ticker) {\n        const delta = ticker.deltaTime;\n        // In a full implementation, this would:\n        // - Update snake position based on direction\n        // - Check for collisions with walls, food, and self\n        // - Grow snake when food is eaten\n        // - Keep track of score\n    }\n    /**\n     * Get grid size based on difficulty\n     *\n     * @returns Grid size (number of cells)\n     * @private\n     */\n    getDifficultyBasedGridSize() {\n        switch (this.config.difficulty) {\n            case 'easy': return 15;\n            case 'medium': return 20;\n            case 'hard': return 25;\n            default: return 20;\n        }\n    }\n    /**\n     * Get starting snake length based on difficulty\n     *\n     * @returns Starting length of snake\n     * @private\n     */\n    getDifficultyBasedStartLength() {\n        switch (this.config.difficulty) {\n            case 'easy': return 5;\n            case 'medium': return 4;\n            case 'hard': return 3;\n            default: return 4;\n        }\n    }\n    /**\n     * Get snake speed based on difficulty\n     *\n     * @returns Speed in cells per second\n     * @private\n     */\n    getDifficultyBasedSpeed() {\n        switch (this.config.difficulty) {\n            case 'easy': return 5;\n            case 'medium': return 8;\n            case 'hard': return 12;\n            default: return 8;\n        }\n    }\n    /**\n     * Get whether wrap around is enabled based on difficulty\n     *\n     * @returns Whether wrap around is enabled\n     * @private\n     */\n    getDifficultyBasedWrapAround() {\n        switch (this.config.difficulty) {\n            case 'easy': return true;\n            case 'medium': return true;\n            case 'hard': return false;\n            default: return true;\n        }\n    }\n}\n"],"names":["SnakeGame","BaseGame","options","_a","comingSoonText","PIXI.Text","ticker"],"mappings":"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"}