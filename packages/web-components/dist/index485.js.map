{"version":3,"file":"index485.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/container/container-mixins/childrenHelperMixin.mjs"],"sourcesContent":["import { removeItems } from '../../../utils/data/removeItems.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst childrenHelperMixin = {\n  allowChildren: true,\n  /**\n   * Removes all children from this container that are within the begin and end indexes.\n   * @param beginIndex - The beginning position.\n   * @param endIndex - The ending position. Default value is size of the container.\n   * @returns - List of removed children\n   * @memberof scene.Container#\n   */\n  removeChildren(beginIndex = 0, endIndex) {\n    const end = endIndex ?? this.children.length;\n    const range = end - beginIndex;\n    const removed = [];\n    if (range > 0 && range <= end) {\n      for (let i = end - 1; i >= beginIndex; i--) {\n        const child = this.children[i];\n        if (!child)\n          continue;\n        removed.push(child);\n        child.parent = null;\n      }\n      removeItems(this.children, beginIndex, end);\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      if (renderGroup) {\n        renderGroup.removeChildren(removed);\n      }\n      for (let i = 0; i < removed.length; ++i) {\n        this.emit(\"childRemoved\", removed[i], this, i);\n        removed[i].emit(\"removed\", this);\n      }\n      if (removed.length > 0) {\n        this._didViewChangeTick++;\n      }\n      return removed;\n    } else if (range === 0 && this.children.length === 0) {\n      return removed;\n    }\n    throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n  },\n  /**\n   * Removes a child from the specified index position.\n   * @param index - The index to get the child from\n   * @returns The child that was removed.\n   * @memberof scene.Container#\n   */\n  removeChildAt(index) {\n    const child = this.getChildAt(index);\n    return this.removeChild(child);\n  },\n  /**\n   * Returns the child at the specified index\n   * @param index - The index to get the child at\n   * @returns - The child at the given index, if any.\n   * @memberof scene.Container#\n   */\n  getChildAt(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`getChildAt: Index (${index}) does not exist.`);\n    }\n    return this.children[index];\n  },\n  /**\n   * Changes the position of an existing child in the container\n   * @param child - The child Container instance for which you want to change the index number\n   * @param index - The resulting index number for the child container\n   * @memberof scene.Container#\n   */\n  setChildIndex(child, index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n    }\n    this.getChildIndex(child);\n    this.addChildAt(child, index);\n  },\n  /**\n   * Returns the index position of a child Container instance\n   * @param child - The Container instance to identify\n   * @returns - The index position of the child container to identify\n   * @memberof scene.Container#\n   */\n  getChildIndex(child) {\n    const index = this.children.indexOf(child);\n    if (index === -1) {\n      throw new Error(\"The supplied Container must be a child of the caller\");\n    }\n    return index;\n  },\n  /**\n   * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n   * If the child is already in this container, it will be moved to the specified index.\n   * @param {Container} child - The child to add.\n   * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n   * @returns {Container} The child that was added.\n   * @memberof scene.Container#\n   */\n  addChildAt(child, index) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChildAt: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    const { children } = this;\n    if (index < 0 || index > children.length) {\n      throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n    }\n    if (child.parent) {\n      const currentIndex = child.parent.children.indexOf(child);\n      if (child.parent === this && currentIndex === index) {\n        return child;\n      }\n      if (currentIndex !== -1) {\n        child.parent.children.splice(currentIndex, 1);\n      }\n    }\n    if (index === children.length) {\n      children.push(child);\n    } else {\n      children.splice(index, 0, child);\n    }\n    child.parent = this;\n    child.didChange = true;\n    child._updateFlags = 15;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    this.emit(\"childAdded\", child, this, index);\n    child.emit(\"added\", this);\n    return child;\n  },\n  /**\n   * Swaps the position of 2 Containers within this container.\n   * @param child - First container to swap\n   * @param child2 - Second container to swap\n   * @memberof scene.Container#\n   */\n  swapChildren(child, child2) {\n    if (child === child2) {\n      return;\n    }\n    const index1 = this.getChildIndex(child);\n    const index2 = this.getChildIndex(child2);\n    this.children[index1] = child2;\n    this.children[index2] = child;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    this._didContainerChangeTick++;\n  },\n  /**\n   * Remove the Container from its parent Container. If the Container has no parent, do nothing.\n   * @memberof scene.Container#\n   */\n  removeFromParent() {\n    this.parent?.removeChild(this);\n  },\n  /**\n   * Reparent the child to this container, keeping the same worldTransform.\n   * @param child - The child to reparent\n   * @returns The first child that was reparented.\n   * @memberof scene.Container#\n   */\n  reparentChild(...child) {\n    if (child.length === 1) {\n      return this.reparentChildAt(child[0], this.children.length);\n    }\n    child.forEach((c) => this.reparentChildAt(c, this.children.length));\n    return child[0];\n  },\n  /**\n   * Reparent the child to this container at the specified index, keeping the same worldTransform.\n   * @param child - The child to reparent\n   * @param index - The index to reparent the child to\n   * @memberof scene.Container#\n   */\n  reparentChildAt(child, index) {\n    if (child.parent === this) {\n      this.setChildIndex(child, index);\n      return child;\n    }\n    const childMat = child.worldTransform.clone();\n    child.removeFromParent();\n    this.addChildAt(child, index);\n    const newMatrix = this.worldTransform.clone();\n    newMatrix.invert();\n    childMat.prepend(newMatrix);\n    child.setFromMatrix(childMat);\n    return child;\n  }\n};\n\nexport { childrenHelperMixin };\n//# sourceMappingURL=childrenHelperMixin.mjs.map\n"],"names":["childrenHelperMixin","beginIndex","endIndex","end","range","removed","i","child","removeItems","renderGroup","index","deprecation","v8_0_0","children","currentIndex","child2","index1","index2","_a","c","childMat","newMatrix"],"mappings":"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","x_google_ignoreList":[0]}