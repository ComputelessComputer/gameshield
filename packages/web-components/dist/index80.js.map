{"version":3,"file":"index80.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/resources/SVGResource.mjs"],"sourcesContent":["import { settings } from \"@pixi/settings\";\nimport { uid } from \"@pixi/utils\";\nimport { BaseImageResource } from \"./BaseImageResource.mjs\";\nconst _SVGResource = class _SVGResource2 extends BaseImageResource {\n  /**\n   * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.\n   * @param {object} [options] - Options to use\n   * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\n   * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n   * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\n   * @param {boolean} [options.autoLoad=true] - Start loading right away.\n   */\n  constructor(sourceBase64, options) {\n    options = options || {}, super(settings.ADAPTER.createCanvas()), this._width = 0, this._height = 0, this.svg = sourceBase64, this.scale = options.scale || 1, this._overrideWidth = options.width, this._overrideHeight = options.height, this._resolve = null, this._crossorigin = options.crossorigin, this._load = null, options.autoLoad !== !1 && this.load();\n  }\n  load() {\n    return this._load ? this._load : (this._load = new Promise((resolve) => {\n      if (this._resolve = () => {\n        this.update(), resolve(this);\n      }, _SVGResource2.SVG_XML.test(this.svg.trim())) {\n        if (!btoa)\n          throw new Error(\"Your browser doesn't support base64 conversions.\");\n        this.svg = `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(this.svg)))}`;\n      }\n      this._loadSvg();\n    }), this._load);\n  }\n  /** Loads an SVG image from `imageUrl` or `data URL`. */\n  _loadSvg() {\n    const tempImage = new Image();\n    BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin), tempImage.src = this.svg, tempImage.onerror = (event) => {\n      this._resolve && (tempImage.onerror = null, this.onError.emit(event));\n    }, tempImage.onload = () => {\n      if (!this._resolve)\n        return;\n      const svgWidth = tempImage.width, svgHeight = tempImage.height;\n      if (!svgWidth || !svgHeight)\n        throw new Error(\"The SVG image must have width and height defined (in pixels), canvas API needs them.\");\n      let width = svgWidth * this.scale, height = svgHeight * this.scale;\n      (this._overrideWidth || this._overrideHeight) && (width = this._overrideWidth || this._overrideHeight / svgHeight * svgWidth, height = this._overrideHeight || this._overrideWidth / svgWidth * svgHeight), width = Math.round(width), height = Math.round(height);\n      const canvas = this.source;\n      canvas.width = width, canvas.height = height, canvas._pixiId = `canvas_${uid()}`, canvas.getContext(\"2d\").drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height), this._resolve(), this._resolve = null;\n    };\n  }\n  /**\n   * Get size from an svg string using a regular expression.\n   * @param svgString - a serialized svg element\n   * @returns - image extension\n   */\n  static getSize(svgString) {\n    const sizeMatch = _SVGResource2.SVG_SIZE.exec(svgString), size = {};\n    return sizeMatch && (size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3])), size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]))), size;\n  }\n  /** Destroys this texture. */\n  dispose() {\n    super.dispose(), this._resolve = null, this._crossorigin = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @param {string} extension - The extension of source, if set\n   * @returns {boolean} - If the source is a SVG source or data file\n   */\n  static test(source, extension) {\n    return extension === \"svg\" || typeof source == \"string\" && source.startsWith(\"data:image/svg+xml\") || typeof source == \"string\" && _SVGResource2.SVG_XML.test(source);\n  }\n  // eslint-disable-line max-len\n};\n_SVGResource.SVG_XML = /^(<\\?xml[^?]+\\?>)?\\s*(<!--[^(-->)]*-->)?\\s*\\<svg/m, /**\n* Regular expression for SVG size.\n* @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n* @readonly\n*/\n_SVGResource.SVG_SIZE = /<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i;\nlet SVGResource = _SVGResource;\nexport {\n  SVGResource\n};\n//# sourceMappingURL=SVGResource.mjs.map\n"],"names":["_SVGResource","_SVGResource2","BaseImageResource","sourceBase64","options","settings","resolve","tempImage","event","svgWidth","svgHeight","width","height","canvas","uid","svgString","sizeMatch","size","source","extension","SVGResource"],"mappings":"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","x_google_ignoreList":[0]}