{"version":3,"file":"index132.js","sources":["../../game-core/dist/src/games/dino-run.js"],"sourcesContent":["/**\n * Dino Run Game Implementation\n *\n * A running game inspired by Chrome's offline dinosaur game where players\n * jump over obstacles.\n *\n * @packageDocumentation\n */\nimport * as PIXI from 'pixi.js';\nimport { BaseGame } from './base-game';\n/**\n * Class representing a Dino Run game implementation\n */\nexport class DinoRunGame extends BaseGame {\n    /**\n     * Create a new DinoRunGame instance\n     *\n     * @param options - Game creation options\n     */\n    constructor(options) {\n        super(options.app, {\n            width: options.width,\n            height: options.height,\n            difficulty: options.difficulty,\n            backgroundColor: options.backgroundColor,\n            assetsPath: options.assetsPath,\n            onLoad: options.onLoad\n        });\n        /** Player character */\n        this.player = null;\n        /** Obstacles */\n        this.obstacles = [];\n        /** Ground */\n        this.ground = null;\n        /** Player velocity */\n        this.playerVelocity = { y: 0 };\n        /** Whether player is jumping */\n        this.isJumping = false;\n        /** Distance traveled */\n        this.distance = 0;\n        /** Text display for distance */\n        this.distanceText = null;\n        /** Whether game is over */\n        this.isGameOver = false;\n        // Set up dino run specific options based on difficulty\n        this.gameConfig = {\n            speed: options.speed || this.getDifficultyBasedSpeed(),\n            jumpHeight: options.jumpHeight || this.getDifficultyBasedJumpHeight(),\n            gravity: options.gravity || this.getDifficultyBasedGravity(),\n            targetDistance: options.targetDistance || this.getDifficultyBasedTargetDistance()\n        };\n        // Set completion callback if provided\n        if (options.onComplete) {\n            this.setCompletionCallback(options.onComplete);\n        }\n        // Initialize the game\n        this.init();\n    }\n    /**\n     * Initialize the dino run game\n     *\n     * @protected\n     */\n    initialize() {\n        // This would contain the full implementation with:\n        // - Creating the player character\n        // - Setting up the ground and background\n        // - Creating the obstacle generation system\n        // - Handling jump input\n        // - Setting up scoring\n        // For now, we'll just add a placeholder message\n        const comingSoonText = new PIXI.Text('Dino Run Game\\n\\nClick to complete demo', {\n            fontFamily: 'Arial',\n            fontSize: 24,\n            fill: 0xffffff,\n            align: 'center'\n        });\n        comingSoonText.anchor.set(0.5);\n        comingSoonText.x = this.config.width / 2;\n        comingSoonText.y = this.config.height / 2;\n        this.container.addChild(comingSoonText);\n        // For demo purposes, add a click handler that completes the game\n        this.container.eventMode = 'static';\n        this.container.cursor = 'pointer';\n        this.container.on('pointerdown', () => {\n            this.complete(true, 90, { demo: true });\n        });\n        // Set up the game ticker\n        this.app.ticker.add(this.update.bind(this));\n    }\n    /**\n     * Update game state on each frame\n     *\n     * @param ticker - PIXI ticker\n     * @protected\n     */\n    update(ticker) {\n        const delta = ticker.deltaTime;\n        // In a full implementation, this would:\n        // - Move obstacles based on game speed\n        // - Handle dinosaur jumping/ducking based on input\n        // - Check for collisions between dinosaur and obstacles\n        // - Increase game speed over time\n        // - Update score based on distance traveled\n    }\n    /**\n     * Get game speed based on difficulty\n     *\n     * @returns Game speed multiplier\n     * @private\n     */\n    getDifficultyBasedSpeed() {\n        switch (this.config.difficulty) {\n            case 'easy': return 5;\n            case 'medium': return 7;\n            case 'hard': return 10;\n            default: return 7;\n        }\n    }\n    /**\n     * Get jump height based on difficulty\n     *\n     * @returns Jump height multiplier\n     * @private\n     */\n    getDifficultyBasedJumpHeight() {\n        switch (this.config.difficulty) {\n            case 'easy': return 20;\n            case 'medium': return 18;\n            case 'hard': return 15;\n            default: return 18;\n        }\n    }\n    /**\n     * Get gravity based on difficulty\n     *\n     * @returns Gravity strength\n     * @private\n     */\n    getDifficultyBasedGravity() {\n        switch (this.config.difficulty) {\n            case 'easy': return 0.8;\n            case 'medium': return 1.0;\n            case 'hard': return 1.3;\n            default: return 1.0;\n        }\n    }\n    /**\n     * Get target distance based on difficulty\n     *\n     * @returns Distance needed to win\n     * @private\n     */\n    getDifficultyBasedTargetDistance() {\n        switch (this.config.difficulty) {\n            case 'easy': return 500;\n            case 'medium': return 1000;\n            case 'hard': return 1500;\n            default: return 1000;\n        }\n    }\n}\n"],"names":["DinoRunGame","BaseGame","options","comingSoonText","PIXI.Text","ticker"],"mappings":";;;AAaO,MAAMA,UAAoBC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMtC,YAAYC,GAAS;AACjB,UAAMA,EAAQ,KAAK;AAAA,MACf,OAAOA,EAAQ;AAAA,MACf,QAAQA,EAAQ;AAAA,MAChB,YAAYA,EAAQ;AAAA,MACpB,iBAAiBA,EAAQ;AAAA,MACzB,YAAYA,EAAQ;AAAA,MACpB,QAAQA,EAAQ;AAAA,IAC5B,CAAS,GAED,KAAK,SAAS,MAEd,KAAK,YAAY,IAEjB,KAAK,SAAS,MAEd,KAAK,iBAAiB,EAAE,GAAG,EAAC,GAE5B,KAAK,YAAY,IAEjB,KAAK,WAAW,GAEhB,KAAK,eAAe,MAEpB,KAAK,aAAa,IAElB,KAAK,aAAa;AAAA,MACd,OAAOA,EAAQ,SAAS,KAAK,wBAAyB;AAAA,MACtD,YAAYA,EAAQ,cAAc,KAAK,6BAA8B;AAAA,MACrE,SAASA,EAAQ,WAAW,KAAK,0BAA2B;AAAA,MAC5D,gBAAgBA,EAAQ,kBAAkB,KAAK,iCAAkC;AAAA,IAC7F,GAEYA,EAAQ,cACR,KAAK,sBAAsBA,EAAQ,UAAU,GAGjD,KAAK,KAAI;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa;AAQT,UAAMC,IAAiB,IAAIC,EAAU;AAAA;AAAA,yBAA2C;AAAA,MAC5E,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,IACnB,CAAS;AACD,IAAAD,EAAe,OAAO,IAAI,GAAG,GAC7BA,EAAe,IAAI,KAAK,OAAO,QAAQ,GACvCA,EAAe,IAAI,KAAK,OAAO,SAAS,GACxC,KAAK,UAAU,SAASA,CAAc,GAEtC,KAAK,UAAU,YAAY,UAC3B,KAAK,UAAU,SAAS,WACxB,KAAK,UAAU,GAAG,eAAe,MAAM;AACnC,WAAK,SAAS,IAAM,IAAI,EAAE,MAAM,GAAI,CAAE;AAAA,IAClD,CAAS,GAED,KAAK,IAAI,OAAO,IAAI,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAOE,GAAQ;AACG,IAAAA,EAAO;AAAA,EAOxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,0BAA0B;AACtB,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,+BAA+B;AAC3B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,4BAA4B;AACxB,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,mCAAmC;AAC/B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AACL;"}