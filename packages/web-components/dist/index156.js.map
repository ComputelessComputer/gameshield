{"version":3,"file":"index156.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/textureFrom.mjs"],"sourcesContent":["import { Cache } from '../../../../../assets/cache/Cache.mjs';\nimport { extensions, ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from '../sources/TextureSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst sources = [];\nextensions.handleByList(ExtensionType.TextureSource, sources);\nfunction autoDetectSource(options = {}) {\n  return textureSourceFrom(options);\n}\nfunction textureSourceFrom(options = {}) {\n  const hasResource = options && options.resource;\n  const res = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  for (let i = 0; i < sources.length; i++) {\n    const Source = sources[i];\n    if (Source.test(res)) {\n      return new Source(opts);\n    }\n  }\n  throw new Error(`Could not find a source type for resource: ${opts.resource}`);\n}\nfunction resourceToTexture(options = {}, skipCache = false) {\n  const hasResource = options && options.resource;\n  const resource = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  if (!skipCache && Cache.has(resource)) {\n    return Cache.get(resource);\n  }\n  const texture = new Texture({ source: textureSourceFrom(opts) });\n  texture.on(\"destroy\", () => {\n    if (Cache.has(resource)) {\n      Cache.remove(resource);\n    }\n  });\n  if (!skipCache) {\n    Cache.set(resource, texture);\n  }\n  return texture;\n}\nfunction textureFrom(id, skipCache = false) {\n  if (typeof id === \"string\") {\n    return Cache.get(id);\n  } else if (id instanceof TextureSource) {\n    return new Texture({ source: id });\n  }\n  return resourceToTexture(id, skipCache);\n}\nTexture.from = textureFrom;\nTextureSource.from = textureSourceFrom;\n\nexport { autoDetectSource, resourceToTexture, textureFrom };\n//# sourceMappingURL=textureFrom.mjs.map\n"],"names":["sources","extensions","ExtensionType","textureSourceFrom","options","hasResource","res","opts","i","Source","resourceToTexture","skipCache","resource","Cache","texture","Texture","textureFrom","id","TextureSource"],"mappings":";;;;AAMA,MAAMA,IAAU,CAAA;AAChBC,EAAW,aAAaC,EAAc,eAAeF,CAAO;AAI5D,SAASG,EAAkBC,IAAU,IAAI;AACvC,QAAMC,IAAcD,KAAWA,EAAQ,UACjCE,IAAMD,IAAcD,EAAQ,WAAWA,GACvCG,IAAOF,IAAcD,IAAU,EAAE,UAAUA,EAAO;AACxD,WAASI,IAAI,GAAGA,IAAIR,EAAQ,QAAQQ,KAAK;AACvC,UAAMC,IAAST,EAAQQ,CAAC;AACxB,QAAIC,EAAO,KAAKH,CAAG;AACjB,aAAO,IAAIG,EAAOF,CAAI;AAAA,EAEzB;AACD,QAAM,IAAI,MAAM,8CAA8CA,EAAK,QAAQ,EAAE;AAC/E;AACA,SAASG,EAAkBN,IAAU,IAAIO,IAAY,IAAO;AAC1D,QAAMN,IAAcD,KAAWA,EAAQ,UACjCQ,IAAWP,IAAcD,EAAQ,WAAWA,GAC5CG,IAAOF,IAAcD,IAAU,EAAE,UAAUA,EAAO;AACxD,MAAI,CAACO,KAAaE,EAAM,IAAID,CAAQ;AAClC,WAAOC,EAAM,IAAID,CAAQ;AAE3B,QAAME,IAAU,IAAIC,EAAQ,EAAE,QAAQZ,EAAkBI,CAAI,EAAC,CAAE;AAC/D,SAAAO,EAAQ,GAAG,WAAW,MAAM;AAC1B,IAAID,EAAM,IAAID,CAAQ,KACpBC,EAAM,OAAOD,CAAQ;AAAA,EAE3B,CAAG,GACID,KACHE,EAAM,IAAID,GAAUE,CAAO,GAEtBA;AACT;AACA,SAASE,EAAYC,GAAIN,IAAY,IAAO;AAC1C,SAAI,OAAOM,KAAO,WACTJ,EAAM,IAAII,CAAE,IACVA,aAAcC,IAChB,IAAIH,EAAQ,EAAE,QAAQE,EAAI,CAAA,IAE5BP,EAAkBO,GAAIN,CAAS;AACxC;AACAI,EAAQ,OAAOC;AACfE,EAAc,OAAOf;","x_google_ignoreList":[0]}