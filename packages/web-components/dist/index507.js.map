{"version":3,"file":"index507.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcToSvg.mjs"],"sourcesContent":["import { buildAdaptiveBezier } from './buildAdaptiveBezier.mjs';\n\n\"use strict\";\nconst TAU = Math.PI * 2;\nconst out = {\n  centerX: 0,\n  centerY: 0,\n  ang1: 0,\n  ang2: 0\n};\nconst mapToEllipse = ({ x, y }, rx, ry, cosPhi, sinPhi, centerX, centerY, out2) => {\n  x *= rx;\n  y *= ry;\n  const xp = cosPhi * x - sinPhi * y;\n  const yp = sinPhi * x + cosPhi * y;\n  out2.x = xp + centerX;\n  out2.y = yp + centerY;\n  return out2;\n};\nfunction approxUnitArc(ang1, ang2) {\n  const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n  const x1 = Math.cos(ang1);\n  const y1 = Math.sin(ang1);\n  const x2 = Math.cos(ang1 + ang2);\n  const y2 = Math.sin(ang1 + ang2);\n  return [\n    {\n      x: x1 - y1 * a,\n      y: y1 + x1 * a\n    },\n    {\n      x: x2 + y2 * a,\n      y: y2 - x2 * a\n    },\n    {\n      x: x2,\n      y: y2\n    }\n  ];\n}\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  let dot = ux * vx + uy * vy;\n  if (dot > 1) {\n    dot = 1;\n  }\n  if (dot < -1) {\n    dot = -1;\n  }\n  return sign * Math.acos(dot);\n};\nconst getArcCenter = (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinPhi, cosPhi, pxp, pyp, out2) => {\n  const rxSq = Math.pow(rx, 2);\n  const rySq = Math.pow(ry, 2);\n  const pxpSq = Math.pow(pxp, 2);\n  const pypSq = Math.pow(pyp, 2);\n  let radicant = rxSq * rySq - rxSq * pypSq - rySq * pxpSq;\n  if (radicant < 0) {\n    radicant = 0;\n  }\n  radicant /= rxSq * pypSq + rySq * pxpSq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  const centerXp = radicant * rx / ry * pyp;\n  const centerYp = radicant * -ry / rx * pxp;\n  const centerX = cosPhi * centerXp - sinPhi * centerYp + (px + cx) / 2;\n  const centerY = sinPhi * centerXp + cosPhi * centerYp + (py + cy) / 2;\n  const vx1 = (pxp - centerXp) / rx;\n  const vy1 = (pyp - centerYp) / ry;\n  const vx2 = (-pxp - centerXp) / rx;\n  const vy2 = (-pyp - centerYp) / ry;\n  const ang1 = vectorAngle(1, 0, vx1, vy1);\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n  out2.centerX = centerX;\n  out2.centerY = centerY;\n  out2.ang1 = ang1;\n  out2.ang2 = ang2;\n};\nfunction buildArcToSvg(points, px, py, cx, cy, rx, ry, xAxisRotation = 0, largeArcFlag = 0, sweepFlag = 0) {\n  if (rx === 0 || ry === 0) {\n    return;\n  }\n  const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n  const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n  const pxp = cosPhi * (px - cx) / 2 + sinPhi * (py - cy) / 2;\n  const pyp = -sinPhi * (px - cx) / 2 + cosPhi * (py - cy) / 2;\n  if (pxp === 0 && pyp === 0) {\n    return;\n  }\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  const lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n  getArcCenter(\n    px,\n    py,\n    cx,\n    cy,\n    rx,\n    ry,\n    largeArcFlag,\n    sweepFlag,\n    sinPhi,\n    cosPhi,\n    pxp,\n    pyp,\n    out\n  );\n  let { ang1, ang2 } = out;\n  const { centerX, centerY } = out;\n  let ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1 - ratio) < 1e-7) {\n    ratio = 1;\n  }\n  const segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n  let lastX = points[points.length - 2];\n  let lastY = points[points.length - 1];\n  const outCurvePoint = { x: 0, y: 0 };\n  for (let i = 0; i < segments; i++) {\n    const curve = approxUnitArc(ang1, ang2);\n    const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    buildAdaptiveBezier(\n      points,\n      lastX,\n      lastY,\n      x1,\n      y1,\n      x2,\n      y2,\n      x,\n      y\n    );\n    lastX = x;\n    lastY = y;\n    ang1 += ang2;\n  }\n}\n\nexport { buildArcToSvg };\n//# sourceMappingURL=buildArcToSvg.mjs.map\n"],"names":["TAU","out","mapToEllipse","x","y","rx","ry","cosPhi","sinPhi","centerX","centerY","out2","xp","yp","approxUnitArc","ang1","ang2","a1","a","x1","y1","x2","y2","vectorAngle","ux","uy","vx","vy","sign","dot","getArcCenter","px","py","cx","cy","largeArcFlag","sweepFlag","pxp","pyp","rxSq","rySq","pxpSq","pypSq","radicant","centerXp","centerYp","vx1","vy1","vx2","vy2","buildArcToSvg","points","xAxisRotation","lambda","ratio","segments","lastX","lastY","outCurvePoint","i","curve","buildAdaptiveBezier"],"mappings":"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","x_google_ignoreList":[0]}