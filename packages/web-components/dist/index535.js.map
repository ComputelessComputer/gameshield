{"version":3,"file":"index535.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n"],"names":["_MeshGeometry","Geometry","args","options","deprecation","v8_0_0","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry"],"mappings":";;;;AAMA,MAAMA,IAAgB,MAAMA,UAAsBC,EAAS;AAAA,EACzD,eAAeC,GAAM;AACnB,QAAIC,IAAUD,EAAK,CAAC,KAAK,CAAA;AACzB,IAAIC,aAAmB,iBACrBC,EAAYC,GAAQ,2DAA2D,GAC/EF,IAAU;AAAA,MACR,WAAWA;AAAA,MACX,KAAKD,EAAK,CAAC;AAAA,MACX,SAASA,EAAK,CAAC;AAAA,IACvB,IAEIC,IAAU,EAAE,GAAGH,EAAc,gBAAgB,GAAGG,EAAO;AACvD,UAAMG,IAAYH,EAAQ,aAAa,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAChF,QAAII,IAAMJ,EAAQ;AAClB,IAAKI,MACCJ,EAAQ,YACVI,IAAM,IAAI,aAAaD,EAAU,MAAM,IAEvCC,IAAM,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAGnD,UAAMC,IAAUL,EAAQ,WAAW,IAAI,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAC/DM,IAAcN,EAAQ,oBACtBO,IAAiB,IAAIC,EAAO;AAAA,MAChC,MAAML;AAAA,MACN,OAAO;AAAA,MACP,aAAAG;AAAA,MACA,OAAOG,EAAY,SAASA,EAAY;AAAA,IAC9C,CAAK,GACKC,IAAW,IAAIF,EAAO;AAAA,MAC1B,MAAMJ;AAAA,MACN,OAAO;AAAA,MACP,aAAAE;AAAA,MACA,OAAOG,EAAY,SAASA,EAAY;AAAA,IAC9C,CAAK,GACKE,IAAc,IAAIH,EAAO;AAAA,MAC7B,MAAMH;AAAA,MACN,OAAO;AAAA,MACP,aAAAC;AAAA,MACA,OAAOG,EAAY,QAAQA,EAAY;AAAA,IAC7C,CAAK;AACD,UAAM;AAAA,MACJ,YAAY;AAAA,QACV,WAAW;AAAA,UACT,QAAQF;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ,IAAI;AAAA,UACZ,QAAQ;AAAA,QACT;AAAA,QACD,KAAK;AAAA,UACH,QAAQG;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ,IAAI;AAAA,UACZ,QAAQ;AAAA,QACT;AAAA,MACF;AAAA,MACD,aAAAC;AAAA,MACA,UAAUX,EAAQ;AAAA,IACxB,CAAK,GACD,KAAK,YAAY;AAAA,EAClB;AAAA;AAAA,EAED,IAAI,YAAY;AACd,WAAO,KAAK,WAAW,UAAU,OAAO;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,UAAUY,GAAO;AACnB,SAAK,WAAW,UAAU,OAAO,OAAOA;AAAA,EACzC;AAAA;AAAA,EAED,IAAI,MAAM;AACR,WAAO,KAAK,WAAW,IAAI,OAAO;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,IAAIA,GAAO;AACb,SAAK,WAAW,IAAI,OAAO,OAAOA;AAAA,EACnC;AAAA;AAAA,EAED,IAAI,UAAU;AACZ,WAAO,KAAK,YAAY;AAAA,EACzB;AAAA,EACD,IAAI,QAAQA,GAAO;AACjB,SAAK,YAAY,OAAOA;AAAA,EACzB;AACH;AACAf,EAAc,iBAAiB;AAAA,EAC7B,UAAU;AAAA,EACV,oBAAoB;AACtB;AACG,IAACgB,IAAehB;","x_google_ignoreList":[0]}