{"version":3,"file":"index131.js","sources":["../../game-core/dist/src/games/pong.js"],"sourcesContent":["/**\n * Pong Game Implementation\n *\n * A classic pong game where the player controls a paddle to bounce a ball against an AI opponent.\n *\n * @packageDocumentation\n */\nimport * as PIXI from 'pixi.js';\nimport { BaseGame } from './base-game';\n/**\n * Class representing a Pong game implementation\n */\nexport class PongGame extends BaseGame {\n    /**\n     * Create a new PongGame instance\n     *\n     * @param options - Game creation options\n     */\n    constructor(options) {\n        super(options.app, {\n            width: options.width,\n            height: options.height,\n            difficulty: options.difficulty,\n            backgroundColor: options.backgroundColor,\n            assetsPath: options.assetsPath,\n            onLoad: options.onLoad\n        });\n        /** Player paddle */\n        this.playerPaddle = null;\n        /** AI paddle */\n        this.aiPaddle = null;\n        /** Ball */\n        this.ball = null;\n        /** Ball velocity */\n        this.ballVelocity = { x: 0, y: 0 };\n        /** Player score */\n        this.playerScore = 0;\n        /** AI score */\n        this.aiScore = 0;\n        /** Text displays for scores */\n        this.playerScoreText = null;\n        this.aiScoreText = null;\n        // Set up pong specific options based on difficulty\n        this.gameConfig = {\n            ballSpeed: options.ballSpeed || this.getDifficultyBasedBallSpeed(),\n            paddleHeight: options.paddleHeight || this.getDifficultyBasedPaddleHeight(),\n            aiDifficulty: options.aiDifficulty || this.getDifficultyBasedAIDifficulty(),\n            pointsToWin: options.pointsToWin || this.getDifficultyBasedPointsToWin()\n        };\n        // Set completion callback if provided\n        if (options.onComplete) {\n            this.setCompletionCallback(options.onComplete);\n        }\n        // Initialize the game\n        this.init();\n    }\n    /**\n     * Initialize the pong game\n     *\n     * @protected\n     */\n    initialize() {\n        // This would contain the full implementation with:\n        // - Creating paddles and ball\n        // - Setting up scoring\n        // - Handling player input for paddle movement\n        // - Setting up AI behavior\n        // For now, we'll just add a placeholder message\n        const comingSoonText = new PIXI.Text('Pong Game\\n\\nClick to complete demo', {\n            fontFamily: 'Arial',\n            fontSize: 24,\n            fill: 0xffffff,\n            align: 'center'\n        });\n        comingSoonText.anchor.set(0.5);\n        comingSoonText.x = this.config.width / 2;\n        comingSoonText.y = this.config.height / 2;\n        this.container.addChild(comingSoonText);\n        // For demo purposes, add a click handler that completes the game\n        this.container.eventMode = 'static';\n        this.container.cursor = 'pointer';\n        this.container.on('pointerdown', () => {\n            this.complete(true, 80, { demo: true });\n        });\n        // Set up the game ticker\n        this.app.ticker.add(this.update.bind(this));\n    }\n    /**\n     * Update game state on each frame\n     *\n     * @param ticker - PIXI ticker\n     * @protected\n     */\n    update(ticker) {\n        const delta = ticker.deltaTime;\n        // In a full implementation, this would:\n        // - Move the paddles based on user input and AI behavior\n        // - Update ball position and check for collisions\n        // - Update the score when the ball passes a paddle\n    }\n    /**\n     * Get ball speed based on difficulty\n     *\n     * @returns Ball speed multiplier\n     * @private\n     */\n    getDifficultyBasedBallSpeed() {\n        switch (this.config.difficulty) {\n            case 'easy': return 4;\n            case 'medium': return 6;\n            case 'hard': return 8;\n            default: return 6;\n        }\n    }\n    /**\n     * Get paddle height based on difficulty\n     *\n     * @returns Paddle height in pixels\n     * @private\n     */\n    getDifficultyBasedPaddleHeight() {\n        switch (this.config.difficulty) {\n            case 'easy': return 100;\n            case 'medium': return 80;\n            case 'hard': return 60;\n            default: return 80;\n        }\n    }\n    /**\n     * Get AI difficulty based on game difficulty\n     *\n     * @returns AI difficulty (0-1)\n     * @private\n     */\n    getDifficultyBasedAIDifficulty() {\n        switch (this.config.difficulty) {\n            case 'easy': return 0.3;\n            case 'medium': return 0.6;\n            case 'hard': return 0.9;\n            default: return 0.6;\n        }\n    }\n    /**\n     * Get points needed to win based on difficulty\n     *\n     * @returns Points needed to win\n     * @private\n     */\n    getDifficultyBasedPointsToWin() {\n        switch (this.config.difficulty) {\n            case 'easy': return 3;\n            case 'medium': return 5;\n            case 'hard': return 7;\n            default: return 5;\n        }\n    }\n}\n"],"names":["PongGame","BaseGame","options","comingSoonText","PIXI.Text","ticker"],"mappings":";;;AAYO,MAAMA,UAAiBC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnC,YAAYC,GAAS;AACjB,UAAMA,EAAQ,KAAK;AAAA,MACf,OAAOA,EAAQ;AAAA,MACf,QAAQA,EAAQ;AAAA,MAChB,YAAYA,EAAQ;AAAA,MACpB,iBAAiBA,EAAQ;AAAA,MACzB,YAAYA,EAAQ;AAAA,MACpB,QAAQA,EAAQ;AAAA,IAC5B,CAAS,GAED,KAAK,eAAe,MAEpB,KAAK,WAAW,MAEhB,KAAK,OAAO,MAEZ,KAAK,eAAe,EAAE,GAAG,GAAG,GAAG,KAE/B,KAAK,cAAc,GAEnB,KAAK,UAAU,GAEf,KAAK,kBAAkB,MACvB,KAAK,cAAc,MAEnB,KAAK,aAAa;AAAA,MACd,WAAWA,EAAQ,aAAa,KAAK,4BAA6B;AAAA,MAClE,cAAcA,EAAQ,gBAAgB,KAAK,+BAAgC;AAAA,MAC3E,cAAcA,EAAQ,gBAAgB,KAAK,+BAAgC;AAAA,MAC3E,aAAaA,EAAQ,eAAe,KAAK,8BAA+B;AAAA,IACpF,GAEYA,EAAQ,cACR,KAAK,sBAAsBA,EAAQ,UAAU,GAGjD,KAAK,KAAI;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa;AAOT,UAAMC,IAAiB,IAAIC,EAAU;AAAA;AAAA,yBAAuC;AAAA,MACxE,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,IACnB,CAAS;AACD,IAAAD,EAAe,OAAO,IAAI,GAAG,GAC7BA,EAAe,IAAI,KAAK,OAAO,QAAQ,GACvCA,EAAe,IAAI,KAAK,OAAO,SAAS,GACxC,KAAK,UAAU,SAASA,CAAc,GAEtC,KAAK,UAAU,YAAY,UAC3B,KAAK,UAAU,SAAS,WACxB,KAAK,UAAU,GAAG,eAAe,MAAM;AACnC,WAAK,SAAS,IAAM,IAAI,EAAE,MAAM,GAAI,CAAE;AAAA,IAClD,CAAS,GAED,KAAK,IAAI,OAAO,IAAI,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAOE,GAAQ;AACG,IAAAA,EAAO;AAAA,EAKxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,8BAA8B;AAC1B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,iCAAiC;AAC7B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,iCAAiC;AAC7B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,gCAAgC;AAC5B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AACL;"}