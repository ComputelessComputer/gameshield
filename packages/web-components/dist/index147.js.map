{"version":3,"file":"index147.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/sprite/Sprite.mjs"],"sourcesContent":["import { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { deprecation } from '../../utils/logging/deprecation.mjs';\nimport { ViewContainer } from '../view/ViewContainer.mjs';\n\n\"use strict\";\nclass Sprite extends ViewContainer {\n  /**\n   * @param options - The options for creating the sprite.\n   */\n  constructor(options = Texture.EMPTY) {\n    if (options instanceof Texture) {\n      options = { texture: options };\n    }\n    const { texture = Texture.EMPTY, anchor, roundPixels, width, height, ...rest } = options;\n    super({\n      label: \"Sprite\",\n      ...rest\n    });\n    this.renderPipeId = \"sprite\";\n    this.batched = true;\n    this._visualBounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    this._anchor = new ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    if (anchor) {\n      this.anchor = anchor;\n    } else if (texture.defaultAnchor) {\n      this.anchor = texture.defaultAnchor;\n    }\n    this.texture = texture;\n    this.allowChildren = false;\n    this.roundPixels = roundPixels ?? false;\n    if (width !== void 0)\n      this.width = width;\n    if (height !== void 0)\n      this.height = height;\n  }\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image, video, canvas element, video element, texture\n   * @param source - Source to create texture from\n   * @param [skipCache] - Whether to skip the cache or not\n   * @returns The newly created sprite\n   */\n  static from(source, skipCache = false) {\n    if (source instanceof Texture) {\n      return new Sprite(source);\n    }\n    return new Sprite(Texture.from(source, skipCache));\n  }\n  set texture(value) {\n    value || (value = Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value)\n      return;\n    if (currentTexture && currentTexture.dynamic)\n      currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic)\n      value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    if (this._width) {\n      this._setWidth(this._width, this._texture.orig.width);\n    }\n    if (this._height) {\n      this._setHeight(this._height, this._texture.orig.height);\n    }\n    this.onViewUpdate();\n  }\n  /** The texture that the sprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * The bounds of the sprite, taking the texture's trim into account.\n   * @type {rendering.Bounds}\n   */\n  get visualBounds() {\n    updateQuadBounds(this._visualBounds, this._anchor, this._texture);\n    return this._visualBounds;\n  }\n  /**\n   * @deprecated\n   */\n  get sourceBounds() {\n    deprecation(\"8.6.1\", \"Sprite.sourceBounds is deprecated, use visualBounds instead.\");\n    return this.visualBounds;\n  }\n  /** @private */\n  updateBounds() {\n    const anchor = this._anchor;\n    const texture = this._texture;\n    const bounds = this._bounds;\n    const { width, height } = texture.orig;\n    bounds.minX = -anchor._x * width;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * height;\n    bounds.maxY = bounds.minY + height;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n    this._visualBounds = null;\n    this._bounds = null;\n    this._anchor = null;\n  }\n  /**\n   * The anchor sets the origin point of the sprite. The default value is taken from the {@link Texture}\n   * and passed to the constructor.\n   *\n   * The default is `(0,0)`, this means the sprite's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite({texture: Texture.WHITE});\n   * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    this._setWidth(value, this._texture.orig.width);\n    this._width = value;\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    this._setHeight(value, this._texture.orig.height);\n    this._height = value;\n  }\n  /**\n   * Retrieves the size of the Sprite as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the Sprite.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = Math.abs(this.scale.x) * this._texture.orig.width;\n    out.height = Math.abs(this.scale.y) * this._texture.orig.height;\n    return out;\n  }\n  /**\n   * Sets the size of the Sprite to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, this._texture.orig.width);\n    height !== void 0 && this._setHeight(height, this._texture.orig.height);\n  }\n}\n\nexport { Sprite };\n//# sourceMappingURL=Sprite.mjs.map\n"],"names":["Sprite","ViewContainer","options","Texture","texture","anchor","roundPixels","width","height","rest","ObservablePoint","source","skipCache","value","currentTexture","updateQuadBounds","deprecation","bounds","destroyTextureSource","out"],"mappings":"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","x_google_ignoreList":[0]}