{"version":3,"file":"index590.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text/AbstractText.mjs"],"sourcesContent":["import { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { ViewContainer } from '../view/ViewContainer.mjs';\n\n\"use strict\";\nclass AbstractText extends ViewContainer {\n  constructor(options, styleClass) {\n    const { text, resolution, style, anchor, width, height, roundPixels, ...rest } = options;\n    super({\n      ...rest\n    });\n    this.batched = true;\n    this._resolution = null;\n    this._autoResolution = true;\n    this._didTextUpdate = true;\n    this._styleClass = styleClass;\n    this.text = text ?? \"\";\n    this.style = style;\n    this.resolution = resolution ?? null;\n    this.allowChildren = false;\n    this._anchor = new ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    if (anchor)\n      this.anchor = anchor;\n    this.roundPixels = roundPixels ?? false;\n    if (width !== void 0)\n      this.width = width;\n    if (height !== void 0)\n      this.height = height;\n  }\n  /**\n   * The anchor sets the origin point of the text.\n   * The default is `(0,0)`, this means the text's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Text } from 'pixi.js';\n   *\n   * const text = new Text('hello world');\n   * text.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** Set the copy for the text object. To split a line you can use '\\n'. */\n  set text(value) {\n    value = value.toString();\n    if (this._text === value)\n      return;\n    this._text = value;\n    this.onViewUpdate();\n  }\n  get text() {\n    return this._text;\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   * @default 1\n   */\n  set resolution(value) {\n    this._autoResolution = value === null;\n    this._resolution = value;\n    this.onViewUpdate();\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  get style() {\n    return this._style;\n  }\n  /**\n   * Set the style of the text.\n   *\n   * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n   *\n   * If setting the `style` can also be partial {@link AnyTextStyleOptions}.\n   * @type {\n   * text.TextStyle |\n   * Partial<text.TextStyle> |\n   * text.TextStyleOptions |\n   * text.HTMLTextStyle |\n   * Partial<text.HTMLTextStyle> |\n   * text.HTMLTextStyleOptions\n   * }\n   */\n  set style(style) {\n    style || (style = {});\n    this._style?.off(\"update\", this.onViewUpdate, this);\n    if (style instanceof this._styleClass) {\n      this._style = style;\n    } else {\n      this._style = new this._styleClass(style);\n    }\n    this._style.on(\"update\", this.onViewUpdate, this);\n    this.onViewUpdate();\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this.bounds.width;\n  }\n  set width(value) {\n    this._setWidth(value, this.bounds.width);\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this.bounds.height;\n  }\n  set height(value) {\n    this._setHeight(value, this.bounds.height);\n  }\n  /**\n   * Retrieves the size of the Text as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the Text.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = Math.abs(this.scale.x) * this.bounds.width;\n    out.height = Math.abs(this.scale.y) * this.bounds.height;\n    return out;\n  }\n  /**\n   * Sets the size of the Text to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, this.bounds.width);\n    height !== void 0 && this._setHeight(height, this.bounds.height);\n  }\n  /**\n   * Checks if the text contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const width = this.bounds.width;\n    const height = this.bounds.height;\n    const x1 = -width * this.anchor.x;\n    let y1 = 0;\n    if (point.x >= x1 && point.x <= x1 + width) {\n      y1 = -height * this.anchor.y;\n      if (point.y >= y1 && point.y <= y1 + height)\n        return true;\n    }\n    return false;\n  }\n  onViewUpdate() {\n    if (!this.didViewUpdate)\n      this._didTextUpdate = true;\n    super.onViewUpdate();\n  }\n  _getKey() {\n    return `${this.text}:${this._style.styleKey}:${this._resolution}`;\n  }\n  /**\n   * Destroys this text renderable and optionally its style texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the text style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the text style\n   * @param {boolean} [options.style=false] - Should it destroy the style of the text\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    this.owner = null;\n    this._bounds = null;\n    this._anchor = null;\n    if (typeof options === \"boolean\" ? options : options?.style) {\n      this._style.destroy(options);\n    }\n    this._style = null;\n    this._text = null;\n  }\n}\nfunction ensureTextOptions(args, name) {\n  let options = args[0] ?? {};\n  if (typeof options === \"string\" || args[1]) {\n    deprecation(v8_0_0, `use new ${name}({ text: \"hi!\", style }) instead`);\n    options = {\n      text: options,\n      style: args[1]\n    };\n  }\n  return options;\n}\n\nexport { AbstractText, ensureTextOptions };\n//# sourceMappingURL=AbstractText.mjs.map\n"],"names":["AbstractText","ViewContainer","options","styleClass","text","resolution","style","anchor","width","height","roundPixels","rest","ObservablePoint","value","_a","out","point","x1","y1","ensureTextOptions","args","name","deprecation","v8_0_0"],"mappings":"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","x_google_ignoreList":[0]}