{"version":3,"file":"index206.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/renderTexture/BaseRenderTexture.mjs"],"sourcesContent":["import { Color } from \"@pixi/color\";\nimport { MSAA_QUALITY, MIPMAP_MODES } from \"@pixi/constants\";\nimport { Framebuffer } from \"../framebuffer/Framebuffer.mjs\";\nimport { BaseTexture } from \"../textures/BaseTexture.mjs\";\nclass BaseRenderTexture extends BaseTexture {\n  /**\n   * @param options\n   * @param {number} [options.width=100] - The width of the base render texture.\n   * @param {number} [options.height=100] - The height of the base render texture.\n   * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.BaseTexture.defaultOptions.scaleMode] - See {@link PIXI.SCALE_MODES}\n   *   for possible values.\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n   *   of the texture being generated.\n   * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n   */\n  constructor(options = {}) {\n    if (typeof options == \"number\") {\n      const width = arguments[0], height = arguments[1], scaleMode = arguments[2], resolution = arguments[3];\n      options = { width, height, scaleMode, resolution };\n    }\n    options.width = options.width ?? 100, options.height = options.height ?? 100, options.multisample ?? (options.multisample = MSAA_QUALITY.NONE), super(null, options), this.mipmap = MIPMAP_MODES.OFF, this.valid = !0, this._clear = new Color([0, 0, 0, 0]), this.framebuffer = new Framebuffer(this.realWidth, this.realHeight).addColorTexture(0, this), this.framebuffer.multisample = options.multisample, this.maskStack = [], this.filterStack = [{}];\n  }\n  /** Color when clearning the texture. */\n  set clearColor(value) {\n    this._clear.setValue(value);\n  }\n  get clearColor() {\n    return this._clear.value;\n  }\n  /**\n   * Color object when clearning the texture.\n   * @readonly\n   * @since 7.2.0\n   */\n  get clear() {\n    return this._clear;\n  }\n  /**\n   * Shortcut to `this.framebuffer.multisample`.\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  get multisample() {\n    return this.framebuffer.multisample;\n  }\n  set multisample(value) {\n    this.framebuffer.multisample = value;\n  }\n  /**\n   * Resizes the BaseRenderTexture.\n   * @param desiredWidth - The desired width to resize to.\n   * @param desiredHeight - The desired height to resize to.\n   */\n  resize(desiredWidth, desiredHeight) {\n    this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution), this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n  }\n  /**\n   * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n   * This means you can still use the texture later which will upload it to GPU\n   * memory again.\n   * @fires PIXI.BaseTexture#dispose\n   */\n  dispose() {\n    this.framebuffer.dispose(), super.dispose();\n  }\n  /** Destroys this texture. */\n  destroy() {\n    super.destroy(), this.framebuffer.destroyDepthTexture(), this.framebuffer = null;\n  }\n}\nexport {\n  BaseRenderTexture\n};\n//# sourceMappingURL=BaseRenderTexture.mjs.map\n"],"names":["BaseRenderTexture","BaseTexture","options","width","height","scaleMode","resolution","MSAA_QUALITY","MIPMAP_MODES","Color","Framebuffer","value","desiredWidth","desiredHeight"],"mappings":";;;;AAIA,MAAMA,UAA0BC,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW1C,YAAYC,IAAU,IAAI;AACxB,QAAI,OAAOA,KAAW,UAAU;AAC9B,YAAMC,IAAQ,UAAU,CAAC,GAAGC,IAAS,UAAU,CAAC,GAAGC,IAAY,UAAU,CAAC,GAAGC,IAAa,UAAU,CAAC;AACrG,MAAAJ,IAAU,EAAE,OAAAC,GAAO,QAAAC,GAAQ,WAAAC,GAAW,YAAAC,EAAU;AAAA,IACjD;AACD,IAAAJ,EAAQ,QAAQA,EAAQ,SAAS,KAAKA,EAAQ,SAASA,EAAQ,UAAU,KAAKA,EAAQ,gBAAgBA,EAAQ,cAAcK,EAAa,OAAO,MAAM,MAAML,CAAO,GAAG,KAAK,SAASM,EAAa,KAAK,KAAK,QAAQ,IAAI,KAAK,SAAS,IAAIC,EAAM,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,cAAc,IAAIC,EAAY,KAAK,WAAW,KAAK,UAAU,EAAE,gBAAgB,GAAG,IAAI,GAAG,KAAK,YAAY,cAAcR,EAAQ,aAAa,KAAK,YAAY,CAAA,GAAI,KAAK,cAAc,CAAC,CAAE,CAAA;AAAA,EAC5b;AAAA;AAAA,EAED,IAAI,WAAWS,GAAO;AACpB,SAAK,OAAO,SAASA,CAAK;AAAA,EAC3B;AAAA,EACD,IAAI,aAAa;AACf,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,QAAQ;AACV,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,cAAc;AAChB,WAAO,KAAK,YAAY;AAAA,EACzB;AAAA,EACD,IAAI,YAAYA,GAAO;AACrB,SAAK,YAAY,cAAcA;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAOC,GAAcC,GAAe;AAClC,SAAK,YAAY,OAAOD,IAAe,KAAK,YAAYC,IAAgB,KAAK,UAAU,GAAG,KAAK,YAAY,KAAK,YAAY,OAAO,KAAK,YAAY,MAAM;AAAA,EAC3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,UAAU;AACR,SAAK,YAAY,QAAS,GAAE,MAAM,QAAO;AAAA,EAC1C;AAAA;AAAA,EAED,UAAU;AACR,UAAM,QAAS,GAAE,KAAK,YAAY,uBAAuB,KAAK,cAAc;AAAA,EAC7E;AACH;","x_google_ignoreList":[0]}