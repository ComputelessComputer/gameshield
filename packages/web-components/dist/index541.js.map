{"version":3,"file":"index541.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n"],"names":["ParticleContainerPipe","renderer","adaptor","State","UniformGroup","Matrix","ParticleShader","_renderable","renderable","instructionSet","ParticleBuffer","container","children","buffer","state","getAdjustedBlendModeBlend","uniforms","transformationMatrix","color32BitToUniform"],"mappings":";;;;;;;AASA,MAAMA,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1B,YAAYC,GAAUC,GAAS;AAC7B,SAAK,QAAQC,EAAM,SACnB,KAAK,iBAAiC,uBAAO,OAAO,IAAI,GAExD,KAAK,0BAA0B,KAAK,kBAAkB,KAAK,IAAI,GAC/D,KAAK,gBAAgB,IAAIC,EAAa;AAAA,MACpC,oBAAoB,EAAE,OAAO,IAAIC,EAAM,GAAI,MAAM,cAAe;AAAA,MAChE,QAAQ,EAAE,OAAO,IAAI,aAAa,CAAC,GAAG,MAAM,YAAa;AAAA,MACzD,QAAQ,EAAE,OAAO,GAAG,MAAM,MAAO;AAAA,MACjC,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,YAAa;AAAA,IACvD,CAAK,GACD,KAAK,WAAWJ,GAChB,KAAK,UAAUC,GACf,KAAK,gBAAgB,IAAII,KACzB,KAAK,QAAQH,EAAM;EACpB;AAAA,EACD,mBAAmBI,GAAa;AAC9B,WAAO;AAAA,EACR;AAAA,EACD,cAAcC,GAAYC,GAAgB;AACxC,SAAK,SAAS,YAAY,MAAM,MAAMA,CAAc,GACpDA,EAAe,IAAID,CAAU;AAAA,EAC9B;AAAA,EACD,WAAWA,GAAY;AACrB,WAAO,KAAK,eAAeA,EAAW,GAAG,KAAK,KAAK,YAAYA,CAAU;AAAA,EAC1E;AAAA,EACD,YAAYA,GAAY;AACtB,gBAAK,eAAeA,EAAW,GAAG,IAAI,IAAIE,EAAe;AAAA,MACvD,MAAMF,EAAW,iBAAiB;AAAA,MAClC,YAAYA,EAAW;AAAA,IAC7B,CAAK,GACDA,EAAW,GAAG,aAAa,KAAK,uBAAuB,GAChD,KAAK,eAAeA,EAAW,GAAG;AAAA,EAC1C;AAAA,EACD,iBAAiBD,GAAa;AAAA,EAC7B;AAAA,EACD,kBAAkBC,GAAY;AAE5B,IADe,KAAK,eAAeA,EAAW,GAAG,EAC1C,QAAO,GACd,KAAK,eAAeA,EAAW,GAAG,IAAI,MACtCA,EAAW,IAAI,aAAa,KAAK,uBAAuB;AAAA,EACzD;AAAA,EACD,QAAQG,GAAW;AACjB,UAAMC,IAAWD,EAAU;AAC3B,QAAIC,EAAS,WAAW;AACtB;AAEF,UAAMX,IAAW,KAAK,UAChBY,IAAS,KAAK,WAAWF,CAAS;AACxC,IAAAA,EAAU,YAAYA,EAAU,UAAUC,EAAS,CAAC,EAAE;AACtD,UAAME,IAAQ,KAAK;AACnB,IAAAD,EAAO,OAAOD,GAAUD,EAAU,cAAc,GAChDA,EAAU,iBAAiB,IAC3BG,EAAM,YAAYC,EAA0BJ,EAAU,WAAWA,EAAU,QAAQ,OAAO;AAC1F,UAAMK,IAAW,KAAK,cAAc,UAC9BC,IAAuBD,EAAS;AACtC,IAAAL,EAAU,eAAe,OAAOM,CAAoB,GACpDA,EAAqB,QAAQhB,EAAS,eAAe,kBAAkB,gBAAgB,GACvFe,EAAS,cAAcf,EAAS,eAAe,kBAAkB,YACjEe,EAAS,SAASf,EAAS,eAAeU,EAAU,cACpDO;AAAA,MACEP,EAAU;AAAA,MACVK,EAAS;AAAA,MACT;AAAA,IACN,GACI,KAAK,QAAQ,QAAQ,MAAML,CAAS;AAAA,EACrC;AAAA;AAAA,EAED,UAAU;AACR,IAAI,KAAK,kBACP,KAAK,cAAc,WACnB,KAAK,gBAAgB;AAAA,EAExB;AACH;","x_google_ignoreList":[0]}