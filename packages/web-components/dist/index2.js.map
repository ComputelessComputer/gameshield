{"version":3,"file":"index2.js","sources":["../src/game-shield.ts"],"sourcesContent":["import { LitElement, html, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { Difficulty } from \"./types\";\nimport { GameType, GameFactory, GameResult } from \"@gameshield/game-core\";\nimport { BehaviorAnalyzer } from \"./behavior/behavior-analyzer\";\nimport { SecurityUtils } from \"./security/security-utils\";\nimport * as PIXI from \"pixi.js\";\n\n/**\n * GameShield Web Component\n *\n * A CAPTCHA system that uses interactive games to verify human users.\n *\n * @element game-shield\n *\n * @prop {string} apiKey - API key for server verification\n * @prop {string} apiEndpoint - Endpoint for server verification\n * @prop {string} size - Size of the component (1:1 aspect ratio)\n *\n * @fires success - When CAPTCHA is successfully completed\n * @fires failure - When CAPTCHA fails\n * @fires timeout - When CAPTCHA times out\n */\n@customElement(\"game-shield\")\nexport class GameShield extends LitElement {\n  // Public properties (attributes)\n  @property({ type: String }) apiKey = \"\";\n  @property({ type: String, attribute: \"game-type\" }) gameType: GameType =\n    \"random\";\n  @property({ type: String }) difficulty: Difficulty = \"medium\";\n  @property({ type: String }) apiEndpoint = \"\";\n  @property({ type: String }) size = \"400px\";\n\n  // Internal state\n  @state() private isVerified = false;\n  @state() private token: string | null = null;\n  @state() private gameInstance: any = null;\n  @state() private pixiApp: PIXI.Application | null = null;\n  @state() private isLoading = false;\n  @state() private error: string | null = null;\n\n  // Private properties\n  private behaviorAnalyzer = new BehaviorAnalyzer();\n  private securityUtils = new SecurityUtils();\n  private sessionId = this.securityUtils.generateSessionId();\n  private gameContainer?: HTMLElement;\n  private timeoutId: any;\n\n  static styles = css`\n    :host {\n      display: block;\n      width: 400px;\n      height: 400px;\n      max-width: 500px;\n      max-height: 500px;\n      min-width: 200px;\n      min-height: 200px;\n      border: none;\n      position: relative;\n      box-sizing: border-box;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n        Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n    }\n\n    .game-container {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: #000000;\n      box-sizing: border-box;\n      border: 1px solid #ccc;\n    }\n\n    .loading {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: rgba(255, 255, 255, 0.8);\n      z-index: 10;\n    }\n\n    .success-badge {\n      position: absolute;\n      bottom: 10px;\n      right: 10px;\n      background: #4caf50;\n      color: white;\n      padding: 5px 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      z-index: 5;\n    }\n\n    .error {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: rgba(255, 0, 0, 0.1);\n      color: #d32f2f;\n      text-align: center;\n      padding: 20px;\n      z-index: 10;\n    }\n\n    .spinner {\n      width: 40px;\n      height: 40px;\n      border: 4px solid rgba(0, 0, 0, 0.1);\n      border-radius: 50%;\n      border-top-color: #3498db;\n      animation: spin 1s ease-in-out infinite;\n    }\n\n    @keyframes spin {\n      to {\n        transform: rotate(360deg);\n      }\n    }\n  `;\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Start behavior analysis as soon as component is connected\n    this.behaviorAnalyzer.startTracking();\n\n    // Always force random game type for security\n    this.gameType = \"random\";\n\n    // Set size based on the size attribute\n    this.updateSize();\n\n    // Add resize observer to handle responsive sizing\n    this.setupResizeObserver();\n  }\n\n  /**\n   * Updates the component size based on the size property\n   * Ensures consistent rendering across different browsers\n   */\n  private updateSize() {\n    const sizeValue = this.size.trim();\n\n    if (sizeValue === \"100%\") {\n      // For responsive sizing\n      this.style.width = \"100%\";\n      this.style.height = \"100%\";\n    } else {\n      // For specific size values\n      const numericSize = parseInt(sizeValue);\n\n      if (!isNaN(numericSize)) {\n        // If it's a numeric value, cap at 500px\n        const finalSize = Math.min(numericSize, 500) + \"px\";\n        this.style.width = finalSize;\n        this.style.height = finalSize;\n      } else {\n        // For percentage or other values\n        this.style.width = sizeValue;\n        this.style.height = sizeValue;\n      }\n    }\n  }\n\n  /**\n   * Sets up a resize observer to handle responsive sizing\n   */\n  private setupResizeObserver() {\n    if (typeof ResizeObserver !== \"undefined\") {\n      const observer = new ResizeObserver(() => {\n        this.updateSize();\n\n        // Update game dimensions if game is initialized and has resize method\n        if (this.gameInstance && this.gameContainer) {\n          if (typeof this.gameInstance.resize === \"function\") {\n            this.gameInstance.resize(\n              this.gameContainer.clientWidth,\n              this.gameContainer.clientHeight\n            );\n          }\n        }\n      });\n\n      observer.observe(this);\n\n      // Store observer reference for cleanup\n      (this as any)._resizeObserver = observer;\n    }\n  }\n\n  firstUpdated() {\n    this.gameContainer = this.renderRoot.querySelector(\n      \".game-container\"\n    ) as HTMLElement;\n    this.startVerification();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.stopVerification();\n    this.behaviorAnalyzer.stopTracking();\n\n    // Clean up resize observer\n    if ((this as any)._resizeObserver) {\n      (this as any)._resizeObserver.disconnect();\n    }\n\n    // Clear timeout\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n  }\n\n  async startVerification() {\n    this.isLoading = true;\n    this.isVerified = false;\n    this.token = null;\n\n    try {\n      // Get game container\n      this.gameContainer = this.shadowRoot?.querySelector(\".game-container\") as HTMLElement;\n      if (!this.gameContainer) {\n        throw new Error(\"Game container not found\");\n      }\n\n      // Create PIXI application\n      this.pixiApp = new PIXI.Application({\n        width: this.gameContainer.clientWidth,\n        height: this.gameContainer.clientHeight,\n        backgroundColor: 0x1099bb\n      });\n\n      // Create game instance\n      this.gameInstance = GameFactory.createGame(this.gameType, {\n        app: this.pixiApp,\n        difficulty: this.difficulty as 'easy' | 'medium' | 'hard',\n        onComplete: (result: GameResult) => this.handleGameCompletion(result)\n      });\n\n      // Mount game to container\n      this.gameContainer.appendChild(this.pixiApp.view as unknown as HTMLElement);\n      this.gameInstance.mount(this.gameContainer);\n\n      this.isLoading = false;\n\n      // Start behavior analysis\n      this.behaviorAnalyzer.startTracking();\n      \n      // Add timeout handling\n      this.timeoutId = setTimeout(() => {\n        if (!this.isVerified && !this.error) {\n          this.dispatchEvent(\n            new CustomEvent(\"timeout\", {\n              detail: { message: \"Game timeout\" },\n              bubbles: true,\n              composed: true,\n            })\n          );\n        }\n      }, 120000); // 2 minute timeout\n    } catch (error) {\n      console.error(\"Error starting verification:\", error);\n      this.isLoading = false;\n    }\n  }\n\n  stopVerification() {\n    if (this.gameInstance) {\n      this.gameInstance.destroy();\n      this.gameInstance = null;\n    }\n\n    if (this.pixiApp) {\n      this.pixiApp.destroy(true);\n      this.pixiApp = null;\n    }\n\n    if (this.behaviorAnalyzer) {\n      this.behaviorAnalyzer.stopTracking();\n    }\n  }\n\n  private handleGameCompletion(result: GameResult) {\n    this.isVerified = result.success;\n\n    // Clear timeout\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n\n    if (result.success) {\n      // Get behavior analysis results\n      const behaviorResult = this.behaviorAnalyzer.analyze();\n\n      // Generate token\n      const payload = {\n        sessionId: this.sessionId,\n        timestamp: Date.now(),\n        gameType: this.gameType,\n        behaviorMetrics: behaviorResult,\n        gameResult: {\n          success: result.success,\n          score: result.score,\n        },\n      };\n\n      this.token = this.securityUtils.generateToken(payload);\n\n      // Dispatch success event\n      this.dispatchEvent(\n        new CustomEvent(\"success\", {\n          detail: { token: this.token },\n          bubbles: true,\n          composed: true,\n        })\n      );\n\n      // Verify with server if endpoint is provided\n      if (this.apiEndpoint && this.token) {\n        this.verifyWithServer(this.token).catch((error) => {\n          console.error(\"Server verification failed:\", error);\n        });\n      }\n    } else {\n      this.dispatchEvent(\n        new CustomEvent(\"failure\", {\n          detail: { reason: \"Game failed\" },\n          bubbles: true,\n          composed: true,\n        })\n      );\n    }\n  }\n\n  private async verifyWithServer(token: string) {\n    const response = await fetch(this.apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-API-Key\": this.apiKey,\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Server verification failed: ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  /**\n   * Reset the CAPTCHA to its initial state\n   */\n  reset() {\n    this.stopVerification();\n    this.sessionId = this.securityUtils.generateSessionId();\n    this.token = null;\n    this.isVerified = false;\n    this.error = null;\n    this.behaviorAnalyzer.reset();\n    this.startVerification();\n  }\n\n  render() {\n    return html`\n      <div class=\"game-container\"></div>\n\n      ${this.isLoading\n        ? html`<div class=\"loading\"><div class=\"spinner\"></div></div>`\n        : \"\"}\n      ${this.error ? html`<div class=\"error\">${this.error}</div>` : \"\"}\n      ${this.isVerified\n        ? html`<div class=\"success-badge\">✓ Verified</div>`\n        : \"\"}\n    `;\n  }\n}\n"],"names":["GameShield","LitElement","BehaviorAnalyzer","SecurityUtils","sizeValue","numericSize","finalSize","observer","_a","PIXI.Application","GameFactory","result","error","behaviorResult","payload","token","response","html","css","__decorateClass","property","state","customElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBa,IAAAA,IAAN,cAAyBC,EAAW;AAAA,EAApC,cAAA;AAAA,UAAA,GAAA,SAAA,GAEgC,KAAA,SAAA,IAEnC,KAAA,WAAA,UACmD,KAAA,aAAA,UACX,KAAA,cAAA,IACP,KAAA,OAAA,SAG1B,KAAQ,aAAa,IACrB,KAAQ,QAAuB,MAC/B,KAAQ,eAAoB,MAC5B,KAAQ,UAAmC,MAC3C,KAAQ,YAAY,IACpB,KAAQ,QAAuB,MAGhC,KAAA,mBAAmB,IAAIC,KACvB,KAAA,gBAAgB,IAAIC,KACpB,KAAA,YAAY,KAAK,cAAc,kBAAkB;AAAA,EAAA;AAAA,EAwFzD,oBAAoB;AAClB,UAAM,kBAAkB,GAExB,KAAK,iBAAiB,iBAGtB,KAAK,WAAW,UAGhB,KAAK,WAAW,GAGhB,KAAK,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,aAAa;AACb,UAAAC,IAAY,KAAK,KAAK,KAAK;AAEjC,QAAIA,MAAc;AAEhB,WAAK,MAAM,QAAQ,QACnB,KAAK,MAAM,SAAS;AAAA,SACf;AAEC,YAAAC,IAAc,SAASD,CAAS;AAElC,UAAC,MAAMC,CAAW;AAOpB,aAAK,MAAM,QAAQD,GACnB,KAAK,MAAM,SAASA;AAAA,WARG;AAEvB,cAAME,IAAY,KAAK,IAAID,GAAa,GAAG,IAAI;AAC/C,aAAK,MAAM,QAAQC,GACnB,KAAK,MAAM,SAASA;AAAA,MAAA;AAAA,IAMxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAAsB;AACxB,QAAA,OAAO,iBAAmB,KAAa;AACnC,YAAAC,IAAW,IAAI,eAAe,MAAM;AACxC,aAAK,WAAW,GAGZ,KAAK,gBAAgB,KAAK,iBACxB,OAAO,KAAK,aAAa,UAAW,cACtC,KAAK,aAAa;AAAA,UAChB,KAAK,cAAc;AAAA,UACnB,KAAK,cAAc;AAAA,QAAA;AAAA,MAGzB,CACD;AAED,MAAAA,EAAS,QAAQ,IAAI,GAGpB,KAAa,kBAAkBA;AAAA,IAClC;AAAA,EACF;AAAA,EAEA,eAAe;AACR,SAAA,gBAAgB,KAAK,WAAW;AAAA,MACnC;AAAA,IAAA,GAEF,KAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,uBAAuB;AACrB,UAAM,qBAAqB,GAC3B,KAAK,iBAAiB,GACtB,KAAK,iBAAiB,gBAGjB,KAAa,mBACf,KAAa,gBAAgB,cAI5B,KAAK,aACP,aAAa,KAAK,SAAS;AAAA,EAE/B;AAAA,EAEA,MAAM,oBAAoB;;AACxB,SAAK,YAAY,IACjB,KAAK,aAAa,IAClB,KAAK,QAAQ;AAET,QAAA;AAGE,UADJ,KAAK,iBAAgBC,IAAA,KAAK,eAAL,gBAAAA,EAAiB,cAAc,oBAChD,CAAC,KAAK;AACF,cAAA,IAAI,MAAM,0BAA0B;AAIvC,WAAA,UAAU,IAAIC,EAAiB;AAAA,QAClC,OAAO,KAAK,cAAc;AAAA,QAC1B,QAAQ,KAAK,cAAc;AAAA,QAC3B,iBAAiB;AAAA,MAAA,CAClB,GAGD,KAAK,eAAeC,EAAY,WAAW,KAAK,UAAU;AAAA,QACxD,KAAK,KAAK;AAAA,QACV,YAAY,KAAK;AAAA,QACjB,YAAY,CAACC,MAAuB,KAAK,qBAAqBA,CAAM;AAAA,MAAA,CACrE,GAGD,KAAK,cAAc,YAAY,KAAK,QAAQ,IAA8B,GACrE,KAAA,aAAa,MAAM,KAAK,aAAa,GAE1C,KAAK,YAAY,IAGjB,KAAK,iBAAiB,iBAGjB,KAAA,YAAY,WAAW,MAAM;AAChC,QAAI,CAAC,KAAK,cAAc,CAAC,KAAK,SACvB,KAAA;AAAA,UACH,IAAI,YAAY,WAAW;AAAA,YACzB,QAAQ,EAAE,SAAS,eAAe;AAAA,YAClC,SAAS;AAAA,YACT,UAAU;AAAA,UAAA,CACX;AAAA,QAAA;AAAA,SAGJ,IAAM;AAAA,aACFC,GAAO;AACN,cAAA,MAAM,gCAAgCA,CAAK,GACnD,KAAK,YAAY;AAAA,IACnB;AAAA,EACF;AAAA,EAEA,mBAAmB;AACjB,IAAI,KAAK,iBACP,KAAK,aAAa,WAClB,KAAK,eAAe,OAGlB,KAAK,YACF,KAAA,QAAQ,QAAQ,EAAI,GACzB,KAAK,UAAU,OAGb,KAAK,oBACP,KAAK,iBAAiB;EAE1B;AAAA,EAEQ,qBAAqBD,GAAoB;AAQ/C,QAPA,KAAK,aAAaA,EAAO,SAGrB,KAAK,aACP,aAAa,KAAK,SAAS,GAGzBA,EAAO,SAAS;AAEZ,YAAAE,IAAiB,KAAK,iBAAiB,QAAQ,GAG/CC,IAAU;AAAA,QACd,WAAW,KAAK;AAAA,QAChB,WAAW,KAAK,IAAI;AAAA,QACpB,UAAU,KAAK;AAAA,QACf,iBAAiBD;AAAA,QACjB,YAAY;AAAA,UACV,SAASF,EAAO;AAAA,UAChB,OAAOA,EAAO;AAAA,QAChB;AAAA,MAAA;AAGF,WAAK,QAAQ,KAAK,cAAc,cAAcG,CAAO,GAGhD,KAAA;AAAA,QACH,IAAI,YAAY,WAAW;AAAA,UACzB,QAAQ,EAAE,OAAO,KAAK,MAAM;AAAA,UAC5B,SAAS;AAAA,UACT,UAAU;AAAA,QAAA,CACX;AAAA,MAAA,GAIC,KAAK,eAAe,KAAK,SAC3B,KAAK,iBAAiB,KAAK,KAAK,EAAE,MAAM,CAACF,MAAU;AACzC,gBAAA,MAAM,+BAA+BA,CAAK;AAAA,MAAA,CACnD;AAAA,IACH;AAEK,WAAA;AAAA,QACH,IAAI,YAAY,WAAW;AAAA,UACzB,QAAQ,EAAE,QAAQ,cAAc;AAAA,UAChC,SAAS;AAAA,UACT,UAAU;AAAA,QAAA,CACX;AAAA,MAAA;AAAA,EAGP;AAAA,EAEA,MAAc,iBAAiBG,GAAe;AAC5C,UAAMC,IAAW,MAAM,MAAM,KAAK,aAAa;AAAA,MAC7C,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,aAAa,KAAK;AAAA,MACpB;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAAD,GAAO;AAAA,IAAA,CAC/B;AAEG,QAAA,CAACC,EAAS;AACZ,YAAM,IAAI,MAAM,+BAA+BA,EAAS,UAAU,EAAE;AAG/D,WAAA,MAAMA,EAAS;EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,SAAK,iBAAiB,GACjB,KAAA,YAAY,KAAK,cAAc,kBAAkB,GACtD,KAAK,QAAQ,MACb,KAAK,aAAa,IAClB,KAAK,QAAQ,MACb,KAAK,iBAAiB,SACtB,KAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,SAAS;AACA,WAAAC;AAAA;AAAA;AAAA,QAGH,KAAK,YACHA,4DACA,EAAE;AAAA,QACJ,KAAK,QAAQA,uBAA0B,KAAK,KAAK,WAAW,EAAE;AAAA,QAC9D,KAAK,aACHA,iDACA,EAAE;AAAA;AAAA,EAEV;AACF;AA5WajB,EAwBJ,SAASkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBYC,EAAA;AAAA,EAA3BC,EAAS,EAAE,MAAM,QAAQ;AAAA,GAFfpB,EAEiB,WAAA,UAAA,CAAA;AACwBmB,EAAA;AAAA,EAAnDC,EAAS,EAAE,MAAM,QAAQ,WAAW,aAAa;AAAA,GAHvCpB,EAGyC,WAAA,YAAA,CAAA;AAExBmB,EAAA;AAAA,EAA3BC,EAAS,EAAE,MAAM,QAAQ;AAAA,GALfpB,EAKiB,WAAA,cAAA,CAAA;AACAmB,EAAA;AAAA,EAA3BC,EAAS,EAAE,MAAM,QAAQ;AAAA,GANfpB,EAMiB,WAAA,eAAA,CAAA;AACAmB,EAAA;AAAA,EAA3BC,EAAS,EAAE,MAAM,QAAQ;AAAA,GAPfpB,EAOiB,WAAA,QAAA,CAAA;AAGXmB,EAAA;AAAA,EAAhBE,EAAM;AAAA,GAVIrB,EAUM,WAAA,cAAA,CAAA;AACAmB,EAAA;AAAA,EAAhBE,EAAM;AAAA,GAXIrB,EAWM,WAAA,SAAA,CAAA;AACAmB,EAAA;AAAA,EAAhBE,EAAM;AAAA,GAZIrB,EAYM,WAAA,gBAAA,CAAA;AACAmB,EAAA;AAAA,EAAhBE,EAAM;AAAA,GAbIrB,EAaM,WAAA,WAAA,CAAA;AACAmB,EAAA;AAAA,EAAhBE,EAAM;AAAA,GAdIrB,EAcM,WAAA,aAAA,CAAA;AACAmB,EAAA;AAAA,EAAhBE,EAAM;AAAA,GAfIrB,EAeM,WAAA,SAAA,CAAA;AAfNA,IAANmB,EAAA;AAAA,EADNG,EAAc,aAAa;AAAA,GACftB,CAAA;"}