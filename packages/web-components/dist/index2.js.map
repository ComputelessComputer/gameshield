{"version":3,"file":"index2.js","sources":["../src/game-shield.ts"],"sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { GameType, Difficulty } from './types';\nimport { GameFactory } from './games/game-factory';\nimport { BehaviorAnalyzer } from './behavior/behavior-analyzer';\nimport { SecurityUtils } from './security/security-utils';\n\n/**\n * GameShield Web Component\n * \n * A CAPTCHA system that uses interactive games to verify human users.\n * \n * @element game-shield\n * \n * @prop {string} apiKey - API key for server verification\n * @prop {string} apiEndpoint - Endpoint for server verification\n * @prop {string} width - Width of the component\n * @prop {string} height - Height of the component\n * \n * @fires success - When CAPTCHA is successfully completed\n * @fires failure - When CAPTCHA fails\n */\n@customElement('game-shield')\nexport class GameShield extends LitElement {\n  // Public properties (attributes)\n  @property({ type: String }) apiKey = '';\n  @property({ type: String, attribute: 'game-type' }) gameType: GameType = 'random';\n  @property({ type: String }) difficulty: Difficulty = 'medium';\n  @property({ type: String }) apiEndpoint = '';\n  @property({ type: String }) width = '400px';\n  @property({ type: String }) height = '400px';\n  \n  // Internal state\n  @state() private isVerified = false;\n  @state() private token: string | null = null;\n  @state() private gameInstance: any = null;\n  @state() private isLoading = true;\n  @state() private error: string | null = null;\n  \n  // Private properties\n  private behaviorAnalyzer = new BehaviorAnalyzer();\n  private securityUtils = new SecurityUtils();\n  private sessionId = this.securityUtils.generateSessionId();\n  private gameContainer?: HTMLElement;\n  \n  static styles = css`\n    :host {\n      display: block;\n      width: var(--game-shield-width, 400px);\n      height: var(--game-shield-height, 400px);\n      max-width: 500px;\n      max-height: 500px;\n      aspect-ratio: 1 / 1;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n      position: relative;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    }\n    \n    .game-container {\n      width: 100%;\n      height: 100%;\n      background-color: #f5f5f5;\n    }\n    \n    .loading {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: rgba(255, 255, 255, 0.8);\n      z-index: 10;\n    }\n    \n    .success-badge {\n      position: absolute;\n      bottom: 10px;\n      right: 10px;\n      background: #4CAF50;\n      color: white;\n      padding: 5px 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      z-index: 5;\n    }\n    \n    .error {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: rgba(255, 0, 0, 0.1);\n      color: #d32f2f;\n      text-align: center;\n      padding: 20px;\n      z-index: 10;\n    }\n    \n    .spinner {\n      width: 40px;\n      height: 40px;\n      border: 4px solid rgba(0, 0, 0, 0.1);\n      border-radius: 50%;\n      border-top-color: #3498db;\n      animation: spin 1s ease-in-out infinite;\n    }\n    \n    @keyframes spin {\n      to { transform: rotate(360deg); }\n    }\n  `;\n  \n  connectedCallback() {\n    super.connectedCallback();\n    // Start behavior analysis as soon as component is connected\n    this.behaviorAnalyzer.startTracking();\n    \n    // Always force random game type for security\n    this.gameType = 'random';\n    \n    // Set CSS variables for width and height\n    this.style.setProperty('--game-shield-width', this.width);\n    this.style.setProperty('--game-shield-height', this.height);\n  }\n  \n  firstUpdated() {\n    this.gameContainer = this.renderRoot.querySelector('.game-container') as HTMLElement;\n    this.initializeGame();\n  }\n  \n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.destroyGame();\n    this.behaviorAnalyzer.stopTracking();\n  }\n  \n  private async initializeGame() {\n    try {\n      this.isLoading = true;\n      \n      if (!this.gameContainer) {\n        throw new Error('Game container not found');\n      }\n      \n      // Create game instance - always use random type\n      this.gameInstance = GameFactory.createGame('random', {\n        difficulty: 'medium',\n        width: this.gameContainer.clientWidth,\n        height: this.gameContainer.clientHeight,\n        onComplete: this.handleGameComplete.bind(this)\n      });\n      \n      // Mount game to container\n      await this.gameInstance.mount(this.gameContainer);\n      \n      this.isLoading = false;\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : 'Failed to initialize game';\n      this.isLoading = false;\n      console.error('GameShield initialization error:', error);\n    }\n  }\n  \n  private handleGameComplete(result: { success: boolean; score: number }) {\n    this.isVerified = result.success;\n    \n    if (result.success) {\n      // Get behavior analysis results\n      const behaviorResult = this.behaviorAnalyzer.analyze();\n      \n      // Generate token\n      const payload = {\n        sessionId: this.sessionId,\n        timestamp: Date.now(),\n        gameType: this.gameType,\n        behaviorMetrics: behaviorResult,\n        gameResult: {\n          success: result.success,\n          score: result.score\n        }\n      };\n      \n      this.token = this.securityUtils.generateToken(payload);\n      \n      // Dispatch success event\n      this.dispatchEvent(new CustomEvent('success', { \n        detail: { token: this.token },\n        bubbles: true,\n        composed: true\n      }));\n      \n      // Verify with server if endpoint is provided\n      if (this.apiEndpoint && this.token) {\n        this.verifyWithServer(this.token).catch(error => {\n          console.error('Server verification failed:', error);\n        });\n      }\n    } else {\n      // Dispatch failure event\n      this.dispatchEvent(new CustomEvent('failure', { \n        bubbles: true,\n        composed: true\n      }));\n    }\n  }\n  \n  private async verifyWithServer(token: string) {\n    const response = await fetch(this.apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Key': this.apiKey\n      },\n      body: JSON.stringify({ token })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Server verification failed: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  }\n  \n  /**\n   * Reset the CAPTCHA to its initial state\n   */\n  reset() {\n    this.destroyGame();\n    this.sessionId = this.securityUtils.generateSessionId();\n    this.token = null;\n    this.isVerified = false;\n    this.error = null;\n    this.behaviorAnalyzer.reset();\n    this.initializeGame();\n  }\n  \n  private destroyGame() {\n    if (this.gameInstance) {\n      this.gameInstance.destroy();\n      this.gameInstance = null;\n    }\n  }\n  \n  render() {\n    return html`\n      <div class=\"game-container\"></div>\n      \n      ${this.isLoading ? \n        html`<div class=\"loading\"><div class=\"spinner\"></div></div>` : \n        ''\n      }\n      \n      ${this.error ? \n        html`<div class=\"error\">${this.error}</div>` : \n        ''\n      }\n      \n      ${this.isVerified ? \n        html`<div class=\"success-badge\">âœ“ Verified</div>` : \n        ''\n      }\n    `;\n  }\n}\n"],"names":["GameShield","LitElement","BehaviorAnalyzer","SecurityUtils","GameFactory","error","result","behaviorResult","payload","token","response","html","css","__decorateClass","property","state","customElement"],"mappings":"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"}