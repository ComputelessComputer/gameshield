{"version":3,"file":"index222.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/shader/utils/uniformParsers.mjs"],"sourcesContent":["const uniformParsers = [\n  // a float cache layer\n  {\n    test: (data) => data.type === \"float\" && data.size === 1 && !data.isArray,\n    code: (name) => `\n            if(uv[\"${name}\"] !== ud[\"${name}\"].value)\n            {\n                ud[\"${name}\"].value = uv[\"${name}\"]\n                gl.uniform1f(ud[\"${name}\"].location, uv[\"${name}\"])\n            }\n            `\n  },\n  // handling samplers\n  {\n    test: (data, uniform) => (\n      // eslint-disable-next-line max-len,no-eq-null,eqeqeq\n      (data.type === \"sampler2D\" || data.type === \"samplerCube\" || data.type === \"sampler2DArray\") && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== void 0)\n    ),\n    code: (name) => `t = syncData.textureCount++;\n\n            renderer.texture.bind(uv[\"${name}\"], t);\n\n            if(ud[\"${name}\"].value !== t)\n            {\n                ud[\"${name}\"].value = t;\n                gl.uniform1i(ud[\"${name}\"].location, t);\n; // eslint-disable-line max-len\n            }`\n  },\n  // uploading pixi matrix object to mat3\n  {\n    test: (data, uniform) => data.type === \"mat3\" && data.size === 1 && !data.isArray && uniform.a !== void 0,\n    code: (name) => (\n      // TODO and some smart caching dirty ids here!\n      `\n            gl.uniformMatrix3fv(ud[\"${name}\"].location, false, uv[\"${name}\"].toArray(true));\n            `\n    ),\n    codeUbo: (name) => `\n                var ${name}_matrix = uv.${name}.toArray(true);\n\n                data[offset] = ${name}_matrix[0];\n                data[offset+1] = ${name}_matrix[1];\n                data[offset+2] = ${name}_matrix[2];\n        \n                data[offset + 4] = ${name}_matrix[3];\n                data[offset + 5] = ${name}_matrix[4];\n                data[offset + 6] = ${name}_matrix[5];\n        \n                data[offset + 8] = ${name}_matrix[6];\n                data[offset + 9] = ${name}_matrix[7];\n                data[offset + 10] = ${name}_matrix[8];\n            `\n  },\n  // uploading a pixi point as a vec2 with caching layer\n  {\n    test: (data, uniform) => data.type === \"vec2\" && data.size === 1 && !data.isArray && uniform.x !== void 0,\n    code: (name) => `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud[\"${name}\"].location, v.x, v.y);\n                }`,\n    codeUbo: (name) => `\n                v = uv.${name};\n\n                data[offset] = v.x;\n                data[offset+1] = v.y;\n            `\n  },\n  // caching layer for a vec2\n  {\n    test: (data) => data.type === \"vec2\" && data.size === 1 && !data.isArray,\n    code: (name) => `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud[\"${name}\"].location, v[0], v[1]);\n                }\n            `\n  },\n  // upload a pixi rectangle as a vec4 with caching layer\n  {\n    test: (data, uniform) => data.type === \"vec4\" && data.size === 1 && !data.isArray && uniform.width !== void 0,\n    code: (name) => `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud[\"${name}\"].location, v.x, v.y, v.width, v.height)\n                }`,\n    codeUbo: (name) => `\n                    v = uv.${name};\n\n                    data[offset] = v.x;\n                    data[offset+1] = v.y;\n                    data[offset+2] = v.width;\n                    data[offset+3] = v.height;\n                `\n  },\n  // upload a pixi color as vec4 with caching layer\n  {\n    test: (data, uniform) => data.type === \"vec4\" && data.size === 1 && !data.isArray && uniform.red !== void 0,\n    code: (name) => `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha)\n                {\n                    cv[0] = v.red;\n                    cv[1] = v.green;\n                    cv[2] = v.blue;\n                    cv[3] = v.alpha;\n                    gl.uniform4f(ud[\"${name}\"].location, v.red, v.green, v.blue, v.alpha)\n                }`,\n    codeUbo: (name) => `\n                    v = uv.${name};\n\n                    data[offset] = v.red;\n                    data[offset+1] = v.green;\n                    data[offset+2] = v.blue;\n                    data[offset+3] = v.alpha;\n                `\n  },\n  // upload a pixi color as a vec3 with caching layer\n  {\n    test: (data, uniform) => data.type === \"vec3\" && data.size === 1 && !data.isArray && uniform.red !== void 0,\n    code: (name) => `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.a)\n                {\n                    cv[0] = v.red;\n                    cv[1] = v.green;\n                    cv[2] = v.blue;\n    \n                    gl.uniform3f(ud[\"${name}\"].location, v.red, v.green, v.blue)\n                }`,\n    codeUbo: (name) => `\n                    v = uv.${name};\n\n                    data[offset] = v.red;\n                    data[offset+1] = v.green;\n                    data[offset+2] = v.blue;\n                `\n  },\n  // a caching layer for vec4 uploading\n  {\n    test: (data) => data.type === \"vec4\" && data.size === 1 && !data.isArray,\n    code: (name) => `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud[\"${name}\"].location, v[0], v[1], v[2], v[3])\n                }`\n  }\n];\nexport {\n  uniformParsers\n};\n//# sourceMappingURL=uniformParsers.mjs.map\n"],"names":["uniformParsers","data","name","uniform"],"mappings":"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","x_google_ignoreList":[0]}