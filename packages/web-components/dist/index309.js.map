{"version":3,"file":"index309.js","sources":["../../../node_modules/.pnpm/@pixi+ticker@7.4.3/node_modules/@pixi/ticker/lib/TickerListener.mjs"],"sourcesContent":["class TickerListener {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  constructor(fn, context = null, priority = 0, once = !1) {\n    this.next = null, this.previous = null, this._destroyed = !1, this.fn = fn, this.context = context, this.priority = priority, this.once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @returns `true` if the listener match the arguments\n   */\n  match(fn, context = null) {\n    return this.fn === fn && this.context === context;\n  }\n  /**\n   * Emit by calling the current function.\n   * @private\n   * @param deltaTime - time since the last emit.\n   * @returns Next ticker\n   */\n  emit(deltaTime) {\n    this.fn && (this.context ? this.fn.call(this.context, deltaTime) : this.fn(deltaTime));\n    const redirect = this.next;\n    return this.once && this.destroy(!0), this._destroyed && (this.next = null), redirect;\n  }\n  /**\n   * Connect to the list.\n   * @private\n   * @param previous - Input node, previous listener\n   */\n  connect(previous) {\n    this.previous = previous, previous.next && (previous.next.previous = this), this.next = previous.next, previous.next = this;\n  }\n  /**\n   * Destroy and don't use after this.\n   * @private\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @returns The listener to redirect while emitting or removing.\n   */\n  destroy(hard = !1) {\n    this._destroyed = !0, this.fn = null, this.context = null, this.previous && (this.previous.next = this.next), this.next && (this.next.previous = this.previous);\n    const redirect = this.next;\n    return this.next = hard ? null : redirect, this.previous = null, redirect;\n  }\n}\nexport {\n  TickerListener\n};\n//# sourceMappingURL=TickerListener.mjs.map\n"],"names":["TickerListener","fn","context","priority","once","deltaTime","redirect","previous","hard"],"mappings":"AAAA,MAAMA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASnB,YAAYC,GAAIC,IAAU,MAAMC,IAAW,GAAGC,IAAO,IAAI;AACvD,SAAK,OAAO,MAAM,KAAK,WAAW,MAAM,KAAK,aAAa,IAAI,KAAK,KAAKH,GAAI,KAAK,UAAUC,GAAS,KAAK,WAAWC,GAAU,KAAK,OAAOC;AAAA,EAC3I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAMH,GAAIC,IAAU,MAAM;AACxB,WAAO,KAAK,OAAOD,KAAM,KAAK,YAAYC;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,KAAKG,GAAW;AACd,SAAK,OAAO,KAAK,UAAU,KAAK,GAAG,KAAK,KAAK,SAASA,CAAS,IAAI,KAAK,GAAGA,CAAS;AACpF,UAAMC,IAAW,KAAK;AACtB,WAAO,KAAK,QAAQ,KAAK,QAAQ,EAAE,GAAG,KAAK,eAAe,KAAK,OAAO,OAAOA;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQC,GAAU;AAChB,SAAK,WAAWA,GAAUA,EAAS,SAASA,EAAS,KAAK,WAAW,OAAO,KAAK,OAAOA,EAAS,MAAMA,EAAS,OAAO;AAAA,EACxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,QAAQC,IAAO,IAAI;AACjB,SAAK,aAAa,IAAI,KAAK,KAAK,MAAM,KAAK,UAAU,MAAM,KAAK,aAAa,KAAK,SAAS,OAAO,KAAK,OAAO,KAAK,SAAS,KAAK,KAAK,WAAW,KAAK;AACtJ,UAAMF,IAAW,KAAK;AACtB,WAAO,KAAK,OAAOE,IAAO,OAAOF,GAAU,KAAK,WAAW,MAAMA;AAAA,EAClE;AACH;","x_google_ignoreList":[0]}