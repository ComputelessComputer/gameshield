{"version":3,"file":"index140.js","sources":["../../../node_modules/.pnpm/@pixi+filter-blur@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/filter-blur/lib/BlurFilterPass.mjs"],"sourcesContent":["import { Filter, CLEAR_MODES } from \"@pixi/core\";\nimport { generateBlurFragSource } from \"./generateBlurFragSource.mjs\";\nimport { generateBlurVertSource } from \"./generateBlurVertSource.mjs\";\nclass BlurFilterPass extends Filter {\n  /**\n   * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n   * @param strength - The strength of the blur filter.\n   * @param quality - The quality of the blur filter.\n   * @param {number|null} [resolution=PIXI.Filter.defaultResolution] - The resolution of the blur filter.\n   * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  constructor(horizontal, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5) {\n    const vertSrc = generateBlurVertSource(kernelSize, horizontal), fragSrc = generateBlurFragSource(kernelSize);\n    super(\n      // vertex shader\n      vertSrc,\n      // fragment shader\n      fragSrc\n    ), this.horizontal = horizontal, this.resolution = resolution, this._quality = 0, this.quality = quality, this.blur = strength;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - How to clear\n   */\n  apply(filterManager, input, output, clearMode) {\n    if (output ? this.horizontal ? this.uniforms.strength = 1 / output.width * (output.width / input.width) : this.uniforms.strength = 1 / output.height * (output.height / input.height) : this.horizontal ? this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width) : this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height), this.uniforms.strength *= this.strength, this.uniforms.strength /= this.passes, this.passes === 1)\n      filterManager.applyFilter(this, input, output, clearMode);\n    else {\n      const renderTarget = filterManager.getFilterTexture(), renderer = filterManager.renderer;\n      let flip = input, flop = renderTarget;\n      this.state.blend = !1, filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n      for (let i = 1; i < this.passes - 1; i++) {\n        filterManager.bindAndClear(flip, CLEAR_MODES.BLIT), this.uniforms.uSampler = flop;\n        const temp = flop;\n        flop = flip, flip = temp, renderer.shader.bind(this), renderer.geometry.draw(5);\n      }\n      this.state.blend = !0, filterManager.applyFilter(this, flop, output, clearMode), filterManager.returnFilterTexture(renderTarget);\n    }\n  }\n  /**\n   * Sets the strength of both the blur.\n   * @default 16\n   */\n  get blur() {\n    return this.strength;\n  }\n  set blur(value) {\n    this.padding = 1 + Math.abs(value) * 2, this.strength = value;\n  }\n  /**\n   * Sets the quality of the blur by modifying the number of passes. More passes means higher\n   * quality bluring but the lower the performance.\n   * @default 4\n   */\n  get quality() {\n    return this._quality;\n  }\n  set quality(value) {\n    this._quality = value, this.passes = value;\n  }\n}\nexport {\n  BlurFilterPass\n};\n//# sourceMappingURL=BlurFilterPass.mjs.map\n"],"names":["BlurFilterPass","Filter","horizontal","strength","quality","resolution","kernelSize","vertSrc","generateBlurVertSource","fragSrc","generateBlurFragSource","filterManager","input","output","clearMode","renderTarget","renderer","flip","flop","CLEAR_MODES","i","temp","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,WAAuBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlC,YAAYC,GAAYC,IAAW,GAAGC,IAAU,GAAGC,IAAaJ,EAAO,mBAAmBK,IAAa,GAAG;AACxG,UAAMC,IAAUC,EAAuBF,GAAYJ,CAAU,GAAGO,IAAUC,EAAuBJ,CAAU;AAC3G;AAAA;AAAA,MAEEC;AAAA;AAAA,MAEAE;AAAA,IACN,GAAO,KAAK,aAAaP,GAAY,KAAK,aAAaG,GAAY,KAAK,WAAW,GAAG,KAAK,UAAUD,GAAS,KAAK,OAAOD;AAAA,EACvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAMQ,GAAeC,GAAOC,GAAQC,GAAW;AAC7C,QAAID,IAAS,KAAK,aAAa,KAAK,SAAS,WAAW,IAAIA,EAAO,SAASA,EAAO,QAAQD,EAAM,SAAS,KAAK,SAAS,WAAW,IAAIC,EAAO,UAAUA,EAAO,SAASD,EAAM,UAAU,KAAK,aAAa,KAAK,SAAS,WAAW,IAAID,EAAc,SAAS,SAASA,EAAc,SAAS,QAAQC,EAAM,SAAS,KAAK,SAAS,WAAW,IAAID,EAAc,SAAS,UAAUA,EAAc,SAAS,SAASC,EAAM,SAAS,KAAK,SAAS,YAAY,KAAK,UAAU,KAAK,SAAS,YAAY,KAAK,QAAQ,KAAK,WAAW;AAChgB,MAAAD,EAAc,YAAY,MAAMC,GAAOC,GAAQC,CAAS;AAAA,SACrD;AACH,YAAMC,IAAeJ,EAAc,iBAAkB,GAAEK,IAAWL,EAAc;AAChF,UAAIM,IAAOL,GAAOM,IAAOH;AACzB,WAAK,MAAM,QAAQ,IAAIJ,EAAc,YAAY,MAAMM,GAAMC,GAAMC,EAAY,KAAK;AACpF,eAASC,IAAI,GAAGA,IAAI,KAAK,SAAS,GAAGA,KAAK;AACxC,QAAAT,EAAc,aAAaM,GAAME,EAAY,IAAI,GAAG,KAAK,SAAS,WAAWD;AAC7E,cAAMG,IAAOH;AACb,QAAAA,IAAOD,GAAMA,IAAOI,GAAML,EAAS,OAAO,KAAK,IAAI,GAAGA,EAAS,SAAS,KAAK,CAAC;AAAA,MAC/E;AACD,WAAK,MAAM,QAAQ,IAAIL,EAAc,YAAY,MAAMO,GAAML,GAAQC,CAAS,GAAGH,EAAc,oBAAoBI,CAAY;AAAA,IAChI;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,KAAKO,GAAO;AACd,SAAK,UAAU,IAAI,KAAK,IAAIA,CAAK,IAAI,GAAG,KAAK,WAAWA;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,QAAQA,GAAO;AACjB,SAAK,WAAWA,GAAO,KAAK,SAASA;AAAA,EACtC;AACH;","x_google_ignoreList":[0]}