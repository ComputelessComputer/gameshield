{"version":3,"file":"index508.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildCircle.mjs"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildCircle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"circle\"\n  },\n  build(shape, points) {\n    let x;\n    let y;\n    let dx;\n    let dy;\n    let rx;\n    let ry;\n    if (shape.type === \"circle\") {\n      const circle = shape;\n      x = circle.x;\n      y = circle.y;\n      rx = ry = circle.radius;\n      dx = dy = 0;\n    } else if (shape.type === \"ellipse\") {\n      const ellipse = shape;\n      x = ellipse.x;\n      y = ellipse.y;\n      rx = ellipse.halfWidth;\n      ry = ellipse.halfHeight;\n      dx = dy = 0;\n    } else {\n      const roundedRect = shape;\n      const halfWidth = roundedRect.width / 2;\n      const halfHeight = roundedRect.height / 2;\n      x = roundedRect.x + halfWidth;\n      y = roundedRect.y + halfHeight;\n      rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n      dx = halfWidth - rx;\n      dy = halfHeight - ry;\n    }\n    if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0)) {\n      return points;\n    }\n    const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n    const m = n * 8 + (dx ? 4 : 0) + (dy ? 4 : 0);\n    if (m === 0) {\n      return points;\n    }\n    if (n === 0) {\n      points[0] = points[6] = x + dx;\n      points[1] = points[3] = y + dy;\n      points[2] = points[4] = x - dx;\n      points[5] = points[7] = y - dy;\n      return points;\n    }\n    let j1 = 0;\n    let j2 = n * 4 + (dx ? 2 : 0) + 2;\n    let j3 = j2;\n    let j4 = m;\n    let x0 = dx + rx;\n    let y0 = dy;\n    let x1 = x + x0;\n    let x2 = x - x0;\n    let y1 = y + y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j2] = y1;\n    points[--j2] = x2;\n    if (dy) {\n      const y22 = y - y0;\n      points[j3++] = x2;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x1;\n    }\n    for (let i = 1; i < n; i++) {\n      const a = Math.PI / 2 * (i / n);\n      const x02 = dx + Math.cos(a) * rx;\n      const y02 = dy + Math.sin(a) * ry;\n      const x12 = x + x02;\n      const x22 = x - x02;\n      const y12 = y + y02;\n      const y22 = y - y02;\n      points[j1++] = x12;\n      points[j1++] = y12;\n      points[--j2] = y12;\n      points[--j2] = x22;\n      points[j3++] = x22;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x12;\n    }\n    x0 = dx;\n    y0 = dy + ry;\n    x1 = x + x0;\n    x2 = x - x0;\n    y1 = y + y0;\n    const y2 = y - y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j4] = y2;\n    points[--j4] = x1;\n    if (dx) {\n      points[j1++] = x2;\n      points[j1++] = y1;\n      points[--j4] = y2;\n      points[--j4] = x2;\n    }\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    if (points.length === 0) {\n      return;\n    }\n    let centerX = 0;\n    let centerY = 0;\n    for (let i = 0; i < points.length; i += 2) {\n      centerX += points[i];\n      centerY += points[i + 1];\n    }\n    centerX /= points.length / 2;\n    centerY /= points.length / 2;\n    let count = verticesOffset;\n    vertices[count * verticesStride] = centerX;\n    vertices[count * verticesStride + 1] = centerY;\n    const centerIndex = count++;\n    for (let i = 0; i < points.length; i += 2) {\n      vertices[count * verticesStride] = points[i];\n      vertices[count * verticesStride + 1] = points[i + 1];\n      if (i > 0) {\n        indices[indicesOffset++] = count;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n      }\n      count++;\n    }\n    indices[indicesOffset++] = centerIndex + 1;\n    indices[indicesOffset++] = centerIndex;\n    indices[indicesOffset++] = count - 1;\n  }\n};\nconst buildEllipse = { ...buildCircle, extension: { ...buildCircle.extension, name: \"ellipse\" } };\nconst buildRoundedRectangle = { ...buildCircle, extension: { ...buildCircle.extension, name: \"roundedRectangle\" } };\n\nexport { buildCircle, buildEllipse, buildRoundedRectangle };\n//# sourceMappingURL=buildCircle.mjs.map\n"],"names":["buildCircle","ExtensionType","shape","points","y","dx","dy","rx","ry","circle","ellipse","roundedRect","halfWidth","halfHeight","n","m","j1","j2","j3","j4","x0","y0","x1","x2","y1","y22","i","a","x02","y02","x12","x22","y12","y2","vertices","verticesStride","verticesOffset","indices","indicesOffset","centerX","centerY","count","centerIndex","buildEllipse","buildRoundedRectangle"],"mappings":";AAGK,MAACA,IAAc;AAAA,EAClB,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,MAAM;AAAA,EACP;AAAA,EACD,MAAMC,GAAOC,GAAQ;AACnB,QAAI,GACAC,GACAC,GACAC,GACAC,GACAC;AACJ,QAAIN,EAAM,SAAS,UAAU;AAC3B,YAAMO,IAASP;AACf,UAAIO,EAAO,GACXL,IAAIK,EAAO,GACXF,IAAKC,IAAKC,EAAO,QACjBJ,IAAKC,IAAK;AAAA,IAChB,WAAeJ,EAAM,SAAS,WAAW;AACnC,YAAMQ,IAAUR;AAChB,UAAIQ,EAAQ,GACZN,IAAIM,EAAQ,GACZH,IAAKG,EAAQ,WACbF,IAAKE,EAAQ,YACbL,IAAKC,IAAK;AAAA,IAChB,OAAW;AACL,YAAMK,IAAcT,GACdU,IAAYD,EAAY,QAAQ,GAChCE,IAAaF,EAAY,SAAS;AACxC,UAAIA,EAAY,IAAIC,GACpBR,IAAIO,EAAY,IAAIE,GACpBN,IAAKC,IAAK,KAAK,IAAI,GAAG,KAAK,IAAIG,EAAY,QAAQ,KAAK,IAAIC,GAAWC,CAAU,CAAC,CAAC,GACnFR,IAAKO,IAAYL,GACjBD,IAAKO,IAAaL;AAAA,IACnB;AACD,QAAI,EAAED,KAAM,KAAKC,KAAM,KAAKH,KAAM,KAAKC,KAAM;AAC3C,aAAOH;AAET,UAAMW,IAAI,KAAK,KAAK,MAAM,KAAK,KAAKP,IAAKC,CAAE,CAAC,GACtCO,IAAID,IAAI,KAAKT,IAAK,IAAI,MAAMC,IAAK,IAAI;AAC3C,QAAIS,MAAM;AACR,aAAOZ;AAET,QAAIW,MAAM;AACR,aAAAX,EAAO,CAAC,IAAIA,EAAO,CAAC,IAAI,IAAIE,GAC5BF,EAAO,CAAC,IAAIA,EAAO,CAAC,IAAIC,IAAIE,GAC5BH,EAAO,CAAC,IAAIA,EAAO,CAAC,IAAI,IAAIE,GAC5BF,EAAO,CAAC,IAAIA,EAAO,CAAC,IAAIC,IAAIE,GACrBH;AAET,QAAIa,IAAK,GACLC,IAAKH,IAAI,KAAKT,IAAK,IAAI,KAAK,GAC5Ba,IAAKD,GACLE,IAAKJ,GACLK,IAAKf,IAAKE,GACVc,IAAKf,GACLgB,IAAK,IAAIF,GACTG,IAAK,IAAIH,GACTI,IAAKpB,IAAIiB;AAKb,QAJAlB,EAAOa,GAAI,IAAIM,GACfnB,EAAOa,GAAI,IAAIQ,GACfrB,EAAO,EAAEc,CAAE,IAAIO,GACfrB,EAAO,EAAEc,CAAE,IAAIM,GACXjB,GAAI;AACN,YAAMmB,IAAMrB,IAAIiB;AAChB,MAAAlB,EAAOe,GAAI,IAAIK,GACfpB,EAAOe,GAAI,IAAIO,GACftB,EAAO,EAAEgB,CAAE,IAAIM,GACftB,EAAO,EAAEgB,CAAE,IAAIG;AAAA,IAChB;AACD,aAASI,IAAI,GAAGA,IAAIZ,GAAGY,KAAK;AAC1B,YAAMC,IAAI,KAAK,KAAK,KAAKD,IAAIZ,IACvBc,IAAMvB,IAAK,KAAK,IAAIsB,CAAC,IAAIpB,GACzBsB,IAAMvB,IAAK,KAAK,IAAIqB,CAAC,IAAInB,GACzBsB,IAAM,IAAIF,GACVG,IAAM,IAAIH,GACVI,IAAM5B,IAAIyB,GACVJ,IAAMrB,IAAIyB;AAChB,MAAA1B,EAAOa,GAAI,IAAIc,GACf3B,EAAOa,GAAI,IAAIgB,GACf7B,EAAO,EAAEc,CAAE,IAAIe,GACf7B,EAAO,EAAEc,CAAE,IAAIc,GACf5B,EAAOe,GAAI,IAAIa,GACf5B,EAAOe,GAAI,IAAIO,GACftB,EAAO,EAAEgB,CAAE,IAAIM,GACftB,EAAO,EAAEgB,CAAE,IAAIW;AAAA,IAChB;AACD,IAAAV,IAAKf,GACLgB,IAAKf,IAAKE,GACVc,IAAK,IAAIF,GACTG,IAAK,IAAIH,GACTI,IAAKpB,IAAIiB;AACT,UAAMY,IAAK7B,IAAIiB;AACf,WAAAlB,EAAOa,GAAI,IAAIM,GACfnB,EAAOa,GAAI,IAAIQ,GACfrB,EAAO,EAAEgB,CAAE,IAAIc,GACf9B,EAAO,EAAEgB,CAAE,IAAIG,GACXjB,MACFF,EAAOa,GAAI,IAAIO,GACfpB,EAAOa,GAAI,IAAIQ,GACfrB,EAAO,EAAEgB,CAAE,IAAIc,GACf9B,EAAO,EAAEgB,CAAE,IAAII,IAEVpB;AAAA,EACR;AAAA,EACD,YAAYA,GAAQ+B,GAAUC,GAAgBC,GAAgBC,GAASC,GAAe;AACpF,QAAInC,EAAO,WAAW;AACpB;AAEF,QAAIoC,IAAU,GACVC,IAAU;AACd,aAASd,IAAI,GAAGA,IAAIvB,EAAO,QAAQuB,KAAK;AACtC,MAAAa,KAAWpC,EAAOuB,CAAC,GACnBc,KAAWrC,EAAOuB,IAAI,CAAC;AAEzB,IAAAa,KAAWpC,EAAO,SAAS,GAC3BqC,KAAWrC,EAAO,SAAS;AAC3B,QAAIsC,IAAQL;AACZ,IAAAF,EAASO,IAAQN,CAAc,IAAII,GACnCL,EAASO,IAAQN,IAAiB,CAAC,IAAIK;AACvC,UAAME,IAAcD;AACpB,aAASf,IAAI,GAAGA,IAAIvB,EAAO,QAAQuB,KAAK;AACtC,MAAAQ,EAASO,IAAQN,CAAc,IAAIhC,EAAOuB,CAAC,GAC3CQ,EAASO,IAAQN,IAAiB,CAAC,IAAIhC,EAAOuB,IAAI,CAAC,GAC/CA,IAAI,MACNW,EAAQC,GAAe,IAAIG,GAC3BJ,EAAQC,GAAe,IAAII,GAC3BL,EAAQC,GAAe,IAAIG,IAAQ,IAErCA;AAEF,IAAAJ,EAAQC,GAAe,IAAII,IAAc,GACzCL,EAAQC,GAAe,IAAII,GAC3BL,EAAQC,GAAe,IAAIG,IAAQ;AAAA,EACpC;AACH,GACME,IAAe,EAAE,GAAG3C,GAAa,WAAW,EAAE,GAAGA,EAAY,WAAW,MAAM,YAAc,GAC5F4C,IAAwB,EAAE,GAAG5C,GAAa,WAAW,EAAE,GAAGA,EAAY,WAAW,MAAM,mBAAoB,EAAA;","x_google_ignoreList":[0]}