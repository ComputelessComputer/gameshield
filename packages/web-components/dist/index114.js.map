{"version":3,"file":"index114.js","sources":["../../../node_modules/.pnpm/@pixi+particle-container@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3__@_eef2d817d895d9ecb1c87724edb8eaf6/node_modules/@pixi/particle-container/lib/ParticleRenderer.mjs"],"sourcesContent":["import { ObjectRenderer, Matrix, TYPES, Shader, State, utils, Color, ExtensionType, extensions } from \"@pixi/core\";\nimport { ParticleBuffer } from \"./ParticleBuffer.mjs\";\nimport fragment from \"./particles.frag.mjs\";\nimport vertex from \"./particles.vert.mjs\";\nclass ParticleRenderer extends ObjectRenderer {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   */\n  constructor(renderer) {\n    super(renderer), this.shader = null, this.properties = null, this.tempMatrix = new Matrix(), this.properties = [\n      // verticesData\n      {\n        attributeName: \"aVertexPosition\",\n        size: 2,\n        uploadFunction: this.uploadVertices,\n        offset: 0\n      },\n      // positionData\n      {\n        attributeName: \"aPositionCoord\",\n        size: 2,\n        uploadFunction: this.uploadPosition,\n        offset: 0\n      },\n      // rotationData\n      {\n        attributeName: \"aRotation\",\n        size: 1,\n        uploadFunction: this.uploadRotation,\n        offset: 0\n      },\n      // uvsData\n      {\n        attributeName: \"aTextureCoord\",\n        size: 2,\n        uploadFunction: this.uploadUvs,\n        offset: 0\n      },\n      // tintData\n      {\n        attributeName: \"aColor\",\n        size: 1,\n        type: TYPES.UNSIGNED_BYTE,\n        uploadFunction: this.uploadTint,\n        offset: 0\n      }\n    ], this.shader = Shader.from(vertex, fragment, {}), this.state = State.for2d();\n  }\n  /**\n   * Renders the particle container object.\n   * @param container - The container to render using this ParticleRenderer.\n   */\n  render(container) {\n    const children = container.children, maxSize = container._maxSize, batchSize = container._batchSize, renderer = this.renderer;\n    let totalChildren = children.length;\n    if (totalChildren === 0)\n      return;\n    totalChildren > maxSize && !container.autoResize && (totalChildren = maxSize);\n    let buffers = container._buffers;\n    buffers || (buffers = container._buffers = this.generateBuffers(container));\n    const baseTexture = children[0]._texture.baseTexture, premultiplied = baseTexture.alphaMode > 0;\n    this.state.blendMode = utils.correctBlendMode(container.blendMode, premultiplied), renderer.state.set(this.state);\n    const gl = renderer.gl, m = container.worldTransform.copyTo(this.tempMatrix);\n    m.prepend(renderer.globalUniforms.uniforms.projectionMatrix), this.shader.uniforms.translationMatrix = m.toArray(!0), this.shader.uniforms.uColor = Color.shared.setValue(container.tintRgb).premultiply(container.worldAlpha, premultiplied).toArray(this.shader.uniforms.uColor), this.shader.uniforms.uSampler = baseTexture, this.renderer.shader.bind(this.shader);\n    let updateStatic = !1;\n    for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {\n      let amount = totalChildren - i;\n      amount > batchSize && (amount = batchSize), j >= buffers.length && buffers.push(this._generateOneMoreBuffer(container));\n      const buffer = buffers[j];\n      buffer.uploadDynamic(children, i, amount);\n      const bid = container._bufferUpdateIDs[j] || 0;\n      updateStatic = updateStatic || buffer._updateID < bid, updateStatic && (buffer._updateID = container._updateID, buffer.uploadStatic(children, i, amount)), renderer.geometry.bind(buffer.geometry), gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n    }\n  }\n  /**\n   * Creates one particle buffer for each child in the container we want to render and updates internal properties.\n   * @param container - The container to render using this ParticleRenderer\n   * @returns - The buffers\n   */\n  generateBuffers(container) {\n    const buffers = [], size = container._maxSize, batchSize = container._batchSize, dynamicPropertyFlags = container._properties;\n    for (let i = 0; i < size; i += batchSize)\n      buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n    return buffers;\n  }\n  /**\n   * Creates one more particle buffer, because container has autoResize feature.\n   * @param container - The container to render using this ParticleRenderer\n   * @returns - The generated buffer\n   */\n  _generateOneMoreBuffer(container) {\n    const batchSize = container._batchSize, dynamicPropertyFlags = container._properties;\n    return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n  }\n  /**\n   * Uploads the vertices.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their vertices uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadVertices(children, startIndex, amount, array, stride, offset) {\n    let w0 = 0, w1 = 0, h0 = 0, h1 = 0;\n    for (let i = 0; i < amount; ++i) {\n      const sprite = children[startIndex + i], texture = sprite._texture, sx = sprite.scale.x, sy = sprite.scale.y, trim = texture.trim, orig = texture.orig;\n      trim ? (w1 = trim.x - sprite.anchor.x * orig.width, w0 = w1 + trim.width, h1 = trim.y - sprite.anchor.y * orig.height, h0 = h1 + trim.height) : (w0 = orig.width * (1 - sprite.anchor.x), w1 = orig.width * -sprite.anchor.x, h0 = orig.height * (1 - sprite.anchor.y), h1 = orig.height * -sprite.anchor.y), array[offset] = w1 * sx, array[offset + 1] = h1 * sy, array[offset + stride] = w0 * sx, array[offset + stride + 1] = h1 * sy, array[offset + stride * 2] = w0 * sx, array[offset + stride * 2 + 1] = h0 * sy, array[offset + stride * 3] = w1 * sx, array[offset + stride * 3 + 1] = h0 * sy, offset += stride * 4;\n    }\n  }\n  /**\n   * Uploads the position.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their positions uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadPosition(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; i++) {\n      const spritePosition = children[startIndex + i].position;\n      array[offset] = spritePosition.x, array[offset + 1] = spritePosition.y, array[offset + stride] = spritePosition.x, array[offset + stride + 1] = spritePosition.y, array[offset + stride * 2] = spritePosition.x, array[offset + stride * 2 + 1] = spritePosition.y, array[offset + stride * 3] = spritePosition.x, array[offset + stride * 3 + 1] = spritePosition.y, offset += stride * 4;\n    }\n  }\n  /**\n   * Uploads the rotation.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadRotation(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; i++) {\n      const spriteRotation = children[startIndex + i].rotation;\n      array[offset] = spriteRotation, array[offset + stride] = spriteRotation, array[offset + stride * 2] = spriteRotation, array[offset + stride * 3] = spriteRotation, offset += stride * 4;\n    }\n  }\n  /**\n   * Uploads the UVs.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadUvs(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; ++i) {\n      const textureUvs = children[startIndex + i]._texture._uvs;\n      textureUvs ? (array[offset] = textureUvs.x0, array[offset + 1] = textureUvs.y0, array[offset + stride] = textureUvs.x1, array[offset + stride + 1] = textureUvs.y1, array[offset + stride * 2] = textureUvs.x2, array[offset + stride * 2 + 1] = textureUvs.y2, array[offset + stride * 3] = textureUvs.x3, array[offset + stride * 3 + 1] = textureUvs.y3, offset += stride * 4) : (array[offset] = 0, array[offset + 1] = 0, array[offset + stride] = 0, array[offset + stride + 1] = 0, array[offset + stride * 2] = 0, array[offset + stride * 2 + 1] = 0, array[offset + stride * 3] = 0, array[offset + stride * 3 + 1] = 0, offset += stride * 4);\n    }\n  }\n  /**\n   * Uploads the tint.\n   * @param children - the array of sprites to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n  uploadTint(children, startIndex, amount, array, stride, offset) {\n    for (let i = 0; i < amount; ++i) {\n      const sprite = children[startIndex + i], result = Color.shared.setValue(sprite._tintRGB).toPremultiplied(sprite.alpha, sprite.texture.baseTexture.alphaMode > 0);\n      array[offset] = result, array[offset + stride] = result, array[offset + stride * 2] = result, array[offset + stride * 3] = result, offset += stride * 4;\n    }\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    super.destroy(), this.shader && (this.shader.destroy(), this.shader = null), this.tempMatrix = null;\n  }\n}\nParticleRenderer.extension = {\n  name: \"particle\",\n  type: ExtensionType.RendererPlugin\n};\nextensions.add(ParticleRenderer);\nexport {\n  ParticleRenderer\n};\n//# sourceMappingURL=ParticleRenderer.mjs.map\n"],"names":["ParticleRenderer","ObjectRenderer","renderer","Matrix","TYPES","Shader","vertex","fragment","State","container","children","maxSize","batchSize","totalChildren","buffers","baseTexture","premultiplied","utils.correctBlendMode","gl","m","Color","updateStatic","i","j","amount","buffer","bid","size","dynamicPropertyFlags","ParticleBuffer","startIndex","array","stride","offset","w0","w1","h0","h1","sprite","texture","sx","sy","trim","orig","spritePosition","spriteRotation","textureUvs","result","ExtensionType","extensions"],"mappings":"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","x_google_ignoreList":[0]}