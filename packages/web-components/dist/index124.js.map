{"version":3,"file":"index124.js","sources":["../../../node_modules/.pnpm/@pixi+text-html@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3__@pixi+spri_e9b7c0d77278afb72d362574a9013bd1/node_modules/@pixi/text-html/lib/HTMLText.mjs"],"sourcesContent":["import { Texture, settings, Rectangle, utils } from \"@pixi/core\";\nimport { Sprite } from \"@pixi/sprite\";\nimport { TextStyle } from \"@pixi/text\";\nimport { HTMLTextStyle } from \"./HTMLTextStyle.mjs\";\nconst _HTMLText = class _HTMLText2 extends Sprite {\n  /**\n   * @param {string} [text] - Text contents\n   * @param {PIXI.HTMLTextStyle|PIXI.TextStyle|PIXI.ITextStyle} [style] - Style setting to use.\n   *        Strongly recommend using an HTMLTextStyle object. Providing a PIXI.TextStyle\n   *        will convert the TextStyle to an HTMLTextStyle and will no longer be linked.\n   */\n  constructor(text = \"\", style = {}) {\n    super(Texture.EMPTY), this._text = null, this._style = null, this._autoResolution = !0, this.localStyleID = -1, this.dirty = !1, this._updateID = 0, this.ownsStyle = !1;\n    const image = new Image(), texture = Texture.from(image, {\n      scaleMode: settings.SCALE_MODE,\n      resourceOptions: {\n        autoLoad: !1\n      }\n    });\n    texture.orig = new Rectangle(), texture.trim = new Rectangle(), this.texture = texture;\n    const nssvg = \"http://www.w3.org/2000/svg\", nsxhtml = \"http://www.w3.org/1999/xhtml\", svgRoot = document.createElementNS(nssvg, \"svg\"), foreignObject = document.createElementNS(nssvg, \"foreignObject\"), domElement = document.createElementNS(nsxhtml, \"div\"), styleElement = document.createElementNS(nsxhtml, \"style\");\n    foreignObject.setAttribute(\"width\", \"10000\"), foreignObject.setAttribute(\"height\", \"10000\"), foreignObject.style.overflow = \"hidden\", svgRoot.appendChild(foreignObject), this.maxWidth = _HTMLText2.defaultMaxWidth, this.maxHeight = _HTMLText2.defaultMaxHeight, this._domElement = domElement, this._styleElement = styleElement, this._svgRoot = svgRoot, this._foreignObject = foreignObject, this._foreignObject.appendChild(styleElement), this._foreignObject.appendChild(domElement), this._image = image, this._loadImage = new Image(), this._autoResolution = _HTMLText2.defaultAutoResolution, this._resolution = _HTMLText2.defaultResolution ?? settings.RESOLUTION, this.text = text, this.style = style;\n  }\n  /**\n   * Calculate the size of the output text without actually drawing it.\n   * This includes the `padding` in the `style` object.\n   * This can be used as a fast-pass to do things like text-fitting.\n   * @param {object} [overrides] - Overrides for the text, style, and resolution.\n   * @param {string} [overrides.text] - The text to measure, if not specified, the current text is used.\n   * @param {PIXI.HTMLTextStyle} [overrides.style] - The style to measure, if not specified, the current style is used.\n   * @param {number} [overrides.resolution] - The resolution to measure, if not specified, the current resolution is used.\n   * @returns {PIXI.ISize} Width and height of the measured text.\n   */\n  measureText(overrides) {\n    const { text, style, resolution } = Object.assign({\n      text: this._text,\n      style: this._style,\n      resolution: this._resolution\n    }, overrides);\n    Object.assign(this._domElement, {\n      innerHTML: text,\n      style: style.toCSS(resolution)\n    }), this._styleElement.textContent = style.toGlobalCSS(), document.body.appendChild(this._svgRoot);\n    const contentBounds = this._domElement.getBoundingClientRect();\n    this._svgRoot.remove();\n    const { width, height } = contentBounds;\n    (width > this.maxWidth || height > this.maxHeight) && console.warn(\"[HTMLText] Large expanse of text, increase HTMLText.maxWidth or HTMLText.maxHeight property.\");\n    const contentWidth = Math.min(this.maxWidth, Math.ceil(width)), contentHeight = Math.min(this.maxHeight, Math.ceil(height));\n    return this._svgRoot.setAttribute(\"width\", contentWidth.toString()), this._svgRoot.setAttribute(\"height\", contentHeight.toString()), text !== this._text && (this._domElement.innerHTML = this._text), style !== this._style && (Object.assign(this._domElement, { style: this._style?.toCSS(resolution) }), this._styleElement.textContent = this._style?.toGlobalCSS()), {\n      width: contentWidth + style.padding * 2,\n      height: contentHeight + style.padding * 2\n    };\n  }\n  /**\n   * Manually refresh the text.\n   * @public\n   * @param {boolean} respectDirty - Whether to abort updating the\n   *        text if the Text isn't dirty and the function is called.\n   */\n  async updateText(respectDirty = !0) {\n    const { style, _image: image, _loadImage: loadImage } = this;\n    if (this.localStyleID !== style.styleID && (this.dirty = !0, this.localStyleID = style.styleID), !this.dirty && respectDirty)\n      return;\n    const { width, height } = this.measureText();\n    image.width = loadImage.width = Math.ceil(Math.max(1, width)), image.height = loadImage.height = Math.ceil(Math.max(1, height)), this._updateID++;\n    const updateID = this._updateID;\n    await new Promise((resolve) => {\n      loadImage.onload = async () => {\n        if (updateID < this._updateID) {\n          resolve();\n          return;\n        }\n        await style.onBeforeDraw(), image.src = loadImage.src, loadImage.onload = null, loadImage.src = \"\", this.updateTexture(), resolve();\n      };\n      const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n      loadImage.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n    });\n  }\n  /** The raw image element that is rendered under-the-hood. */\n  get source() {\n    return this._image;\n  }\n  /**\n   * Update the texture resource.\n   * @private\n   */\n  updateTexture() {\n    const { style, texture, _image: image, resolution } = this, { padding } = style, { baseTexture } = texture;\n    texture.trim.width = texture._frame.width = image.width / resolution, texture.trim.height = texture._frame.height = image.height / resolution, texture.trim.x = -padding, texture.trim.y = -padding, texture.orig.width = texture._frame.width - padding * 2, texture.orig.height = texture._frame.height - padding * 2, this._onTextureUpdate(), baseTexture.setRealSize(image.width, image.height, resolution), this.dirty = !1;\n  }\n  /**\n   * Renders the object using the WebGL renderer\n   * @param {PIXI.Renderer} renderer - The renderer\n   * @private\n   */\n  _render(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0), this.updateText(!0), super._render(renderer);\n  }\n  /**\n   * Renders the object using the Canvas Renderer.\n   * @private\n   * @param {PIXI.CanvasRenderer} renderer - The renderer\n   */\n  _renderCanvas(renderer) {\n    this._autoResolution && this._resolution !== renderer.resolution && (this._resolution = renderer.resolution, this.dirty = !0), this.updateText(!0), super._renderCanvas(renderer);\n  }\n  /**\n   * Get the local bounds.\n   * @param {PIXI.Rectangle} rect - Input rectangle.\n   * @returns {PIXI.Rectangle} Local bounds\n   */\n  getLocalBounds(rect) {\n    return this.updateText(!0), super.getLocalBounds(rect);\n  }\n  _calculateBounds() {\n    this.updateText(!0), this.calculateVertices(), this._bounds.addQuad(this.vertexData);\n  }\n  /**\n   * Handle dirty style changes\n   * @private\n   */\n  _onStyleChange() {\n    this.dirty = !0;\n  }\n  /**\n   * Destroy this Text object. Don't use after calling.\n   * @param {boolean|object} options - Same as Sprite destroy options.\n   */\n  destroy(options) {\n    typeof options == \"boolean\" && (options = { children: options }), options = Object.assign({}, _HTMLText2.defaultDestroyOptions, options), super.destroy(options);\n    const forceClear = null;\n    this.ownsStyle && this._style?.cleanFonts(), this._style = forceClear, this._svgRoot?.remove(), this._svgRoot = forceClear, this._domElement?.remove(), this._domElement = forceClear, this._foreignObject?.remove(), this._foreignObject = forceClear, this._styleElement?.remove(), this._styleElement = forceClear, this._loadImage.src = \"\", this._loadImage.onload = null, this._loadImage = forceClear, this._image.src = \"\", this._image = forceClear;\n  }\n  /**\n   * Get the width in pixels.\n   * @member {number}\n   */\n  get width() {\n    return this.updateText(!0), Math.abs(this.scale.x) * this._image.width / this.resolution;\n  }\n  set width(value) {\n    this.updateText(!0);\n    const s = utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._image.width / this.resolution, this._width = value;\n  }\n  /**\n   * Get the height in pixels.\n   * @member {number}\n   */\n  get height() {\n    return this.updateText(!0), Math.abs(this.scale.y) * this._image.height / this.resolution;\n  }\n  set height(value) {\n    this.updateText(!0);\n    const s = utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._image.height / this.resolution, this._height = value;\n  }\n  /** The base style to render with text. */\n  get style() {\n    return this._style;\n  }\n  set style(style) {\n    this._style !== style && (style = style || {}, style instanceof HTMLTextStyle ? (this.ownsStyle = !1, this._style = style) : style instanceof TextStyle ? (console.warn(\"[HTMLText] Cloning TextStyle, if this is not what you want, use HTMLTextStyle\"), this.ownsStyle = !0, this._style = HTMLTextStyle.from(style)) : (this.ownsStyle = !0, this._style = new HTMLTextStyle(style)), this.localStyleID = -1, this.dirty = !0);\n  }\n  /**\n   * Contents of text. This can be HTML text and include tags.\n   * @example\n   * const text = new HTMLText('This is a <em>styled</em> text!');\n   * @member {string}\n   */\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text === \"\" || text === null || text === void 0 ? \" \" : text), text = this.sanitiseText(text), this._text !== text && (this._text = text, this.dirty = !0);\n  }\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n   * @member {number}\n   * @default 1\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = !1, this._resolution !== value && (this._resolution = value, this.dirty = !0);\n  }\n  /**\n   * Sanitise text - replace `<br>` with `<br/>`, `&nbsp;` with `&#160;`\n   * @param text\n   * @see https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n   */\n  sanitiseText(text) {\n    return text.replace(/<br>/gi, \"<br/>\").replace(/<hr>/gi, \"<hr/>\").replace(/&nbsp;/gi, \"&#160;\");\n  }\n};\n_HTMLText.defaultDestroyOptions = {\n  texture: !0,\n  children: !1,\n  baseTexture: !0\n}, /** Default maxWidth, set at construction */\n_HTMLText.defaultMaxWidth = 2024, /** Default maxHeight, set at construction */\n_HTMLText.defaultMaxHeight = 2024, /** Default autoResolution for all HTMLText objects */\n_HTMLText.defaultAutoResolution = !0;\nlet HTMLText = _HTMLText;\nexport {\n  HTMLText\n};\n//# sourceMappingURL=HTMLText.mjs.map\n"],"names":["_HTMLText","_HTMLText2","Sprite","text","style","Texture","image","texture","settings","Rectangle","nssvg","nsxhtml","svgRoot","foreignObject","domElement","styleElement","overrides","resolution","contentBounds","width","height","contentWidth","contentHeight","_a","_b","respectDirty","loadImage","updateID","resolve","svgURL","padding","baseTexture","renderer","rect","options","forceClear","_c","_d","_e","value","s","utils.sign","HTMLTextStyle","TextStyle"],"mappings":"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","x_google_ignoreList":[0]}