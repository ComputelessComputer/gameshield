{"version":3,"file":"index597.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/ticker/TickerListener.mjs"],"sourcesContent":["\"use strict\";\nclass TickerListener {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  constructor(fn, context = null, priority = 0, once = false) {\n    /** The next item in chain. */\n    this.next = null;\n    /** The previous item in chain. */\n    this.previous = null;\n    /** `true` if this listener has been destroyed already. */\n    this._destroyed = false;\n    this._fn = fn;\n    this._context = context;\n    this.priority = priority;\n    this._once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @returns `true` if the listener match the arguments\n   */\n  match(fn, context = null) {\n    return this._fn === fn && this._context === context;\n  }\n  /**\n   * Emit by calling the current function.\n   * @param ticker - The ticker emitting.\n   * @returns Next ticker\n   */\n  emit(ticker) {\n    if (this._fn) {\n      if (this._context) {\n        this._fn.call(this._context, ticker);\n      } else {\n        this._fn(ticker);\n      }\n    }\n    const redirect = this.next;\n    if (this._once) {\n      this.destroy(true);\n    }\n    if (this._destroyed) {\n      this.next = null;\n    }\n    return redirect;\n  }\n  /**\n   * Connect to the list.\n   * @param previous - Input node, previous listener\n   */\n  connect(previous) {\n    this.previous = previous;\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n    this.next = previous.next;\n    previous.next = this;\n  }\n  /**\n   * Destroy and don't use after this.\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @returns The listener to redirect while emitting or removing.\n   */\n  destroy(hard = false) {\n    this._destroyed = true;\n    this._fn = null;\n    this._context = null;\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n    if (this.next) {\n      this.next.previous = this.previous;\n    }\n    const redirect = this.next;\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  }\n}\n\nexport { TickerListener };\n//# sourceMappingURL=TickerListener.mjs.map\n"],"names":["TickerListener","fn","context","priority","once","ticker","redirect","previous","hard"],"mappings":"AACA,MAAMA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASnB,YAAYC,GAAIC,IAAU,MAAMC,IAAW,GAAGC,IAAO,IAAO;AAE1D,SAAK,OAAO,MAEZ,KAAK,WAAW,MAEhB,KAAK,aAAa,IAClB,KAAK,MAAMH,GACX,KAAK,WAAWC,GAChB,KAAK,WAAWC,GAChB,KAAK,QAAQC;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAMH,GAAIC,IAAU,MAAM;AACxB,WAAO,KAAK,QAAQD,KAAM,KAAK,aAAaC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,KAAKG,GAAQ;AACX,IAAI,KAAK,QACH,KAAK,WACP,KAAK,IAAI,KAAK,KAAK,UAAUA,CAAM,IAEnC,KAAK,IAAIA,CAAM;AAGnB,UAAMC,IAAW,KAAK;AACtB,WAAI,KAAK,SACP,KAAK,QAAQ,EAAI,GAEf,KAAK,eACP,KAAK,OAAO,OAEPA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQC,GAAU;AAChB,SAAK,WAAWA,GACZA,EAAS,SACXA,EAAS,KAAK,WAAW,OAE3B,KAAK,OAAOA,EAAS,MACrBA,EAAS,OAAO;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,QAAQC,IAAO,IAAO;AACpB,SAAK,aAAa,IAClB,KAAK,MAAM,MACX,KAAK,WAAW,MACZ,KAAK,aACP,KAAK,SAAS,OAAO,KAAK,OAExB,KAAK,SACP,KAAK,KAAK,WAAW,KAAK;AAE5B,UAAMF,IAAW,KAAK;AACtB,gBAAK,OAAOE,IAAO,OAAOF,GAC1B,KAAK,WAAW,MACTA;AAAA,EACR;AACH;","x_google_ignoreList":[0]}