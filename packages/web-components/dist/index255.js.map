{"version":3,"file":"index255.js","sources":["../../../node_modules/.pnpm/@pixi+mesh@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3_/node_modules/@pixi/mesh/lib/MeshMaterial.mjs"],"sourcesContent":["import { Shader, Matrix, Program, TextureMatrix, Color } from \"@pixi/core\";\nimport fragment from \"./shader/mesh.frag.mjs\";\nimport vertex from \"./shader/mesh.vert.mjs\";\nclass MeshMaterial extends Shader {\n  /**\n   * @param uSampler - Texture that material uses to render.\n   * @param options - Additional options\n   * @param {number} [options.alpha=1] - Default alpha.\n   * @param {PIXI.ColorSource} [options.tint=0xFFFFFF] - Default tint.\n   * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n   * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n   * @param {object} [options.uniforms] - Custom uniforms.\n   */\n  constructor(uSampler, options) {\n    const uniforms = {\n      uSampler,\n      alpha: 1,\n      uTextureMatrix: Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    options = Object.assign({\n      tint: 16777215,\n      alpha: 1,\n      pluginName: \"batch\"\n    }, options), options.uniforms && Object.assign(uniforms, options.uniforms), super(options.program || Program.from(vertex, fragment), uniforms), this._colorDirty = !1, this.uvMatrix = new TextureMatrix(uSampler), this.batchable = options.program === void 0, this.pluginName = options.pluginName, this._tintColor = new Color(options.tint), this._tintRGB = this._tintColor.toLittleEndianNumber(), this._colorDirty = !0, this.alpha = options.alpha;\n  }\n  /** Reference to the texture being rendered. */\n  get texture() {\n    return this.uniforms.uSampler;\n  }\n  set texture(value) {\n    this.uniforms.uSampler !== value && (!this.uniforms.uSampler.baseTexture.alphaMode != !value.baseTexture.alphaMode && (this._colorDirty = !0), this.uniforms.uSampler = value, this.uvMatrix.texture = value);\n  }\n  /**\n   * This gets automatically set by the object using this.\n   * @default 1\n   */\n  set alpha(value) {\n    value !== this._alpha && (this._alpha = value, this._colorDirty = !0);\n  }\n  get alpha() {\n    return this._alpha;\n  }\n  /**\n   * Multiply tint for the material.\n   * @default 0xFFFFFF\n   */\n  set tint(value) {\n    value !== this.tint && (this._tintColor.setValue(value), this._tintRGB = this._tintColor.toLittleEndianNumber(), this._colorDirty = !0);\n  }\n  get tint() {\n    return this._tintColor.value;\n  }\n  /**\n   * Get the internal number from tint color\n   * @ignore\n   */\n  get tintValue() {\n    return this._tintColor.toNumber();\n  }\n  /** Gets called automatically by the Mesh. Intended to be overridden for custom {@link PIXI.MeshMaterial} objects. */\n  update() {\n    if (this._colorDirty) {\n      this._colorDirty = !1;\n      const applyToChannels = this.texture.baseTexture.alphaMode;\n      Color.shared.setValue(this._tintColor).premultiply(this._alpha, applyToChannels).toArray(this.uniforms.uColor);\n    }\n    this.uvMatrix.update() && (this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord);\n  }\n}\nexport {\n  MeshMaterial\n};\n//# sourceMappingURL=MeshMaterial.mjs.map\n"],"names":["MeshMaterial","Shader","uSampler","options","uniforms","Matrix","Program","vertex","fragment","TextureMatrix","Color","value","applyToChannels"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,WAAqBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhC,YAAYC,GAAUC,GAAS;AAC7B,UAAMC,IAAW;AAAA,MACf,UAAAF;AAAA,MACA,OAAO;AAAA,MACP,gBAAgBG,EAAO;AAAA,MACvB,QAAQ,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,IAC3C;AACI,IAAAF,IAAU,OAAO,OAAO;AAAA,MACtB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,YAAY;AAAA,IACb,GAAEA,CAAO,GAAGA,EAAQ,YAAY,OAAO,OAAOC,GAAUD,EAAQ,QAAQ,GAAG,MAAMA,EAAQ,WAAWG,EAAQ,KAAKC,GAAQC,CAAQ,GAAGJ,CAAQ,GAAG,KAAK,cAAc,IAAI,KAAK,WAAW,IAAIK,EAAcP,CAAQ,GAAG,KAAK,YAAYC,EAAQ,YAAY,QAAQ,KAAK,aAAaA,EAAQ,YAAY,KAAK,aAAa,IAAIO,EAAMP,EAAQ,IAAI,GAAG,KAAK,WAAW,KAAK,WAAW,qBAAoB,GAAI,KAAK,cAAc,IAAI,KAAK,QAAQA,EAAQ;AAAA,EACvb;AAAA;AAAA,EAED,IAAI,UAAU;AACZ,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA,EACD,IAAI,QAAQQ,GAAO;AACjB,SAAK,SAAS,aAAaA,MAAU,CAAC,KAAK,SAAS,SAAS,YAAY,aAAa,CAACA,EAAM,YAAY,cAAc,KAAK,cAAc,KAAK,KAAK,SAAS,WAAWA,GAAO,KAAK,SAAS,UAAUA;AAAA,EACxM;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,MAAMA,GAAO;AACf,IAAAA,MAAU,KAAK,WAAW,KAAK,SAASA,GAAO,KAAK,cAAc;AAAA,EACnE;AAAA,EACD,IAAI,QAAQ;AACV,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,KAAKA,GAAO;AACd,IAAAA,MAAU,KAAK,SAAS,KAAK,WAAW,SAASA,CAAK,GAAG,KAAK,WAAW,KAAK,WAAW,qBAAoB,GAAI,KAAK,cAAc;AAAA,EACrI;AAAA,EACD,IAAI,OAAO;AACT,WAAO,KAAK,WAAW;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,YAAY;AACd,WAAO,KAAK,WAAW;EACxB;AAAA;AAAA,EAED,SAAS;AACP,QAAI,KAAK,aAAa;AACpB,WAAK,cAAc;AACnB,YAAMC,IAAkB,KAAK,QAAQ,YAAY;AACjD,MAAAF,EAAM,OAAO,SAAS,KAAK,UAAU,EAAE,YAAY,KAAK,QAAQE,CAAe,EAAE,QAAQ,KAAK,SAAS,MAAM;AAAA,IAC9G;AACD,SAAK,SAAS,OAAM,MAAO,KAAK,SAAS,iBAAiB,KAAK,SAAS;AAAA,EACzE;AACH;","x_google_ignoreList":[0]}