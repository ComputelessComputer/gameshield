{"version":3,"file":"index337.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/loadBitmapFont.mjs"],"sourcesContent":["import { LoaderParserPriority } from '../../../assets/loader/parsers/LoaderParser.mjs';\nimport { copySearchParams } from '../../../assets/utils/copySearchParams.mjs';\nimport { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { path } from '../../../utils/path.mjs';\nimport { BitmapFont } from '../BitmapFont.mjs';\nimport { bitmapFontTextParser } from './bitmapFontTextParser.mjs';\nimport { bitmapFontXMLStringParser } from './bitmapFontXMLStringParser.mjs';\n\n\"use strict\";\nconst validExtensions = [\".xml\", \".fnt\"];\nconst bitmapFontCachePlugin = {\n  extension: {\n    type: ExtensionType.CacheParser,\n    name: \"cacheBitmapFont\"\n  },\n  test: (asset) => asset instanceof BitmapFont,\n  getCacheableAssets(keys, asset) {\n    const out = {};\n    keys.forEach((key) => {\n      out[key] = asset;\n      out[`${key}-bitmap`] = asset;\n    });\n    out[`${asset.fontFamily}-bitmap`] = asset;\n    return out;\n  }\n};\nconst loadBitmapFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Normal\n  },\n  name: \"loadBitmapFont\",\n  test(url) {\n    return validExtensions.includes(path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.test(data);\n  },\n  async parse(asset, data, loader) {\n    const bitmapFontData = bitmapFontTextParser.test(asset) ? bitmapFontTextParser.parse(asset) : bitmapFontXMLStringParser.parse(asset);\n    const { src } = data;\n    const { pages } = bitmapFontData;\n    const textureUrls = [];\n    const textureOptions = bitmapFontData.distanceField ? {\n      scaleMode: \"linear\",\n      alphaMode: \"premultiply-alpha-on-upload\",\n      autoGenerateMipmaps: false,\n      resolution: 1\n    } : {};\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = path.join(path.dirname(src), pageFile);\n      imagePath = copySearchParams(imagePath, src);\n      textureUrls.push({\n        src: imagePath,\n        data: textureOptions\n      });\n    }\n    const loadedTextures = await loader.load(textureUrls);\n    const textures = textureUrls.map((url) => loadedTextures[url.src]);\n    const bitmapFont = new BitmapFont({\n      data: bitmapFontData,\n      textures\n    }, src);\n    return bitmapFont;\n  },\n  async load(url, _options) {\n    const response = await DOMAdapter.get().fetch(url);\n    return await response.text();\n  },\n  async unload(bitmapFont, _resolvedAsset, loader) {\n    await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n    bitmapFont.destroy();\n  }\n};\n\nexport { bitmapFontCachePlugin, loadBitmapFont };\n//# sourceMappingURL=loadBitmapFont.mjs.map\n"],"names":["validExtensions","bitmapFontCachePlugin","ExtensionType","asset","BitmapFont","keys","out","key","loadBitmapFont","LoaderParserPriority","url","path","data","bitmapFontTextParser","bitmapFontXMLStringParser","loader","bitmapFontData","src","pages","textureUrls","textureOptions","i","pageFile","imagePath","copySearchParams","loadedTextures","textures","_options","DOMAdapter","bitmapFont","_resolvedAsset","page"],"mappings":";;;;;;;;AAUA,MAAMA,IAAkB,CAAC,QAAQ,MAAM,GACjCC,IAAwB;AAAA,EAC5B,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,MAAM;AAAA,EACP;AAAA,EACD,MAAM,CAACC,MAAUA,aAAiBC;AAAA,EAClC,mBAAmBC,GAAMF,GAAO;AAC9B,UAAMG,IAAM,CAAA;AACZ,WAAAD,EAAK,QAAQ,CAACE,MAAQ;AACpB,MAAAD,EAAIC,CAAG,IAAIJ,GACXG,EAAI,GAAGC,CAAG,SAAS,IAAIJ;AAAA,IAC7B,CAAK,GACDG,EAAI,GAAGH,EAAM,UAAU,SAAS,IAAIA,GAC7BG;AAAA,EACR;AACH,GACME,IAAiB;AAAA,EACrB,WAAW;AAAA,IACT,MAAMN,EAAc;AAAA,IACpB,UAAUO,EAAqB;AAAA,EAChC;AAAA,EACD,MAAM;AAAA,EACN,KAAKC,GAAK;AACR,WAAOV,EAAgB,SAASW,EAAK,QAAQD,CAAG,EAAE,YAAW,CAAE;AAAA,EAChE;AAAA,EACD,MAAM,UAAUE,GAAM;AACpB,WAAOC,EAAqB,KAAKD,CAAI,KAAKE,EAA0B,KAAKF,CAAI;AAAA,EAC9E;AAAA,EACD,MAAM,MAAMT,GAAOS,GAAMG,GAAQ;AAC/B,UAAMC,IAAiBH,EAAqB,KAAKV,CAAK,IAAIU,EAAqB,MAAMV,CAAK,IAAIW,EAA0B,MAAMX,CAAK,GAC7H,EAAE,KAAAc,EAAK,IAAGL,GACV,EAAE,OAAAM,EAAO,IAAGF,GACZG,IAAc,CAAA,GACdC,IAAiBJ,EAAe,gBAAgB;AAAA,MACpD,WAAW;AAAA,MACX,WAAW;AAAA,MACX,qBAAqB;AAAA,MACrB,YAAY;AAAA,IACb,IAAG;AACJ,aAASK,IAAI,GAAGA,IAAIH,EAAM,QAAQ,EAAEG,GAAG;AACrC,YAAMC,IAAWJ,EAAMG,CAAC,EAAE;AAC1B,UAAIE,IAAYZ,EAAK,KAAKA,EAAK,QAAQM,CAAG,GAAGK,CAAQ;AACrD,MAAAC,IAAYC,EAAiBD,GAAWN,CAAG,GAC3CE,EAAY,KAAK;AAAA,QACf,KAAKI;AAAA,QACL,MAAMH;AAAA,MACd,CAAO;AAAA,IACF;AACD,UAAMK,IAAiB,MAAMV,EAAO,KAAKI,CAAW,GAC9CO,IAAWP,EAAY,IAAI,CAACT,MAAQe,EAAef,EAAI,GAAG,CAAC;AAKjE,WAJmB,IAAIN,EAAW;AAAA,MAChC,MAAMY;AAAA,MACN,UAAAU;AAAA,IACD,GAAET,CAAG;AAAA,EAEP;AAAA,EACD,MAAM,KAAKP,GAAKiB,GAAU;AAExB,WAAO,OADU,MAAMC,EAAW,IAAG,EAAG,MAAMlB,CAAG,GAC3B;EACvB;AAAA,EACD,MAAM,OAAOmB,GAAYC,GAAgBf,GAAQ;AAC/C,UAAM,QAAQ,IAAIc,EAAW,MAAM,IAAI,CAACE,MAAShB,EAAO,OAAOgB,EAAK,QAAQ,OAAO,aAAa,CAAC,CAAC,GAClGF,EAAW,QAAO;AAAA,EACnB;AACH;","x_google_ignoreList":[0]}