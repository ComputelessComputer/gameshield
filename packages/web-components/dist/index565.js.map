{"version":3,"file":"index565.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs"],"sourcesContent":["import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nconst _DynamicBitmapFont = class _DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 0;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = { ..._DynamicBitmapFont.defaultOptions, ...options };\n    this._textureSize = dynamicOptions.textureSize;\n    this._mipmap = dynamicOptions.mipmap;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    this.applyFillAsTint = dynamicOptions.overrideFill;\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = resolveCharacters(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    let maxCharHeight = 0;\n    let skipTexture = false;\n    const maxTextureWidth = canvas.width / this.resolution;\n    const maxTextureHeight = canvas.height / this.resolution;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = metrics.width * fontScale;\n      const textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      const height = metrics.height * fontScale;\n      const paddedWidth = textureGlyphWidth + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));\n      }\n      if (currentX + paddedWidth > maxTextureWidth) {\n        currentY += maxCharHeight;\n        maxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + maxCharHeight > maxTextureHeight) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentY = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n      this._textureSize,\n      this._textureSize,\n      textureResolution\n    );\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\",\n        autoGenerateMipmaps: this._mipmap\n      })\n    });\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    if (style.stroke && strokeThickness) {\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    if (style._fill) {\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n};\n_DynamicBitmapFont.defaultOptions = {\n  textureSize: 512,\n  style: new TextStyle(),\n  mipmap: true\n};\nlet DynamicBitmapFont = _DynamicBitmapFont;\n\nexport { DynamicBitmapFont };\n//# sourceMappingURL=DynamicBitmapFont.mjs.map\n"],"names":["_DynamicBitmapFont","AbstractBitmapFont","options","dynamicOptions","style","Texture","requestedFontSize","font","fontStringFromTextStyle","CanvasTextMetrics","chars","charList","resolveCharacters","char","index","self","pageData","canvas","context","textureSource","currentX","currentY","fontScale","padding","maxCharHeight","skipTexture","maxTextureWidth","maxTextureHeight","i","metrics","width","textureGlyphWidth","height","paddedWidth","paddedHeight","pageData2","xAdvance","_a","_b","px","py","frame","Rectangle","deprecation","v8_0_0","newChars","measureCache","first","j","second","c1","c2","total","amount","textureResolution","canvasAndContext","CanvasPool","resolution","texture","ImageSource","stroke","strokeThickness","getCanvasFillStyle","shadowOptions","rgb","Color","dropShadowBlur","dropShadowDistance","x","y","fontProperties","tx","ty","descent","lineHeight","TextStyle","DynamicBitmapFont"],"mappings":"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","x_google_ignoreList":[0]}