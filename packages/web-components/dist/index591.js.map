{"version":3,"file":"index591.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    updateTextBounds(batchableSprite, text);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n"],"names":["CanvasTextPipe","renderer","i","gpuText","text","newKey","instructionSet","batchableSprite","textUid","BigPool","updateTextBounds","gpuTextData","BatchableSprite","ExtensionType"],"mappings":"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","x_google_ignoreList":[0]}