{"version":3,"file":"index550.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n"],"names":["gpuProgram","glProgram","TilingSpriteShader","Shader","compileHighShaderGpuProgram","localUniformBit","tilingBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","tilingBitGl","roundPixelsBitGl","tilingUniforms","UniformGroup","Matrix","Texture","width","height","matrix","anchorX","anchorY","texture","textureWidth","textureHeight","textureMatrix","uTextureTransform"],"mappings":";;;;;;;;AAUA,IAAIA,GACAC;AACJ,MAAMC,UAA2BC,EAAO;AAAA,EACtC,cAAc;AACZ,IAAAH,MAAeA,IAAaI,EAA4B;AAAA,MACtD,MAAM;AAAA,MACN,MAAM;AAAA,QACJC;AAAA,QACAC;AAAA,QACAC;AAAA,MACD;AAAA,IACF,CAAA,IACDN,MAAcA,IAAYO,EAA2B;AAAA,MACnD,MAAM;AAAA,MACN,MAAM;AAAA,QACJC;AAAA,QACAC;AAAA,QACAC;AAAA,MACD;AAAA,IACF,CAAA;AACD,UAAMC,IAAiB,IAAIC,EAAa;AAAA,MACtC,WAAW,EAAE,OAAO,IAAIC,EAAM,GAAI,MAAM,cAAe;AAAA,MACvD,aAAa,EAAE,OAAO,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,YAAa;AAAA,MACzE,cAAc,EAAE,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,YAAa;AAAA,MACpE,mBAAmB,EAAE,OAAO,IAAIA,EAAM,GAAI,MAAM,cAAe;AAAA,MAC/D,aAAa,EAAE,OAAO,IAAI,aAAa,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,MAAM,YAAa;AAAA,IACvF,CAAK;AACD,UAAM;AAAA,MACJ,WAAAb;AAAA,MACA,YAAAD;AAAA,MACA,WAAW;AAAA,QACT,eAAe,IAAIa,EAAa;AAAA,UAC9B,kBAAkB,EAAE,OAAO,IAAIC,EAAM,GAAI,MAAM,cAAe;AAAA,UAC9D,QAAQ,EAAE,OAAO,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,YAAa;AAAA,UACpE,QAAQ,EAAE,OAAO,GAAG,MAAM,MAAO;AAAA,QAC3C,CAAS;AAAA,QACD,gBAAAF;AAAA,QACA,UAAUG,EAAQ,MAAM;AAAA,QACxB,UAAUA,EAAQ,MAAM,OAAO;AAAA,MAChC;AAAA,IACP,CAAK;AAAA,EACF;AAAA,EACD,eAAeC,GAAOC,GAAQC,GAAQC,GAASC,GAASC,GAAS;AAC/D,UAAMT,IAAiB,KAAK,UAAU,gBAChCU,IAAeD,EAAQ,OACvBE,IAAgBF,EAAQ,QACxBG,IAAgBH,EAAQ,eACxBI,IAAoBb,EAAe,SAAS;AAClD,IAAAa,EAAkB;AAAA,MAChBP,EAAO,IAAII,IAAeN;AAAA,MAC1BE,EAAO,IAAII,IAAeL;AAAA,MAC1BC,EAAO,IAAIK,IAAgBP;AAAA,MAC3BE,EAAO,IAAIK,IAAgBN;AAAA,MAC3BC,EAAO,KAAKF;AAAA,MACZE,EAAO,KAAKD;AAAA,IAClB,GACIQ,EAAkB,OAAM,GACxBb,EAAe,SAAS,YAAYY,EAAc,UAClDZ,EAAe,SAAS,cAAcY,EAAc,aACpDZ,EAAe,SAAS,eAAeY,EAAc,cACrDZ,EAAe,SAAS,oBAAoBa,GAC5Cb,EAAe,SAAS,YAAY,CAAC,IAAII,GACzCJ,EAAe,SAAS,YAAY,CAAC,IAAIK,GACzCL,EAAe,SAAS,YAAY,CAAC,IAAIO,GACzCP,EAAe,SAAS,YAAY,CAAC,IAAIQ,GACrCC,MACF,KAAK,UAAU,WAAWA,EAAQ,QAClC,KAAK,UAAU,WAAWA,EAAQ,OAAO;AAAA,EAE5C;AACH;","x_google_ignoreList":[0]}