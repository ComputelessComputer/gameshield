{"version":3,"file":"index10.js","sources":["../src/behavior/behavior-analyzer.ts"],"sourcesContent":["import { BehaviorMetrics, InteractionEvent, InteractionEventType } from '../types';\n\n/**\n * BehaviorAnalyzer\n * \n * Tracks and analyzes user interactions to determine if the user is human\n * based on interaction patterns, movement smoothness, and other metrics.\n */\nexport class BehaviorAnalyzer {\n  private events: InteractionEvent[] = [];\n  private isTracking = false;\n  private boundHandlers: { [key: string]: (event: Event) => void } = {};\n  \n  /**\n   * Start tracking user interactions\n   */\n  public startTracking(): void {\n    if (this.isTracking) return;\n    \n    this.isTracking = true;\n    this.events = [];\n    \n    // Bind event handlers\n    this.boundHandlers = {\n      mousemove: this.handleMouseMove.bind(this) as EventListener,\n      mousedown: this.handleMouseEvent.bind(this, 'mousedown') as EventListener,\n      mouseup: this.handleMouseEvent.bind(this, 'mouseup') as EventListener,\n      keydown: this.handleKeyEvent.bind(this, 'keydown') as EventListener,\n      keyup: this.handleKeyEvent.bind(this, 'keyup') as EventListener\n    };\n    \n    // Add event listeners\n    window.addEventListener('mousemove', this.boundHandlers.mousemove, { passive: true });\n    window.addEventListener('mousedown', this.boundHandlers.mousedown, { passive: true });\n    window.addEventListener('mouseup', this.boundHandlers.mouseup, { passive: true });\n    window.addEventListener('keydown', this.boundHandlers.keydown, { passive: true });\n    window.addEventListener('keyup', this.boundHandlers.keyup, { passive: true });\n  }\n  \n  /**\n   * Stop tracking user interactions\n   */\n  public stopTracking(): void {\n    if (!this.isTracking) return;\n    \n    this.isTracking = false;\n    \n    // Remove event listeners\n    window.removeEventListener('mousemove', this.boundHandlers.mousemove);\n    window.removeEventListener('mousedown', this.boundHandlers.mousedown);\n    window.removeEventListener('mouseup', this.boundHandlers.mouseup);\n    window.removeEventListener('keydown', this.boundHandlers.keydown);\n    window.removeEventListener('keyup', this.boundHandlers.keyup);\n  }\n  \n  /**\n   * Reset the analyzer state\n   */\n  public reset(): void {\n    this.events = [];\n    if (this.isTracking) {\n      this.stopTracking();\n      this.startTracking();\n    }\n  }\n  \n  /**\n   * Analyze collected behavior data and return metrics\n   */\n  public analyze(): BehaviorMetrics {\n    // Calculate metrics based on collected events\n    const movementSmoothnessScore = this.calculateMovementSmoothness();\n    const reactionTimeScore = this.calculateReactionTime();\n    const interactionDensity = this.calculateInteractionDensity();\n    const patternVariability = this.calculatePatternVariability();\n    \n    // Calculate overall human score (weighted average)\n    const overallHumanScore = (\n      movementSmoothnessScore * 0.35 +\n      reactionTimeScore * 0.25 +\n      interactionDensity * 0.2 +\n      patternVariability * 0.2\n    );\n    \n    // Determine if the user is human based on threshold\n    const isHuman = overallHumanScore > 0.6;\n    \n    return {\n      movementSmoothnessScore,\n      reactionTimeScore,\n      interactionDensity,\n      patternVariability,\n      overallHumanScore,\n      isHuman\n    };\n  }\n  \n  /**\n   * Handle mouse movement events\n   */\n  private handleMouseMove(event: MouseEvent): void {\n    if (!this.isTracking) return;\n    \n    // Throttle mouse move events to avoid overwhelming the analyzer\n    if (this.events.length > 0) {\n      const lastEvent = this.events[this.events.length - 1];\n      if (\n        lastEvent.type === 'mousemove' && \n        event.timeStamp - lastEvent.timestamp < 50\n      ) {\n        return;\n      }\n    }\n    \n    this.events.push({\n      type: 'mousemove',\n      timestamp: event.timeStamp,\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n  \n  /**\n   * Handle mouse events (down/up)\n   */\n  private handleMouseEvent(type: InteractionEventType, event: MouseEvent): void {\n    if (!this.isTracking) return;\n    \n    this.events.push({\n      type,\n      timestamp: event.timeStamp,\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n  \n  /**\n   * Handle keyboard events (down/up)\n   */\n  private handleKeyEvent(type: InteractionEventType, event: KeyboardEvent): void {\n    if (!this.isTracking) return;\n    \n    this.events.push({\n      type,\n      timestamp: event.timeStamp,\n      key: event.key\n    });\n  }\n  \n  /**\n   * Calculate movement smoothness score\n   * Measures how natural and smooth the mouse movements are\n   */\n  private calculateMovementSmoothness(): number {\n    const mouseEvents = this.events.filter(e => e.type === 'mousemove');\n    if (mouseEvents.length < 10) return 0.5; // Not enough data\n    \n    let totalJerk = 0;\n    let count = 0;\n    \n    for (let i = 2; i < mouseEvents.length; i++) {\n      const e1 = mouseEvents[i - 2];\n      const e2 = mouseEvents[i - 1];\n      const e3 = mouseEvents[i];\n      \n      if (!e1.x || !e1.y || !e2.x || !e2.y || !e3.x || !e3.y) continue;\n      \n      // Calculate acceleration changes (jerk)\n      const dt1 = (e2.timestamp - e1.timestamp) / 1000; // in seconds\n      const dt2 = (e3.timestamp - e2.timestamp) / 1000; // in seconds\n      \n      if (dt1 === 0 || dt2 === 0) continue;\n      \n      const vx1 = (e2.x - e1.x) / dt1;\n      const vy1 = (e2.y - e1.y) / dt1;\n      const vx2 = (e3.x - e2.x) / dt2;\n      const vy2 = (e3.y - e2.y) / dt2;\n      \n      const ax1 = vx2 - vx1;\n      const ay1 = vy2 - vy1;\n      \n      // Jerk magnitude\n      const jerk = Math.sqrt(ax1 * ax1 + ay1 * ay1);\n      totalJerk += jerk;\n      count++;\n    }\n    \n    if (count === 0) return 0.5;\n    \n    const avgJerk = totalJerk / count;\n    // Bots typically have very low or very high jerk\n    // Convert to a score between 0 and 1 (higher is more human-like)\n    const normalizedJerk = Math.min(1, Math.max(0, 1 - Math.abs(avgJerk - 50) / 50));\n    return normalizedJerk;\n  }\n  \n  /**\n   * Calculate reaction time score\n   * Measures how quickly the user responds to game events\n   */\n  private calculateReactionTime(): number {\n    const keyEvents = this.events.filter(e => e.type === 'keydown' || e.type === 'keyup');\n    const mouseEvents = this.events.filter(e => e.type === 'mousedown' || e.type === 'mouseup');\n    \n    if (keyEvents.length + mouseEvents.length < 5) return 0.5; // Not enough data\n    \n    // Calculate average time between key/mouse down and up events\n    let totalReactionTime = 0;\n    let count = 0;\n    \n    // Check key press durations\n    for (let i = 0; i < keyEvents.length - 1; i++) {\n      if (keyEvents[i].type === 'keydown' && keyEvents[i + 1].type === 'keyup' && keyEvents[i].key === keyEvents[i + 1].key) {\n        const duration = keyEvents[i + 1].timestamp - keyEvents[i].timestamp;\n        totalReactionTime += duration;\n        count++;\n      }\n    }\n    \n    // Check mouse click durations\n    for (let i = 0; i < mouseEvents.length - 1; i++) {\n      if (mouseEvents[i].type === 'mousedown' && mouseEvents[i + 1].type === 'mouseup') {\n        const duration = mouseEvents[i + 1].timestamp - mouseEvents[i].timestamp;\n        totalReactionTime += duration;\n        count++;\n      }\n    }\n    \n    if (count === 0) return 0.5;\n    \n    const avgReactionTime = totalReactionTime / count;\n    \n    // Human reaction times are typically between 100ms and 400ms\n    // Too fast or too slow is suspicious\n    if (avgReactionTime < 50) return 0.1; // Too fast, likely a bot\n    if (avgReactionTime > 1000) return 0.3; // Too slow, might be a bot\n    \n    // Normalize to a 0-1 scale with peak at ~200ms\n    const normalizedScore = Math.max(0, 1 - Math.abs(avgReactionTime - 200) / 150);\n    return normalizedScore;\n  }\n  \n  /**\n   * Calculate interaction density\n   * Measures the frequency and distribution of interactions\n   */\n  private calculateInteractionDensity(): number {\n    if (this.events.length < 5) return 0.5; // Not enough data\n    \n    const duration = (this.events[this.events.length - 1].timestamp - this.events[0].timestamp) / 1000;\n    if (duration === 0) return 0.5;\n    \n    // Calculate events per second\n    const eventsPerSecond = this.events.length / duration;\n    \n    // Bots often have very consistent event frequency\n    // Calculate variance in time between events\n    let totalVariance = 0;\n    for (let i = 1; i < this.events.length; i++) {\n      const timeDiff = this.events[i].timestamp - this.events[i - 1].timestamp;\n      totalVariance += timeDiff * timeDiff;\n    }\n    \n    const avgVariance = totalVariance / (this.events.length - 1);\n    const normalizedVariance = Math.min(1, avgVariance / 10000);\n    \n    // Combine frequency and variance\n    // Humans have moderate frequency with high variance\n    const frequencyScore = Math.min(1, Math.max(0, 1 - Math.abs(eventsPerSecond - 5) / 5));\n    \n    return (frequencyScore * 0.6 + normalizedVariance * 0.4);\n  }\n  \n  /**\n   * Calculate pattern variability\n   * Measures how random and unpredictable the interactions are\n   */\n  private calculatePatternVariability(): number {\n    const mouseEvents = this.events.filter(e => e.type === 'mousemove');\n    if (mouseEvents.length < 10) return 0.5; // Not enough data\n    \n    // Calculate direction changes in mouse movement\n    let directionChanges = 0;\n    let prevDirection = { x: 0, y: 0 };\n    \n    for (let i = 1; i < mouseEvents.length; i++) {\n      const prev = mouseEvents[i - 1];\n      const curr = mouseEvents[i];\n      \n      if (!prev.x || !prev.y || !curr.x || !curr.y) continue;\n      \n      const dx = curr.x - prev.x;\n      const dy = curr.y - prev.y;\n      \n      // Check if direction changed\n      if (\n        (prevDirection.x > 0 && dx < 0) ||\n        (prevDirection.x < 0 && dx > 0) ||\n        (prevDirection.y > 0 && dy < 0) ||\n        (prevDirection.y < 0 && dy > 0)\n      ) {\n        directionChanges++;\n      }\n      \n      prevDirection = { x: dx, y: dy };\n    }\n    \n    // Calculate direction change ratio\n    const changeRatio = directionChanges / (mouseEvents.length - 1);\n    \n    // Humans typically have more direction changes\n    // Bots often move in straight lines or perfect curves\n    return Math.min(1, changeRatio * 2);\n  }\n}\n"],"names":["BehaviorAnalyzer","movementSmoothnessScore","reactionTimeScore","interactionDensity","patternVariability","overallHumanScore","isHuman","event","lastEvent","type","mouseEvents","e","totalJerk","count","i","e1","e2","e3","dt1","dt2","vx1","vy1","vx2","vy2","ax1","ay1","jerk","avgJerk","keyEvents","totalReactionTime","duration","avgReactionTime","eventsPerSecond","totalVariance","timeDiff","avgVariance","normalizedVariance","directionChanges","prevDirection","prev","curr","dx","dy","changeRatio"],"mappings":"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"}