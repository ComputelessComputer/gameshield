{"version":3,"file":"index24.js","sources":["../../../node_modules/.pnpm/@pixi+color@7.4.3/node_modules/@pixi/color/lib/Color.mjs"],"sourcesContent":["import { extend, colord } from \"@pixi/colord\";\nimport namesPlugin from \"@pixi/colord/plugins/names\";\nextend([namesPlugin]);\nconst _Color = class _Color2 {\n  /**\n   * @param {PIXI.ColorSource} value - Optional value to use, if not provided, white is used.\n   */\n  constructor(value = 16777215) {\n    this._value = null, this._components = new Float32Array(4), this._components.fill(1), this._int = 16777215, this.value = value;\n  }\n  /** Get red component (0 - 1) */\n  get red() {\n    return this._components[0];\n  }\n  /** Get green component (0 - 1) */\n  get green() {\n    return this._components[1];\n  }\n  /** Get blue component (0 - 1) */\n  get blue() {\n    return this._components[2];\n  }\n  /** Get alpha component (0 - 1) */\n  get alpha() {\n    return this._components[3];\n  }\n  /**\n   * Set the value, suitable for chaining\n   * @param value\n   * @see PIXI.Color.value\n   */\n  setValue(value) {\n    return this.value = value, this;\n  }\n  /**\n   * The current color source.\n   *\n   * When setting:\n   * - Setting to an instance of `Color` will copy its color source and components.\n   * - Otherwise, `Color` will try to normalize the color source and set the components.\n   *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n   *\n   * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n   * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n   *\n   * When getting:\n   * - A return value of `null` means the previous value was overridden (e.g., {@link PIXI.Color.multiply multiply},\n   *   {@link PIXI.Color.premultiply premultiply} or {@link PIXI.Color.round round}).\n   * - Otherwise, the color source used when setting is returned.\n   * @type {PIXI.ColorSource}\n   */\n  set value(value) {\n    if (value instanceof _Color2)\n      this._value = this.cloneSource(value._value), this._int = value._int, this._components.set(value._components);\n    else {\n      if (value === null)\n        throw new Error(\"Cannot set PIXI.Color#value to null\");\n      (this._value === null || !this.isSourceEqual(this._value, value)) && (this.normalize(value), this._value = this.cloneSource(value));\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  /**\n   * Copy a color source internally.\n   * @param value - Color source\n   */\n  cloneSource(value) {\n    return typeof value == \"string\" || typeof value == \"number\" || value instanceof Number || value === null ? value : Array.isArray(value) || ArrayBuffer.isView(value) ? value.slice(0) : typeof value == \"object\" && value !== null ? { ...value } : value;\n  }\n  /**\n   * Equality check for color sources.\n   * @param value1 - First color source\n   * @param value2 - Second color source\n   * @returns `true` if the color sources are equal, `false` otherwise.\n   */\n  isSourceEqual(value1, value2) {\n    const type1 = typeof value1;\n    if (type1 !== typeof value2)\n      return !1;\n    if (type1 === \"number\" || type1 === \"string\" || value1 instanceof Number)\n      return value1 === value2;\n    if (Array.isArray(value1) && Array.isArray(value2) || ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2))\n      return value1.length !== value2.length ? !1 : value1.every((v, i) => v === value2[i]);\n    if (value1 !== null && value2 !== null) {\n      const keys1 = Object.keys(value1), keys2 = Object.keys(value2);\n      return keys1.length !== keys2.length ? !1 : keys1.every((key) => value1[key] === value2[key]);\n    }\n    return value1 === value2;\n  }\n  /**\n   * Convert to a RGBA color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n   */\n  toRgba() {\n    const [r, g, b, a] = this._components;\n    return { r, g, b, a };\n  }\n  /**\n   * Convert to a RGB color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n   */\n  toRgb() {\n    const [r, g, b] = this._components;\n    return { r, g, b };\n  }\n  /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n  toRgbaString() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return `rgba(${r},${g},${b},${this.alpha})`;\n  }\n  toUint8RgbArray(out) {\n    const [r, g, b] = this._components;\n    return out = out ?? [], out[0] = Math.round(r * 255), out[1] = Math.round(g * 255), out[2] = Math.round(b * 255), out;\n  }\n  toRgbArray(out) {\n    out = out ?? [];\n    const [r, g, b] = this._components;\n    return out[0] = r, out[1] = g, out[2] = b, out;\n  }\n  /**\n   * Convert to a hexadecimal number.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toNumber(); // returns 16777215\n   */\n  toNumber() {\n    return this._int;\n  }\n  /**\n   * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n   * @returns {number} - The color as a number in little endian format.\n   */\n  toLittleEndianNumber() {\n    const value = this._int;\n    return (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  /**\n   * Multiply with another color. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param {PIXI.ColorSource} value - The color to multiply by.\n   */\n  multiply(value) {\n    const [r, g, b, a] = _Color2.temp.setValue(value)._components;\n    return this._components[0] *= r, this._components[1] *= g, this._components[2] *= b, this._components[3] *= a, this.refreshInt(), this._value = null, this;\n  }\n  /**\n   * Converts color to a premultiplied alpha format. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {PIXI.Color} - Itself.\n   */\n  premultiply(alpha, applyToRGB = !0) {\n    return applyToRGB && (this._components[0] *= alpha, this._components[1] *= alpha, this._components[2] *= alpha), this._components[3] = alpha, this.refreshInt(), this._value = null, this;\n  }\n  /**\n   * Premultiplies alpha with current color.\n   * @param {number} alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {number} tint multiplied by alpha\n   */\n  toPremultiplied(alpha, applyToRGB = !0) {\n    if (alpha === 1)\n      return (255 << 24) + this._int;\n    if (alpha === 0)\n      return applyToRGB ? 0 : this._int;\n    let r = this._int >> 16 & 255, g = this._int >> 8 & 255, b = this._int & 255;\n    return applyToRGB && (r = r * alpha + 0.5 | 0, g = g * alpha + 0.5 | 0, b = b * alpha + 0.5 | 0), (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n  }\n  /**\n   * Convert to a hexidecimal string.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHex(); // returns \"#ffffff\"\n   */\n  toHex() {\n    const hexString = this._int.toString(16);\n    return `#${\"000000\".substring(0, 6 - hexString.length) + hexString}`;\n  }\n  /**\n   * Convert to a hexidecimal string with alpha.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHexa(); // returns \"#ffffffff\"\n   */\n  toHexa() {\n    const alphaString = Math.round(this._components[3] * 255).toString(16);\n    return this.toHex() + \"00\".substring(0, 2 - alphaString.length) + alphaString;\n  }\n  /**\n   * Set alpha, suitable for chaining.\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    return this._components[3] = this._clamp(alpha), this;\n  }\n  /**\n   * Rounds the specified color according to the step. This action is destructive, and will\n   * override the previous `value` property to be `null`. The alpha component is not rounded.\n   * @param steps - Number of steps which will be used as a cap when rounding colors\n   * @deprecated since 7.3.0\n   */\n  round(steps) {\n    const [r, g, b] = this._components;\n    return this._components[0] = Math.round(r * steps) / steps, this._components[1] = Math.round(g * steps) / steps, this._components[2] = Math.round(b * steps) / steps, this.refreshInt(), this._value = null, this;\n  }\n  toArray(out) {\n    out = out ?? [];\n    const [r, g, b, a] = this._components;\n    return out[0] = r, out[1] = g, out[2] = b, out[3] = a, out;\n  }\n  /**\n   * Normalize the input value into rgba\n   * @param value - Input value\n   */\n  normalize(value) {\n    let r, g, b, a;\n    if ((typeof value == \"number\" || value instanceof Number) && value >= 0 && value <= 16777215) {\n      const int = value;\n      r = (int >> 16 & 255) / 255, g = (int >> 8 & 255) / 255, b = (int & 255) / 255, a = 1;\n    } else if ((Array.isArray(value) || value instanceof Float32Array) && value.length >= 3 && value.length <= 4)\n      value = this._clamp(value), [r, g, b, a = 1] = value;\n    else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray) && value.length >= 3 && value.length <= 4)\n      value = this._clamp(value, 0, 255), [r, g, b, a = 255] = value, r /= 255, g /= 255, b /= 255, a /= 255;\n    else if (typeof value == \"string\" || typeof value == \"object\") {\n      if (typeof value == \"string\") {\n        const match = _Color2.HEX_PATTERN.exec(value);\n        match && (value = `#${match[2]}`);\n      }\n      const color = colord(value);\n      color.isValid() && ({ r, g, b, a } = color.rgba, r /= 255, g /= 255, b /= 255);\n    }\n    if (r !== void 0)\n      this._components[0] = r, this._components[1] = g, this._components[2] = b, this._components[3] = a, this.refreshInt();\n    else\n      throw new Error(`Unable to convert color ${value}`);\n  }\n  /** Refresh the internal color rgb number */\n  refreshInt() {\n    this._clamp(this._components);\n    const [r, g, b] = this._components;\n    this._int = (r * 255 << 16) + (g * 255 << 8) + (b * 255 | 0);\n  }\n  /**\n   * Clamps values to a range. Will override original values\n   * @param value - Value(s) to clamp\n   * @param min - Minimum value\n   * @param max - Maximum value\n   */\n  _clamp(value, min = 0, max = 1) {\n    return typeof value == \"number\" ? Math.min(Math.max(value, min), max) : (value.forEach((v, i) => {\n      value[i] = Math.min(Math.max(v, min), max);\n    }), value);\n  }\n};\n_Color.shared = new _Color(), /**\n* Temporary Color object for static uses internally.\n* As to not conflict with Color.shared.\n* @ignore\n*/\n_Color.temp = new _Color(), /** Pattern for hex strings */\n_Color.HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\nlet Color = _Color;\nexport {\n  Color\n};\n//# sourceMappingURL=Color.mjs.map\n"],"names":["extend","namesPlugin","_Color","_Color2","value","value1","value2","type1","v","i","keys1","keys2","key","r","g","b","a","out","alpha","applyToRGB","hexString","alphaString","steps","int","match","color","colord","min","max","Color"],"mappings":"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","x_google_ignoreList":[0]}