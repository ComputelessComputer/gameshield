{"version":3,"file":"index137.js","sources":["../../../node_modules/.pnpm/@pixi+filter-displacement@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/filter-displacement/lib/DisplacementFilter.mjs"],"sourcesContent":["import { Filter, Matrix, Point } from \"@pixi/core\";\nimport fragment from \"./displacement.frag.mjs\";\nimport vertex from \"./displacement.vert.mjs\";\nclass DisplacementFilter extends Filter {\n  /**\n   * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n   * @param scale - The scale of the displacement\n   */\n  constructor(sprite, scale) {\n    const maskMatrix = new Matrix();\n    sprite.renderable = !1, super(vertex, fragment, {\n      mapSampler: sprite._texture,\n      filterMatrix: maskMatrix,\n      scale: { x: 1, y: 1 },\n      rotation: new Float32Array([1, 0, 0, 1])\n    }), this.maskSprite = sprite, this.maskMatrix = maskMatrix, scale == null && (scale = 20), this.scale = new Point(scale, scale);\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - clearMode.\n   */\n  apply(filterManager, input, output, clearMode) {\n    this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite), this.uniforms.scale.x = this.scale.x, this.uniforms.scale.y = this.scale.y;\n    const wt = this.maskSprite.worldTransform, lenX = Math.sqrt(wt.a * wt.a + wt.b * wt.b), lenY = Math.sqrt(wt.c * wt.c + wt.d * wt.d);\n    lenX !== 0 && lenY !== 0 && (this.uniforms.rotation[0] = wt.a / lenX, this.uniforms.rotation[1] = wt.b / lenX, this.uniforms.rotation[2] = wt.c / lenY, this.uniforms.rotation[3] = wt.d / lenY), filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /** The texture used for the displacement map. Must be power of 2 sized texture. */\n  get map() {\n    return this.uniforms.mapSampler;\n  }\n  set map(value) {\n    this.uniforms.mapSampler = value;\n  }\n}\nexport {\n  DisplacementFilter\n};\n//# sourceMappingURL=DisplacementFilter.mjs.map\n"],"names":["DisplacementFilter","Filter","sprite","scale","maskMatrix","Matrix","vertex","fragment","Point","filterManager","input","output","clearMode","wt","lenX","lenY","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,WAA2BC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtC,YAAYC,GAAQC,GAAO;AACzB,UAAMC,IAAa,IAAIC;AACvB,IAAAH,EAAO,aAAa,IAAI,MAAMI,GAAQC,GAAU;AAAA,MAC9C,YAAYL,EAAO;AAAA,MACnB,cAAcE;AAAA,MACd,OAAO,EAAE,GAAG,GAAG,GAAG,EAAG;AAAA,MACrB,UAAU,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,IAC7C,CAAK,GAAG,KAAK,aAAaF,GAAQ,KAAK,aAAaE,GAAYD,KAAS,SAASA,IAAQ,KAAK,KAAK,QAAQ,IAAIK,EAAML,GAAOA,CAAK;AAAA,EAC/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAMM,GAAeC,GAAOC,GAAQC,GAAW;AAC7C,SAAK,SAAS,eAAeH,EAAc,sBAAsB,KAAK,YAAY,KAAK,UAAU,GAAG,KAAK,SAAS,MAAM,IAAI,KAAK,MAAM,GAAG,KAAK,SAAS,MAAM,IAAI,KAAK,MAAM;AAC7K,UAAMI,IAAK,KAAK,WAAW,gBAAgBC,IAAO,KAAK,KAAKD,EAAG,IAAIA,EAAG,IAAIA,EAAG,IAAIA,EAAG,CAAC,GAAGE,IAAO,KAAK,KAAKF,EAAG,IAAIA,EAAG,IAAIA,EAAG,IAAIA,EAAG,CAAC;AAClI,IAAAC,MAAS,KAAKC,MAAS,MAAM,KAAK,SAAS,SAAS,CAAC,IAAIF,EAAG,IAAIC,GAAM,KAAK,SAAS,SAAS,CAAC,IAAID,EAAG,IAAIC,GAAM,KAAK,SAAS,SAAS,CAAC,IAAID,EAAG,IAAIE,GAAM,KAAK,SAAS,SAAS,CAAC,IAAIF,EAAG,IAAIE,IAAON,EAAc,YAAY,MAAMC,GAAOC,GAAQC,CAAS;AAAA,EAC3P;AAAA;AAAA,EAED,IAAI,MAAM;AACR,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA,EACD,IAAI,IAAII,GAAO;AACb,SAAK,SAAS,aAAaA;AAAA,EAC5B;AACH;","x_google_ignoreList":[0]}