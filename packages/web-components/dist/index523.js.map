{"version":3,"file":"index523.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/utils/buildContextBatches.mjs"],"sourcesContent":["import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { buildUvs, buildSimpleUvs } from '../../../../rendering/renderers/shared/geometry/utils/buildUvs.mjs';\nimport { transformVertices } from '../../../../rendering/renderers/shared/geometry/utils/transformVertices.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../../../utils/pool/PoolGroup.mjs';\nimport { BatchableGraphics } from '../BatchableGraphics.mjs';\nimport { buildCircle, buildEllipse, buildRoundedRectangle } from '../buildCommands/buildCircle.mjs';\nimport { buildLine } from '../buildCommands/buildLine.mjs';\nimport { buildPixelLine } from '../buildCommands/buildPixelLine.mjs';\nimport { buildPolygon } from '../buildCommands/buildPolygon.mjs';\nimport { buildRectangle } from '../buildCommands/buildRectangle.mjs';\nimport { buildTriangle } from '../buildCommands/buildTriangle.mjs';\nimport { generateTextureMatrix } from './generateTextureFillMatrix.mjs';\nimport { triangulateWithHoles } from './triangulateWithHoles.mjs';\n\n\"use strict\";\nconst shapeBuilders = {};\nextensions.handleByMap(ExtensionType.ShapeBuilder, shapeBuilders);\nextensions.add(buildRectangle, buildPolygon, buildTriangle, buildCircle, buildEllipse, buildRoundedRectangle);\nconst tempRect = new Rectangle();\nconst tempTextureMatrix = new Matrix();\nfunction buildContextBatches(context, gpuContext) {\n  const { geometryData, batches } = gpuContext;\n  batches.length = 0;\n  geometryData.indices.length = 0;\n  geometryData.vertices.length = 0;\n  geometryData.uvs.length = 0;\n  for (let i = 0; i < context.instructions.length; i++) {\n    const instruction = context.instructions[i];\n    if (instruction.action === \"texture\") {\n      addTextureToGeometryData(instruction.data, batches, geometryData);\n    } else if (instruction.action === \"fill\" || instruction.action === \"stroke\") {\n      const isStroke = instruction.action === \"stroke\";\n      const shapePath = instruction.data.path.shapePath;\n      const style = instruction.data.style;\n      const hole = instruction.data.hole;\n      if (isStroke && hole) {\n        addShapePathToGeometryData(hole.shapePath, style, true, batches, geometryData);\n      }\n      if (hole) {\n        shapePath.shapePrimitives[shapePath.shapePrimitives.length - 1].holes = hole.shapePath.shapePrimitives;\n      }\n      addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData);\n    }\n  }\n}\nfunction addTextureToGeometryData(data, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  const indexOffset = indices.length;\n  const vertOffset = vertices.length / 2;\n  const points = [];\n  const build = shapeBuilders.rectangle;\n  const rect = tempRect;\n  const texture = data.image;\n  rect.x = data.dx;\n  rect.y = data.dy;\n  rect.width = data.dw;\n  rect.height = data.dh;\n  const matrix = data.transform;\n  build.build(rect, points);\n  if (matrix) {\n    transformVertices(points, matrix);\n  }\n  build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n  const textureUvs = texture.uvs;\n  uvs.push(\n    textureUvs.x0,\n    textureUvs.y0,\n    textureUvs.x1,\n    textureUvs.y1,\n    textureUvs.x3,\n    textureUvs.y3,\n    textureUvs.x2,\n    textureUvs.y2\n  );\n  const graphicsBatch = BigPool.get(BatchableGraphics);\n  graphicsBatch.indexOffset = indexOffset;\n  graphicsBatch.indexSize = indices.length - indexOffset;\n  graphicsBatch.attributeOffset = vertOffset;\n  graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n  graphicsBatch.baseColor = data.style;\n  graphicsBatch.alpha = data.alpha;\n  graphicsBatch.texture = texture;\n  graphicsBatch.geometryData = geometryData;\n  batches.push(graphicsBatch);\n}\nfunction addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  shapePath.shapePrimitives.forEach(({ shape, transform: matrix, holes }) => {\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n    const points = [];\n    const build = shapeBuilders[shape.type];\n    let topology = \"triangle-list\";\n    build.build(shape, points);\n    if (matrix) {\n      transformVertices(points, matrix);\n    }\n    if (!isStroke) {\n      if (holes) {\n        const holeIndices = [];\n        const otherPoints = points.slice();\n        const holeArrays = getHoleArrays(holes);\n        holeArrays.forEach((holePoints) => {\n          holeIndices.push(otherPoints.length / 2);\n          otherPoints.push(...holePoints);\n        });\n        triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n      } else {\n        build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n      }\n    } else {\n      const close = shape.closePath ?? true;\n      const lineStyle = style;\n      if (!lineStyle.pixelLine) {\n        buildLine(points, lineStyle, false, close, vertices, indices);\n      } else {\n        buildPixelLine(points, close, vertices, indices);\n        topology = \"line-list\";\n      }\n    }\n    const uvsOffset = uvs.length / 2;\n    const texture = style.texture;\n    if (texture !== Texture.WHITE) {\n      const textureMatrix = generateTextureMatrix(tempTextureMatrix, style, shape, matrix);\n      buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, vertices.length / 2 - vertOffset, textureMatrix);\n    } else {\n      buildSimpleUvs(uvs, uvsOffset, 2, vertices.length / 2 - vertOffset);\n    }\n    const graphicsBatch = BigPool.get(BatchableGraphics);\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n    graphicsBatch.attributeOffset = vertOffset;\n    graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n    graphicsBatch.baseColor = style.color;\n    graphicsBatch.alpha = style.alpha;\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n    graphicsBatch.topology = topology;\n    batches.push(graphicsBatch);\n  });\n}\nfunction getHoleArrays(holePrimitives) {\n  const holeArrays = [];\n  for (let k = 0; k < holePrimitives.length; k++) {\n    const holePrimitive = holePrimitives[k].shape;\n    const holePoints = [];\n    const holeBuilder = shapeBuilders[holePrimitive.type];\n    holeBuilder.build(holePrimitive, holePoints);\n    holeArrays.push(holePoints);\n  }\n  return holeArrays;\n}\n\nexport { buildContextBatches, shapeBuilders };\n//# sourceMappingURL=buildContextBatches.mjs.map\n"],"names":["shapeBuilders","extensions","ExtensionType","buildRectangle","buildPolygon","buildTriangle","buildCircle","buildEllipse","buildRoundedRectangle","tempRect","Rectangle","tempTextureMatrix","Matrix","buildContextBatches","context","gpuContext","geometryData","batches","i","instruction","addTextureToGeometryData","isStroke","shapePath","style","hole","addShapePathToGeometryData","data","vertices","uvs","indices","indexOffset","vertOffset","points","build","rect","texture","matrix","transformVertices","textureUvs","graphicsBatch","BigPool","BatchableGraphics","shape","holes","topology","close","lineStyle","buildPixelLine","buildLine","holeIndices","otherPoints","getHoleArrays","holePoints","triangulateWithHoles","uvsOffset","Texture","textureMatrix","generateTextureMatrix","buildUvs","buildSimpleUvs","holePrimitives","holeArrays","k","holePrimitive"],"mappings":"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","x_google_ignoreList":[0]}