{"version":3,"file":"index120.js","sources":["../../../node_modules/.pnpm/@pixi+text@7.4.3_@pixi+core@7.4.3_@pixi+sprite@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3__/node_modules/@pixi/text/lib/TextStyle.mjs"],"sourcesContent":["import { TEXT_GRADIENT } from \"./const.mjs\";\nimport { Color } from \"@pixi/core\";\nconst genericFontFamilies = [\n  \"serif\",\n  \"sans-serif\",\n  \"monospace\",\n  \"cursive\",\n  \"fantasy\",\n  \"system-ui\"\n], _TextStyle = class _TextStyle2 {\n  /**\n   * @param style - TextStyle properties to be set on the text. See {@link PIXI.TextStyle.defaultStyle}\n   *       for the default values.\n   */\n  constructor(style) {\n    this.styleID = 0, this.reset(), deepCopyProperties(this, style, style);\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * Note that the only the properties of the object are cloned.\n   *\n   * @return New cloned TextStyle object\n   */\n  clone() {\n    const clonedProperties = {};\n    return deepCopyProperties(clonedProperties, this, _TextStyle2.defaultStyle), new _TextStyle2(clonedProperties);\n  }\n  /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n  reset() {\n    deepCopyProperties(this, _TextStyle2.defaultStyle, _TextStyle2.defaultStyle);\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   *\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(align) {\n    this._align !== align && (this._align = align, this.styleID++);\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(breakWords) {\n    this._breakWords !== breakWords && (this._breakWords = breakWords, this.styleID++);\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(dropShadow) {\n    this._dropShadow !== dropShadow && (this._dropShadow = dropShadow, this.styleID++);\n  }\n  /** Set alpha for the drop shadow. */\n  get dropShadowAlpha() {\n    return this._dropShadowAlpha;\n  }\n  set dropShadowAlpha(dropShadowAlpha) {\n    this._dropShadowAlpha !== dropShadowAlpha && (this._dropShadowAlpha = dropShadowAlpha, this.styleID++);\n  }\n  /** Set a angle of the drop shadow. */\n  get dropShadowAngle() {\n    return this._dropShadowAngle;\n  }\n  set dropShadowAngle(dropShadowAngle) {\n    this._dropShadowAngle !== dropShadowAngle && (this._dropShadowAngle = dropShadowAngle, this.styleID++);\n  }\n  /** Set a shadow blur radius. */\n  get dropShadowBlur() {\n    return this._dropShadowBlur;\n  }\n  set dropShadowBlur(dropShadowBlur) {\n    this._dropShadowBlur !== dropShadowBlur && (this._dropShadowBlur = dropShadowBlur, this.styleID++);\n  }\n  /** A fill style to be used on the dropshadow e.g., 'red', '#00FF00'. */\n  get dropShadowColor() {\n    return this._dropShadowColor;\n  }\n  set dropShadowColor(dropShadowColor) {\n    const outputColor = getColor(dropShadowColor);\n    this._dropShadowColor !== outputColor && (this._dropShadowColor = outputColor, this.styleID++);\n  }\n  /** Set a distance of the drop shadow. */\n  get dropShadowDistance() {\n    return this._dropShadowDistance;\n  }\n  set dropShadowDistance(dropShadowDistance) {\n    this._dropShadowDistance !== dropShadowDistance && (this._dropShadowDistance = dropShadowDistance, this.styleID++);\n  }\n  /**\n   * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n   *\n   * Can be an array to create a gradient e.g., `['#000000','#FFFFFF']`\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n   *\n   * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  get fill() {\n    return this._fill;\n  }\n  set fill(fill) {\n    const outputColor = getColor(fill);\n    this._fill !== outputColor && (this._fill = outputColor, this.styleID++);\n  }\n  /**\n   * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n   *\n   * @type {PIXI.TEXT_GRADIENT}\n   */\n  get fillGradientType() {\n    return this._fillGradientType;\n  }\n  set fillGradientType(fillGradientType) {\n    this._fillGradientType !== fillGradientType && (this._fillGradientType = fillGradientType, this.styleID++);\n  }\n  /**\n   * If fill is an array of colours to create a gradient, this array can set the stop points\n   * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n   */\n  get fillGradientStops() {\n    return this._fillGradientStops;\n  }\n  set fillGradientStops(fillGradientStops) {\n    areArraysEqual(this._fillGradientStops, fillGradientStops) || (this._fillGradientStops = fillGradientStops, this.styleID++);\n  }\n  /**\n   * The font family, can be a single font name, or a list of names where the first\n   * is the preferred font.\n   */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(fontFamily) {\n    this.fontFamily !== fontFamily && (this._fontFamily = fontFamily, this.styleID++);\n  }\n  /**\n   * The font size\n   * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(fontSize) {\n    this._fontSize !== fontSize && (this._fontSize = fontSize, this.styleID++);\n  }\n  /**\n   * The font style.\n   *\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(fontStyle) {\n    this._fontStyle !== fontStyle && (this._fontStyle = fontStyle, this.styleID++);\n  }\n  /**\n   * The font variant.\n   *\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(fontVariant) {\n    this._fontVariant !== fontVariant && (this._fontVariant = fontVariant, this.styleID++);\n  }\n  /**\n   * The font weight.\n   *\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(fontWeight) {\n    this._fontWeight !== fontWeight && (this._fontWeight = fontWeight, this.styleID++);\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(letterSpacing) {\n    this._letterSpacing !== letterSpacing && (this._letterSpacing = letterSpacing, this.styleID++);\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(lineHeight) {\n    this._lineHeight !== lineHeight && (this._lineHeight = lineHeight, this.styleID++);\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(leading) {\n    this._leading !== leading && (this._leading = leading, this.styleID++);\n  }\n  /**\n   * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n   * Default is 'miter' (creates a sharp corner).\n   *\n   * @member {'miter'|'round'|'bevel'}\n   */\n  get lineJoin() {\n    return this._lineJoin;\n  }\n  set lineJoin(lineJoin) {\n    this._lineJoin !== lineJoin && (this._lineJoin = lineJoin, this.styleID++);\n  }\n  /**\n   * The miter limit to use when using the 'miter' lineJoin mode.\n   *\n   * This can reduce or increase the spikiness of rendered text.\n   */\n  get miterLimit() {\n    return this._miterLimit;\n  }\n  set miterLimit(miterLimit) {\n    this._miterLimit !== miterLimit && (this._miterLimit = miterLimit, this.styleID++);\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(padding) {\n    this._padding !== padding && (this._padding = padding, this.styleID++);\n  }\n  /**\n   * A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'\n   */\n  get stroke() {\n    return this._stroke;\n  }\n  set stroke(stroke) {\n    const outputColor = getColor(stroke);\n    this._stroke !== outputColor && (this._stroke = outputColor, this.styleID++);\n  }\n  /**\n   * A number that represents the thickness of the stroke.\n   *\n   * @default 0\n   */\n  get strokeThickness() {\n    return this._strokeThickness;\n  }\n  set strokeThickness(strokeThickness) {\n    this._strokeThickness !== strokeThickness && (this._strokeThickness = strokeThickness, this.styleID++);\n  }\n  /**\n   * The baseline of the text that is rendered.\n   *\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(textBaseline) {\n    this._textBaseline !== textBaseline && (this._textBaseline = textBaseline, this.styleID++);\n  }\n  /** Trim transparent borders. */\n  get trim() {\n    return this._trim;\n  }\n  set trim(trim) {\n    this._trim !== trim && (this._trim = trim, this.styleID++);\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   *\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(whiteSpace) {\n    this._whiteSpace !== whiteSpace && (this._whiteSpace = whiteSpace, this.styleID++);\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(wordWrap) {\n    this._wordWrap !== wordWrap && (this._wordWrap = wordWrap, this.styleID++);\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(wordWrapWidth) {\n    this._wordWrapWidth !== wordWrapWidth && (this._wordWrapWidth = wordWrapWidth, this.styleID++);\n  }\n  /**\n   * Generates a font style string to use for `TextMetrics.measureFont()`.\n   *\n   * @return Font style string, for passing to `TextMetrics.measureFont()`\n   */\n  toFontString() {\n    const fontSizeString = typeof this.fontSize == \"number\" ? `${this.fontSize}px` : this.fontSize;\n    let fontFamilies = this.fontFamily;\n    Array.isArray(this.fontFamily) || (fontFamilies = this.fontFamily.split(\",\"));\n    for (let i = fontFamilies.length - 1; i >= 0; i--) {\n      let fontFamily = fontFamilies[i].trim();\n      !/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily) && (fontFamily = `\"${fontFamily}\"`), fontFamilies[i] = fontFamily;\n    }\n    return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(\",\")}`;\n  }\n};\n_TextStyle.defaultStyle = {\n  /**\n   * See {@link PIXI.TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link PIXI.TextStyle.breakWords} */\n  breakWords: !1,\n  /** See {@link PIXI.TextStyle.dropShadow} */\n  dropShadow: !1,\n  /** See {@link PIXI.TextStyle.dropShadowAlpha} */\n  dropShadowAlpha: 1,\n  /**\n   * See {@link PIXI.TextStyle.dropShadowAngle}\n   * @type {number}\n   * @default Math.PI / 6\n   */\n  dropShadowAngle: Math.PI / 6,\n  /** See {@link PIXI.TextStyle.dropShadowBlur} */\n  dropShadowBlur: 0,\n  /**\n   * See {@link PIXI.TextStyle.dropShadowColor}\n   * @type {string|number}\n   */\n  dropShadowColor: \"black\",\n  /** See {@link PIXI.TextStyle.dropShadowDistance} */\n  dropShadowDistance: 5,\n  /**\n   * See {@link PIXI.TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link PIXI.TextStyle.fillGradientType}\n   * @type {PIXI.TEXT_GRADIENT}\n   * @default PIXI.TEXT_GRADIENT.LINEAR_VERTICAL\n   */\n  fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n  /**\n   * See {@link PIXI.TextStyle.fillGradientStops}\n   * @type {number[]}\n   * @default []\n   */\n  fillGradientStops: [],\n  /**\n   * See {@link PIXI.TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link PIXI.TextStyle.fontSize}\n   * @type {number|string} \n   */\n  fontSize: 26,\n  /**\n   * See {@link PIXI.TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link PIXI.TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link PIXI.TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link PIXI.TextStyle.leading} */\n  leading: 0,\n  /** See {@link PIXI.TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link PIXI.TextStyle.lineHeight} */\n  lineHeight: 0,\n  /**\n   * See {@link PIXI.TextStyle.lineJoin}\n   * @type {'miter'|'round'|'bevel'}\n   */\n  lineJoin: \"miter\",\n  /** See {@link PIXI.TextStyle.miterLimit} */\n  miterLimit: 10,\n  /** See {@link PIXI.TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link PIXI.TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: \"black\",\n  /** See {@link PIXI.TextStyle.strokeThickness} */\n  strokeThickness: 0,\n  /**\n   * See {@link PIXI.TextStyle.textBaseline} \n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link PIXI.TextStyle.trim} */\n  trim: !1,\n  /**\n   * See {@link PIXI.TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link PIXI.TextStyle.wordWrap} */\n  wordWrap: !1,\n  /** See {@link PIXI.TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction getColor(color) {\n  const temp = Color.shared, format = (color2) => {\n    const res = temp.setValue(color2);\n    return res.alpha === 1 ? res.toHex() : res.toRgbaString();\n  };\n  return Array.isArray(color) ? color.map(format) : format(color);\n}\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2) || array1.length !== array2.length)\n    return !1;\n  for (let i = 0; i < array1.length; ++i)\n    if (array1[i] !== array2[i])\n      return !1;\n  return !0;\n}\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (const prop in propertyObj)\n    Array.isArray(source[prop]) ? target[prop] = source[prop].slice() : target[prop] = source[prop];\n}\nexport {\n  TextStyle\n};\n//# sourceMappingURL=TextStyle.mjs.map\n"],"names":["genericFontFamilies","_TextStyle","_TextStyle2","style","deepCopyProperties","clonedProperties","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","dropShadowBlur","dropShadowColor","outputColor","getColor","dropShadowDistance","fill","fillGradientType","fillGradientStops","areArraysEqual","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","leading","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","fontSizeString","fontFamilies","i","TEXT_GRADIENT","TextStyle","color","temp","Color","format","color2","res","array1","array2","target","source","propertyObj","prop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,IAAsB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAGC,IAAa,MAAMC,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhC,YAAYC,GAAO;AACjB,SAAK,UAAU,GAAG,KAAK,SAASC,EAAmB,MAAMD,GAAOA,CAAK;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,QAAQ;AACN,UAAME,IAAmB,CAAA;AACzB,WAAOD,EAAmBC,GAAkB,MAAMH,EAAY,YAAY,GAAG,IAAIA,EAAYG,CAAgB;AAAA,EAC9G;AAAA;AAAA,EAED,QAAQ;AACN,IAAAD,EAAmB,MAAMF,EAAY,cAAcA,EAAY,YAAY;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,QAAQ;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,MAAMI,GAAO;AACf,SAAK,WAAWA,MAAU,KAAK,SAASA,GAAO,KAAK;AAAA,EACrD;AAAA;AAAA,EAED,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAY;AACzB,SAAK,gBAAgBA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACzE;AAAA;AAAA,EAED,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAY;AACzB,SAAK,gBAAgBA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACzE;AAAA;AAAA,EAED,IAAI,kBAAkB;AACpB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,gBAAgBC,GAAiB;AACnC,SAAK,qBAAqBA,MAAoB,KAAK,mBAAmBA,GAAiB,KAAK;AAAA,EAC7F;AAAA;AAAA,EAED,IAAI,kBAAkB;AACpB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,gBAAgBC,GAAiB;AACnC,SAAK,qBAAqBA,MAAoB,KAAK,mBAAmBA,GAAiB,KAAK;AAAA,EAC7F;AAAA;AAAA,EAED,IAAI,iBAAiB;AACnB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,eAAeC,GAAgB;AACjC,SAAK,oBAAoBA,MAAmB,KAAK,kBAAkBA,GAAgB,KAAK;AAAA,EACzF;AAAA;AAAA,EAED,IAAI,kBAAkB;AACpB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,gBAAgBC,GAAiB;AACnC,UAAMC,IAAcC,EAASF,CAAe;AAC5C,SAAK,qBAAqBC,MAAgB,KAAK,mBAAmBA,GAAa,KAAK;AAAA,EACrF;AAAA;AAAA,EAED,IAAI,qBAAqB;AACvB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,mBAAmBE,GAAoB;AACzC,SAAK,wBAAwBA,MAAuB,KAAK,sBAAsBA,GAAoB,KAAK;AAAA,EACzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,KAAKC,GAAM;AACb,UAAMH,IAAcC,EAASE,CAAI;AACjC,SAAK,UAAUH,MAAgB,KAAK,QAAQA,GAAa,KAAK;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,mBAAmB;AACrB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,iBAAiBI,GAAkB;AACrC,SAAK,sBAAsBA,MAAqB,KAAK,oBAAoBA,GAAkB,KAAK;AAAA,EACjG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,oBAAoB;AACtB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,kBAAkBC,GAAmB;AACvC,IAAAC,EAAe,KAAK,oBAAoBD,CAAiB,MAAM,KAAK,qBAAqBA,GAAmB,KAAK;AAAA,EAClH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWE,GAAY;AACzB,SAAK,eAAeA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,SAASC,GAAU;AACrB,SAAK,cAAcA,MAAa,KAAK,YAAYA,GAAU,KAAK;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,UAAUC,GAAW;AACvB,SAAK,eAAeA,MAAc,KAAK,aAAaA,GAAW,KAAK;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,cAAc;AAChB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,YAAYC,GAAa;AAC3B,SAAK,iBAAiBA,MAAgB,KAAK,eAAeA,GAAa,KAAK;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAY;AACzB,SAAK,gBAAgBA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACzE;AAAA;AAAA,EAED,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,cAAcC,GAAe;AAC/B,SAAK,mBAAmBA,MAAkB,KAAK,iBAAiBA,GAAe,KAAK;AAAA,EACrF;AAAA;AAAA,EAED,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAY;AACzB,SAAK,gBAAgBA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACzE;AAAA;AAAA,EAED,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,QAAQC,GAAS;AACnB,SAAK,aAAaA,MAAY,KAAK,WAAWA,GAAS,KAAK;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,SAASC,GAAU;AACrB,SAAK,cAAcA,MAAa,KAAK,YAAYA,GAAU,KAAK;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAY;AACzB,SAAK,gBAAgBA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,QAAQC,GAAS;AACnB,SAAK,aAAaA,MAAY,KAAK,WAAWA,GAAS,KAAK;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA,EAID,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,OAAOC,GAAQ;AACjB,UAAMlB,IAAcC,EAASiB,CAAM;AACnC,SAAK,YAAYlB,MAAgB,KAAK,UAAUA,GAAa,KAAK;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,kBAAkB;AACpB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,gBAAgBmB,GAAiB;AACnC,SAAK,qBAAqBA,MAAoB,KAAK,mBAAmBA,GAAiB,KAAK;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,eAAe;AACjB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,aAAaC,GAAc;AAC7B,SAAK,kBAAkBA,MAAiB,KAAK,gBAAgBA,GAAc,KAAK;AAAA,EACjF;AAAA;AAAA,EAED,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,KAAKC,GAAM;AACb,SAAK,UAAUA,MAAS,KAAK,QAAQA,GAAM,KAAK;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAY;AACzB,SAAK,gBAAgBA,MAAe,KAAK,cAAcA,GAAY,KAAK;AAAA,EACzE;AAAA;AAAA,EAED,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,SAASC,GAAU;AACrB,SAAK,cAAcA,MAAa,KAAK,YAAYA,GAAU,KAAK;AAAA,EACjE;AAAA;AAAA,EAED,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,cAAcC,GAAe;AAC/B,SAAK,mBAAmBA,MAAkB,KAAK,iBAAiBA,GAAe,KAAK;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,eAAe;AACb,UAAMC,IAAiB,OAAO,KAAK,YAAY,WAAW,GAAG,KAAK,QAAQ,OAAO,KAAK;AACtF,QAAIC,IAAe,KAAK;AACxB,UAAM,QAAQ,KAAK,UAAU,MAAMA,IAAe,KAAK,WAAW,MAAM,GAAG;AAC3E,aAASC,IAAID,EAAa,SAAS,GAAGC,KAAK,GAAGA,KAAK;AACjD,UAAIpB,IAAamB,EAAaC,CAAC,EAAE,KAAI;AACrC,OAAC,qBAAqB,KAAKpB,CAAU,KAAK,CAACpB,EAAoB,SAASoB,CAAU,MAAMA,IAAa,IAAIA,CAAU,MAAMmB,EAAaC,CAAC,IAAIpB;AAAA,IAC5I;AACD,WAAO,GAAG,KAAK,SAAS,IAAI,KAAK,WAAW,IAAI,KAAK,UAAU,IAAIkB,CAAc,IAAIC,EAAa,KAAK,GAAG,CAAC;AAAA,EAC5G;AACH;AACAtC,EAAW,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxB,OAAO;AAAA;AAAA,EAEP,YAAY;AAAA;AAAA,EAEZ,YAAY;AAAA;AAAA,EAEZ,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjB,iBAAiB,KAAK,KAAK;AAAA;AAAA,EAE3B,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhB,iBAAiB;AAAA;AAAA,EAEjB,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMN,kBAAkBwC,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,mBAAmB,CAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKZ,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAKV,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKb,YAAY;AAAA;AAAA,EAEZ,SAAS;AAAA;AAAA,EAET,eAAe;AAAA;AAAA,EAEf,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKZ,UAAU;AAAA;AAAA,EAEV,YAAY;AAAA;AAAA,EAEZ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKT,QAAQ;AAAA;AAAA,EAER,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,cAAc;AAAA;AAAA,EAEd,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,EAKN,YAAY;AAAA;AAAA,EAEZ,UAAU;AAAA;AAAA,EAEV,eAAe;AACjB;AACG,IAACC,KAAYzC;AAChB,SAASa,EAAS6B,GAAO;AACvB,QAAMC,IAAOC,EAAM,QAAQC,IAAS,CAACC,MAAW;AAC9C,UAAMC,IAAMJ,EAAK,SAASG,CAAM;AAChC,WAAOC,EAAI,UAAU,IAAIA,EAAI,UAAUA,EAAI;EAC/C;AACE,SAAO,MAAM,QAAQL,CAAK,IAAIA,EAAM,IAAIG,CAAM,IAAIA,EAAOH,CAAK;AAChE;AACA,SAASxB,EAAe8B,GAAQC,GAAQ;AACtC,MAAI,CAAC,MAAM,QAAQD,CAAM,KAAK,CAAC,MAAM,QAAQC,CAAM,KAAKD,EAAO,WAAWC,EAAO;AAC/E,WAAO;AACT,WAAS,IAAI,GAAG,IAAID,EAAO,QAAQ,EAAE;AACnC,QAAIA,EAAO,CAAC,MAAMC,EAAO,CAAC;AACxB,aAAO;AACX,SAAO;AACT;AACA,SAAS9C,EAAmB+C,GAAQC,GAAQC,GAAa;AACvD,aAAWC,KAAQD;AACjB,UAAM,QAAQD,EAAOE,CAAI,CAAC,IAAIH,EAAOG,CAAI,IAAIF,EAAOE,CAAI,EAAE,MAAK,IAAKH,EAAOG,CAAI,IAAIF,EAAOE,CAAI;AAClG;","x_google_ignoreList":[0]}