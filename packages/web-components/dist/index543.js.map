{"version":3,"file":"index543.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs"],"sourcesContent":["import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n"],"names":["ParticleBuffer","options","size","properties","staticVertexSize","dynamicVertexSize","i","property","attributeInfo","getAttributeInfoFromFormat","ViewableBuffer","createIndicesForQuads","geometry","Geometry","dynamicOffset","staticOffset","Buffer","BufferUsage","uploadFunction","key","getParticleSyncKey","generateParticleUpdateFunction","particles","uploadStatic","dynamicAttributeBuffer","staticAttributeBuffer","keyGen"],"mappings":"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","x_google_ignoreList":[0]}