{"version":3,"file":"index100.js","sources":["../../../node_modules/.pnpm/@pixi+compressed-textures@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3/node_modules/@pixi/compressed-textures/lib/parsers/parseDDS.mjs"],"sourcesContent":["import { INTERNAL_FORMATS, INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from \"../const.mjs\";\nimport \"../resources/index.mjs\";\nimport { CompressedTextureResource } from \"../resources/CompressedTextureResource.mjs\";\nconst DDS_MAGIC_SIZE = 4, DDS_HEADER_SIZE = 124, DDS_HEADER_PF_SIZE = 32, DDS_HEADER_DX10_SIZE = 20, DDS_MAGIC = 542327876, DDS_FIELDS = {\n  SIZE: 1,\n  FLAGS: 2,\n  HEIGHT: 3,\n  WIDTH: 4,\n  MIPMAP_COUNT: 7,\n  PIXEL_FORMAT: 19\n}, DDS_PF_FIELDS = {\n  SIZE: 0,\n  FLAGS: 1,\n  FOURCC: 2,\n  RGB_BITCOUNT: 3,\n  R_BIT_MASK: 4,\n  G_BIT_MASK: 5,\n  B_BIT_MASK: 6,\n  A_BIT_MASK: 7\n}, DDS_DX10_FIELDS = {\n  DXGI_FORMAT: 0,\n  RESOURCE_DIMENSION: 1,\n  MISC_FLAG: 2,\n  ARRAY_SIZE: 3,\n  MISC_FLAGS2: 4\n}, PF_FLAGS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072, FOURCC_DXT1 = 827611204, FOURCC_DXT3 = 861165636, FOURCC_DXT5 = 894720068, FOURCC_DX10 = 808540228, DDS_RESOURCE_MISC_TEXTURECUBE = 4, FOURCC_TO_FORMAT = {\n  [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n}, DXGI_TO_FORMAT = {\n  // WEBGL_compressed_texture_s3tc\n  70: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  71: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n  73: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  74: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n  76: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  77: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n  // WEBGL_compressed_texture_s3tc_srgb\n  72: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n  75: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n  78: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n  // EXT_texture_compression_bptc\n  // BC6H\n  96: INTERNAL_FORMATS.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n  95: INTERNAL_FORMATS.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n  // BC7\n  98: INTERNAL_FORMATS.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n  99: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\n};\nfunction parseDDS(arrayBuffer) {\n  const data = new Uint32Array(arrayBuffer);\n  if (data[0] !== DDS_MAGIC)\n    throw new Error(\"Invalid DDS file magic word\");\n  const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT), height = header[DDS_FIELDS.HEIGHT], width = header[DDS_FIELDS.WIDTH], mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT], pixelFormat = new Uint32Array(\n    arrayBuffer,\n    DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n    DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT\n  ), formatFlags = pixelFormat[PF_FLAGS];\n  if (formatFlags & DDPF_FOURCC) {\n    const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n    if (fourCC !== FOURCC_DX10) {\n      const internalFormat2 = FOURCC_TO_FORMAT[fourCC], dataOffset2 = DDS_MAGIC_SIZE + DDS_HEADER_SIZE, texData = new Uint8Array(arrayBuffer, dataOffset2);\n      return [new CompressedTextureResource(texData, {\n        format: internalFormat2,\n        width,\n        height,\n        levels: mipmapCount\n        // CompressedTextureResource will separate the levelBuffers for us!\n      })];\n    }\n    const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE, dx10Header = new Uint32Array(\n      data.buffer,\n      dx10Offset,\n      DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT\n    ), dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT], resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION], miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG], arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE], internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n    if (internalFormat === void 0)\n      throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n    if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n      throw new Error(\"DDSParser does not support cubemap textures\");\n    if (resourceDimension === 6)\n      throw new Error(\"DDSParser does not supported 3D texture data\");\n    const imageBuffers = new Array(), dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE + DDS_HEADER_DX10_SIZE;\n    if (arraySize === 1)\n      imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n    else {\n      const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n      let imageSize = 0, levelWidth = width, levelHeight = height;\n      for (let i = 0; i < mipmapCount; i++) {\n        const alignedLevelWidth = Math.max(1, levelWidth + 3 & -4), alignedLevelHeight = Math.max(1, levelHeight + 3 & -4), levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n        imageSize += levelSize, levelWidth = levelWidth >>> 1, levelHeight = levelHeight >>> 1;\n      }\n      let imageOffset = dataOffset;\n      for (let i = 0; i < arraySize; i++)\n        imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize)), imageOffset += imageSize;\n    }\n    return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n      format: internalFormat,\n      width,\n      height,\n      levels: mipmapCount\n    }));\n  }\n  throw formatFlags & DDPF_RGB ? new Error(\"DDSParser does not support uncompressed texture data.\") : formatFlags & DDPF_YUV ? new Error(\"DDSParser does not supported YUV uncompressed texture data.\") : formatFlags & DDPF_LUMINANCE ? new Error(\"DDSParser does not support single-channel (lumninance) texture data!\") : formatFlags & DDPF_ALPHA ? new Error(\"DDSParser does not support single-channel (alpha) texture data!\") : new Error(\"DDSParser failed to load a texture file due to an unknown reason!\");\n}\nexport {\n  parseDDS\n};\n//# sourceMappingURL=parseDDS.mjs.map\n"],"names":["DDS_MAGIC_SIZE","DDS_HEADER_SIZE","DDS_HEADER_PF_SIZE","DDS_HEADER_DX10_SIZE","DDS_MAGIC","DDS_FIELDS","DDS_PF_FIELDS","DDS_DX10_FIELDS","PF_FLAGS","DDPF_ALPHA","DDPF_FOURCC","DDPF_RGB","DDPF_YUV","DDPF_LUMINANCE","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_DX10","DDS_RESOURCE_MISC_TEXTURECUBE","FOURCC_TO_FORMAT","INTERNAL_FORMATS","DXGI_TO_FORMAT","parseDDS","arrayBuffer","data","header","height","width","mipmapCount","pixelFormat","formatFlags","fourCC","internalFormat2","dataOffset2","texData","CompressedTextureResource","dx10Offset","dx10Header","dxgiFormat","resourceDimension","miscFlag","arraySize","internalFormat","imageBuffers","dataOffset","pixelSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","imageSize","levelWidth","levelHeight","alignedLevelWidth","alignedLevelHeight","levelSize","imageOffset","buffer"],"mappings":"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","x_google_ignoreList":[0]}