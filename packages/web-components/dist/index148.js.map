{"version":3,"file":"index148.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/container/Container.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { cullingMixin } from '../../culling/cullingMixin.mjs';\nimport { extensions } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { RAD_TO_DEG, DEG_TO_RAD } from '../../maths/misc/const.mjs';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\nimport { uid } from '../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { cacheAsTextureMixin } from './container-mixins/cacheAsTextureMixin.mjs';\nimport { childrenHelperMixin } from './container-mixins/childrenHelperMixin.mjs';\nimport { collectRenderablesMixin } from './container-mixins/collectRenderablesMixin.mjs';\nimport { effectsMixin } from './container-mixins/effectsMixin.mjs';\nimport { findMixin } from './container-mixins/findMixin.mjs';\nimport { getFastGlobalBoundsMixin } from './container-mixins/getFastGlobalBoundsMixin.mjs';\nimport { bgr2rgb, getGlobalMixin } from './container-mixins/getGlobalMixin.mjs';\nimport { measureMixin } from './container-mixins/measureMixin.mjs';\nimport { onRenderMixin } from './container-mixins/onRenderMixin.mjs';\nimport { sortMixin } from './container-mixins/sortMixin.mjs';\nimport { toLocalGlobalMixin } from './container-mixins/toLocalGlobalMixin.mjs';\nimport { RenderGroup } from './RenderGroup.mjs';\nimport { assignWithIgnore } from './utils/assignWithIgnore.mjs';\n\n\"use strict\";\nconst defaultSkew = new ObservablePoint(null);\nconst defaultPivot = new ObservablePoint(null);\nconst defaultScale = new ObservablePoint(null, 1, 1);\nconst UPDATE_COLOR = 1;\nconst UPDATE_BLEND = 2;\nconst UPDATE_VISIBLE = 4;\nconst UPDATE_TRANSFORM = 8;\nclass Container extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    /** unique id for this container */\n    this.uid = uid(\"renderable\");\n    /** @private */\n    this._updateFlags = 15;\n    // the render group this container owns\n    /** @private */\n    this.renderGroup = null;\n    // the render group this container belongs to\n    /** @private */\n    this.parentRenderGroup = null;\n    // the index of the container in the render group\n    /** @private */\n    this.parentRenderGroupIndex = 0;\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    /** @private */\n    this.didChange = false;\n    // same as above, but for the renderable\n    /** @private */\n    this.didViewUpdate = false;\n    // how deep is the container relative to its render group..\n    // unless the element is the root render group - it will be relative to its parent\n    /** @private */\n    this.relativeRenderGroupDepth = 0;\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    this.children = [];\n    /** The display object container that contains this display object. */\n    this.parent = null;\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    /** @private */\n    this.includeInBuild = true;\n    /** @private */\n    this.measurable = true;\n    /** @private */\n    this.isSimple = true;\n    // / /////////////Transform related props//////////////\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    /**\n     * @internal\n     * @ignore\n     */\n    this.updateTick = -1;\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * @readonly\n     */\n    this.localTransform = new Matrix();\n    /**\n     * The relative group transform is a transform relative to the render group it belongs too. It will include all parent\n     * transforms and up to the render group (think of it as kind of like a stage - but the stage can be nested).\n     * If this container is is self a render group matrix will be relative to its parent render group\n     * @readonly\n     */\n    this.relativeGroupTransform = new Matrix();\n    /**\n     * The group transform is a transform relative to the render group it belongs too.\n     * If this container is render group then this will be an identity matrix. other wise it\n     * will be the same as the relativeGroupTransform.\n     * Use this value when actually rendering things to the screen\n     * @readonly\n     */\n    this.groupTransform = this.relativeGroupTransform;\n    /** If the object has been destroyed via destroy(). If true, it should not be used. */\n    this.destroyed = false;\n    // transform data..\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @internal\n     * @ignore\n     */\n    this._position = new ObservablePoint(this, 0, 0);\n    /**\n     * The scale factor of the object.\n     * @internal\n     * @ignore\n     */\n    this._scale = defaultScale;\n    /**\n     * The pivot point of the container that it rotates around.\n     * @internal\n     * @ignore\n     */\n    this._pivot = defaultPivot;\n    /**\n     * The skew amount, on the x and y axis.\n     * @internal\n     * @ignore\n     */\n    this._skew = defaultSkew;\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._cx = 1;\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._sx = 0;\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._cy = 0;\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._sy = 1;\n    /**\n     * The rotation amount.\n     * @internal\n     * @ignore\n     */\n    this._rotation = 0;\n    // / COLOR related props //////////////\n    // color stored as ABGR\n    this.localColor = 16777215;\n    this.localAlpha = 1;\n    this.groupAlpha = 1;\n    // A\n    this.groupColor = 16777215;\n    // BGR\n    this.groupColorAlpha = 4294967295;\n    // ABGR\n    // / BLEND related props //////////////\n    /**\n     * @internal\n     * @ignore\n     */\n    this.localBlendMode = \"inherit\";\n    /**\n     * @internal\n     * @ignore\n     */\n    this.groupBlendMode = \"normal\";\n    // / VISIBILITY related props //////////////\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    /**\n     * This property holds three bits: culled, visible, renderable\n     * the third bit represents culling (0 = culled, 1 = not culled) 0b100\n     * the second bit represents visibility (0 = not visible, 1 = visible) 0b010\n     * the first bit represents renderable (0 = not renderable, 1 = renderable) 0b001\n     * @internal\n     * @ignore\n     */\n    this.localDisplayStatus = 7;\n    // 0b11 | 0b10 | 0b01 | 0b00\n    /**\n     * @internal\n     * @ignore\n     */\n    this.globalDisplayStatus = 7;\n    /**\n     * A value that increments each time the containe is modified\n     * eg children added, removed etc\n     * @ignore\n     */\n    this._didContainerChangeTick = 0;\n    /**\n     * A value that increments each time the container view is modified\n     * eg texture swap, geometry change etc\n     * @ignore\n     */\n    this._didViewChangeTick = 0;\n    /**\n     * property that tracks if the container transform has changed\n     * @ignore\n     */\n    this._didLocalTransformChangeId = -1;\n    this.effects = [];\n    assignWithIgnore(this, options, {\n      children: true,\n      parent: true,\n      effects: true\n    });\n    options.children?.forEach((child) => this.addChild(child));\n    options.parent?.addChild(this);\n  }\n  /**\n   * Mixes all enumerable properties and methods from a source object to Container.\n   * @param source - The source of properties and methods to mix in.\n   * @deprecated since 8.8.0\n   */\n  static mixin(source) {\n    deprecation(\"8.8.0\", \"Container.mixin is deprecated, please use extensions.mixin instead.\");\n    extensions.mixin(Container, source);\n  }\n  // = 'default';\n  /**\n   * We now use the _didContainerChangeTick and _didViewChangeTick to track changes\n   * @deprecated since 8.2.6\n   * @ignore\n   */\n  set _didChangeId(value) {\n    this._didViewChangeTick = value >> 12 & 4095;\n    this._didContainerChangeTick = value & 4095;\n  }\n  get _didChangeId() {\n    return this._didContainerChangeTick & 4095 | (this._didViewChangeTick & 4095) << 12;\n  }\n  /**\n   * Adds one or more children to the container.\n   *\n   * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n   * @param {...Container} children - The Container(s) to add to the container\n   * @returns {Container} - The first child that was added.\n   */\n  addChild(...children) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChild: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.addChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (child.parent === this) {\n      this.children.splice(this.children.indexOf(child), 1);\n      this.children.push(child);\n      if (renderGroup) {\n        renderGroup.structureDidChange = true;\n      }\n      return child;\n    }\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n    this.children.push(child);\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    child.parent = this;\n    child.didChange = true;\n    child._updateFlags = 15;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    this.emit(\"childAdded\", child, this, this.children.length - 1);\n    child.emit(\"added\", this);\n    this._didViewChangeTick++;\n    if (child._zIndex !== 0) {\n      child.depthOfChildModified();\n    }\n    return child;\n  }\n  /**\n   * Removes one or more children from the container.\n   * @param {...Container} children - The Container(s) to remove\n   * @returns {Container} The first child that was removed.\n   */\n  removeChild(...children) {\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.removeChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const index = this.children.indexOf(child);\n    if (index > -1) {\n      this._didViewChangeTick++;\n      this.children.splice(index, 1);\n      if (this.renderGroup) {\n        this.renderGroup.removeChild(child);\n      } else if (this.parentRenderGroup) {\n        this.parentRenderGroup.removeChild(child);\n      }\n      if (child.parentRenderLayer) {\n        child.parentRenderLayer.detach(child);\n      }\n      child.parent = null;\n      this.emit(\"childRemoved\", child, this, index);\n      child.emit(\"removed\", this);\n    }\n    return child;\n  }\n  /** @ignore */\n  _onUpdate(point) {\n    if (point) {\n      if (point === this._skew) {\n        this._updateSkew();\n      }\n    }\n    this._didContainerChangeTick++;\n    if (this.didChange)\n      return;\n    this.didChange = true;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.onChildUpdate(this);\n    }\n  }\n  set isRenderGroup(value) {\n    if (!!this.renderGroup === value)\n      return;\n    if (value) {\n      this.enableRenderGroup();\n    } else {\n      this.disableRenderGroup();\n    }\n  }\n  /**\n   * Returns true if this container is a render group.\n   * This means that it will be rendered as a separate pass, with its own set of instructions\n   */\n  get isRenderGroup() {\n    return !!this.renderGroup;\n  }\n  /**\n   * Calling this enables a render group for this container.\n   * This means it will be rendered as a separate set of instructions.\n   * The transform of the container will also be handled on the GPU rather than the CPU.\n   */\n  enableRenderGroup() {\n    if (this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    this.renderGroup = BigPool.get(RenderGroup, this);\n    this.groupTransform = Matrix.IDENTITY;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** This will disable the render group for this container. */\n  disableRenderGroup() {\n    if (!this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    BigPool.return(this.renderGroup);\n    this.renderGroup = null;\n    this.groupTransform = this.relativeGroupTransform;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** @ignore */\n  _updateIsSimple() {\n    this.isSimple = !this.renderGroup && this.effects.length === 0;\n  }\n  /**\n   * Current transform of the object based on world (parent) factors.\n   * @readonly\n   */\n  get worldTransform() {\n    this._worldTransform || (this._worldTransform = new Matrix());\n    if (this.renderGroup) {\n      this._worldTransform.copyFrom(this.renderGroup.worldTransform);\n    } else if (this.parentRenderGroup) {\n      this._worldTransform.appendFrom(this.relativeGroupTransform, this.parentRenderGroup.worldTransform);\n    }\n    return this._worldTransform;\n  }\n  /**\n   * The position of the container on the x axis relative to the local coordinates of the parent.\n   * An alias to position.x\n   */\n  get x() {\n    return this._position.x;\n  }\n  set x(value) {\n    this._position.x = value;\n  }\n  /**\n   * The position of the container on the y axis relative to the local coordinates of the parent.\n   * An alias to position.y\n   */\n  get y() {\n    return this._position.y;\n  }\n  set y(value) {\n    this._position.y = value;\n  }\n  /**\n   * The coordinate of the object relative to the local coordinates of the parent.\n   * @since 4.0.0\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position.copyFrom(value);\n  }\n  /**\n   * The rotation of the object in radians.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this._onUpdate(this._skew);\n    }\n  }\n  /**\n   * The angle of the object in degrees.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get angle() {\n    return this.rotation * RAD_TO_DEG;\n  }\n  set angle(value) {\n    this.rotation = value * DEG_TO_RAD;\n  }\n  /**\n   * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n   * is the projection of `pivot` in the parent's local space.\n   *\n   * By default, the pivot is the origin (0, 0).\n   * @since 4.0.0\n   */\n  get pivot() {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint(this, 0, 0);\n    }\n    return this._pivot;\n  }\n  set pivot(value) {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint(this, 0, 0);\n    }\n    typeof value === \"number\" ? this._pivot.set(value) : this._pivot.copyFrom(value);\n  }\n  /**\n   * The skew factor for the object in radians.\n   * @since 4.0.0\n   */\n  get skew() {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint(this, 0, 0);\n    }\n    return this._skew;\n  }\n  set skew(value) {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint(this, 0, 0);\n    }\n    this._skew.copyFrom(value);\n  }\n  /**\n   * The scale factors of this object along the local coordinate axes.\n   *\n   * The default scale is (1, 1).\n   * @since 4.0.0\n   */\n  get scale() {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint(this, 1, 1);\n    }\n    return this._scale;\n  }\n  set scale(value) {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint(this, 0, 0);\n    }\n    typeof value === \"number\" ? this._scale.set(value) : this._scale.copyFrom(value);\n  }\n  /**\n   * The width of the Container, setting this will actually modify the scale to achieve the value set.\n   * @memberof scene.Container#\n   */\n  get width() {\n    return Math.abs(this.scale.x * this.getLocalBounds().width);\n  }\n  set width(value) {\n    const localWidth = this.getLocalBounds().width;\n    this._setWidth(value, localWidth);\n  }\n  /**\n   * The height of the Container, setting this will actually modify the scale to achieve the value set.\n   * @memberof scene.Container#\n   */\n  get height() {\n    return Math.abs(this.scale.y * this.getLocalBounds().height);\n  }\n  set height(value) {\n    const localHeight = this.getLocalBounds().height;\n    this._setHeight(value, localHeight);\n  }\n  /**\n   * Retrieves the size of the container as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the container.\n   * @memberof scene.Container#\n   */\n  getSize(out) {\n    if (!out) {\n      out = {};\n    }\n    const bounds = this.getLocalBounds();\n    out.width = Math.abs(this.scale.x * bounds.width);\n    out.height = Math.abs(this.scale.y * bounds.height);\n    return out;\n  }\n  /**\n   * Sets the size of the container to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   * @memberof scene.Container#\n   */\n  setSize(value, height) {\n    const size = this.getLocalBounds();\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, size.width);\n    height !== void 0 && this._setHeight(height, size.height);\n  }\n  /** Called when the skew or the rotation changes. */\n  _updateSkew() {\n    const rotation = this._rotation;\n    const skew = this._skew;\n    this._cx = Math.cos(rotation + skew._y);\n    this._sx = Math.sin(rotation + skew._y);\n    this._cy = -Math.sin(rotation - skew._x);\n    this._sy = Math.cos(rotation - skew._x);\n  }\n  /**\n   * Updates the transform properties of the container (accepts partial values).\n   * @param {object} opts - The options for updating the transform.\n   * @param {number} opts.x - The x position of the container.\n   * @param {number} opts.y - The y position of the container.\n   * @param {number} opts.scaleX - The scale factor on the x-axis.\n   * @param {number} opts.scaleY - The scale factor on the y-axis.\n   * @param {number} opts.rotation - The rotation of the container, in radians.\n   * @param {number} opts.skewX - The skew factor on the x-axis.\n   * @param {number} opts.skewY - The skew factor on the y-axis.\n   * @param {number} opts.pivotX - The x coordinate of the pivot point.\n   * @param {number} opts.pivotY - The y coordinate of the pivot point.\n   */\n  updateTransform(opts) {\n    this.position.set(\n      typeof opts.x === \"number\" ? opts.x : this.position.x,\n      typeof opts.y === \"number\" ? opts.y : this.position.y\n    );\n    this.scale.set(\n      typeof opts.scaleX === \"number\" ? opts.scaleX || 1 : this.scale.x,\n      typeof opts.scaleY === \"number\" ? opts.scaleY || 1 : this.scale.y\n    );\n    this.rotation = typeof opts.rotation === \"number\" ? opts.rotation : this.rotation;\n    this.skew.set(\n      typeof opts.skewX === \"number\" ? opts.skewX : this.skew.x,\n      typeof opts.skewY === \"number\" ? opts.skewY : this.skew.y\n    );\n    this.pivot.set(\n      typeof opts.pivotX === \"number\" ? opts.pivotX : this.pivot.x,\n      typeof opts.pivotY === \"number\" ? opts.pivotY : this.pivot.y\n    );\n    return this;\n  }\n  /**\n   * Updates the local transform using the given matrix.\n   * @param matrix - The matrix to use for updating the transform.\n   */\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n  }\n  /** Updates the local transform. */\n  updateLocalTransform() {\n    const localTransformChangeId = this._didContainerChangeTick;\n    if (this._didLocalTransformChangeId === localTransformChangeId)\n      return;\n    this._didLocalTransformChangeId = localTransformChangeId;\n    const lt = this.localTransform;\n    const scale = this._scale;\n    const pivot = this._pivot;\n    const position = this._position;\n    const sx = scale._x;\n    const sy = scale._y;\n    const px = pivot._x;\n    const py = pivot._y;\n    lt.a = this._cx * sx;\n    lt.b = this._sx * sx;\n    lt.c = this._cy * sy;\n    lt.d = this._sy * sy;\n    lt.tx = position._x - (px * lt.a + py * lt.c);\n    lt.ty = position._y - (px * lt.b + py * lt.d);\n  }\n  // / ///// color related stuff\n  set alpha(value) {\n    if (value === this.localAlpha)\n      return;\n    this.localAlpha = value;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /** The opacity of the object. */\n  get alpha() {\n    return this.localAlpha;\n  }\n  set tint(value) {\n    const tempColor = Color.shared.setValue(value ?? 16777215);\n    const bgr = tempColor.toBgrNumber();\n    if (bgr === this.localColor)\n      return;\n    this.localColor = bgr;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /**\n   * The tint applied to the sprite. This is a hex value.\n   *\n   * A value of 0xFFFFFF will remove any tint effect.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return bgr2rgb(this.localColor);\n  }\n  // / //////////////// blend related stuff\n  set blendMode(value) {\n    if (this.localBlendMode === value)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_BLEND;\n    this.localBlendMode = value;\n    this._onUpdate();\n  }\n  /**\n   * The blend mode to be applied to the sprite. Apply a value of `'normal'` to reset the blend mode.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this.localBlendMode;\n  }\n  // / ///////// VISIBILITY / RENDERABLE /////////////////\n  /** The visibility of the object. If false the object will not be drawn, and the transform will not be updated. */\n  get visible() {\n    return !!(this.localDisplayStatus & 2);\n  }\n  set visible(value) {\n    const valueNumber = value ? 2 : 0;\n    if ((this.localDisplayStatus & 2) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 2;\n    this._onUpdate();\n  }\n  /** @ignore */\n  get culled() {\n    return !(this.localDisplayStatus & 4);\n  }\n  /** @ignore */\n  set culled(value) {\n    const valueNumber = value ? 0 : 4;\n    if ((this.localDisplayStatus & 4) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 4;\n    this._onUpdate();\n  }\n  /** Can this object be rendered, if false the object will not be drawn but the transform will still be updated. */\n  get renderable() {\n    return !!(this.localDisplayStatus & 1);\n  }\n  set renderable(value) {\n    const valueNumber = value ? 1 : 0;\n    if ((this.localDisplayStatus & 1) === valueNumber)\n      return;\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 1;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._onUpdate();\n  }\n  /** Whether or not the object should be rendered. */\n  get isRenderable() {\n    return this.localDisplayStatus === 7 && this.groupAlpha > 0;\n  }\n  /**\n   * Removes all internal references and listeners as well as removes children from the display list.\n   * Do not use a Container after calling `destroy`.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for children with textures e.g. Sprites. If options.children\n   * is set to true it should destroy the texture of the child sprite\n   * @param {boolean} [options.textureSource=false] - Only used for children with textures e.g. Sprites.\n   * If options.children is set to true it should destroy the texture source of the child sprite\n   * @param {boolean} [options.context=false] - Only used for children with graphicsContexts e.g. Graphics.\n   * If options.children is set to true it should destroy the context of the child graphics\n   */\n  destroy(options = false) {\n    if (this.destroyed)\n      return;\n    this.destroyed = true;\n    let oldChildren;\n    if (this.children.length) {\n      oldChildren = this.removeChildren(0, this.children.length);\n    }\n    this.removeFromParent();\n    this.parent = null;\n    this._maskEffect = null;\n    this._filterEffect = null;\n    this.effects = null;\n    this._position = null;\n    this._scale = null;\n    this._pivot = null;\n    this._skew = null;\n    this.emit(\"destroyed\", this);\n    this.removeAllListeners();\n    const destroyChildren = typeof options === \"boolean\" ? options : options?.children;\n    if (destroyChildren && oldChildren) {\n      for (let i = 0; i < oldChildren.length; ++i) {\n        oldChildren[i].destroy(options);\n      }\n    }\n    this.renderGroup?.destroy();\n    this.renderGroup = null;\n  }\n}\nextensions.mixin(\n  Container,\n  childrenHelperMixin,\n  getFastGlobalBoundsMixin,\n  toLocalGlobalMixin,\n  onRenderMixin,\n  measureMixin,\n  effectsMixin,\n  findMixin,\n  sortMixin,\n  cullingMixin,\n  cacheAsTextureMixin,\n  getGlobalMixin,\n  collectRenderablesMixin\n);\n\nexport { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_TRANSFORM, UPDATE_VISIBLE };\n//# sourceMappingURL=Container.mjs.map\n"],"names":["defaultSkew","ObservablePoint","defaultPivot","defaultScale","UPDATE_COLOR","UPDATE_BLEND","UPDATE_VISIBLE","Container","EventEmitter","options","uid","Matrix","assignWithIgnore","_a","child","_b","source","deprecation","extensions","value","children","v8_0_0","i","renderGroup","index","point","parentRenderGroup","BigPool","RenderGroup","RAD_TO_DEG","DEG_TO_RAD","localWidth","localHeight","out","bounds","height","size","rotation","skew","opts","matrix","localTransformChangeId","lt","scale","pivot","position","sx","sy","px","py","bgr","Color","bgr2rgb","valueNumber","oldChildren","childrenHelperMixin","getFastGlobalBoundsMixin","toLocalGlobalMixin","onRenderMixin","measureMixin","effectsMixin","findMixin","sortMixin","cullingMixin","cacheAsTextureMixin","getGlobalMixin","collectRenderablesMixin"],"mappings":"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","x_google_ignoreList":[0]}