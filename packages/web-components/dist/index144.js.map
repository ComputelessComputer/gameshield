{"version":3,"file":"index144.js","sources":["../../../node_modules/.pnpm/@pixi+assets@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/assets/lib/resolver/Resolver.mjs"],"sourcesContent":["import { utils } from \"@pixi/core\";\nimport { convertToList } from \"../utils/convertToList.mjs\";\nimport { createStringVariations } from \"../utils/createStringVariations.mjs\";\nimport { isSingleItem } from \"../utils/isSingleItem.mjs\";\nclass Resolver {\n  constructor() {\n    this._defaultBundleIdentifierOptions = {\n      connector: \"-\",\n      createBundleAssetId: (bundleId, assetId) => `${bundleId}${this._bundleIdConnector}${assetId}`,\n      extractAssetIdFromBundle: (bundleId, assetBundleId) => assetBundleId.replace(`${bundleId}${this._bundleIdConnector}`, \"\")\n    }, this._bundleIdConnector = this._defaultBundleIdentifierOptions.connector, this._createBundleAssetId = this._defaultBundleIdentifierOptions.createBundleAssetId, this._extractAssetIdFromBundle = this._defaultBundleIdentifierOptions.extractAssetIdFromBundle, this._assetMap = {}, this._preferredOrder = [], this._parsers = [], this._resolverHash = {}, this._bundles = {};\n  }\n  /**\n   * Override how the resolver deals with generating bundle ids.\n   * must be called before any bundles are added\n   * @param bundleIdentifier - the bundle identifier options\n   */\n  setBundleIdentifier(bundleIdentifier) {\n    if (this._bundleIdConnector = bundleIdentifier.connector ?? this._bundleIdConnector, this._createBundleAssetId = bundleIdentifier.createBundleAssetId ?? this._createBundleAssetId, this._extractAssetIdFromBundle = bundleIdentifier.extractAssetIdFromBundle ?? this._extractAssetIdFromBundle, this._extractAssetIdFromBundle(\"foo\", this._createBundleAssetId(\"foo\", \"bar\")) !== \"bar\")\n      throw new Error(\"[Resolver] GenerateBundleAssetId are not working correctly\");\n  }\n  /**\n   * Let the resolver know which assets you prefer to use when resolving assets.\n   * Multiple prefer user defined rules can be added.\n   * @example\n   * resolver.prefer({\n   *     // first look for something with the correct format, and then then correct resolution\n   *     priority: ['format', 'resolution'],\n   *     params:{\n   *         format:'webp', // prefer webp images\n   *         resolution: 2, // prefer a resolution of 2\n   *     }\n   * })\n   * resolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n   * resolver.resolveUrl('foo') // => 'bar@2x.webp'\n   * @param preferOrders - the prefer options\n   */\n  prefer(...preferOrders) {\n    preferOrders.forEach((prefer) => {\n      this._preferredOrder.push(prefer), prefer.priority || (prefer.priority = Object.keys(prefer.params));\n    }), this._resolverHash = {};\n  }\n  /**\n   * Set the base path to prepend to all urls when resolving\n   * @example\n   * resolver.basePath = 'https://home.com/';\n   * resolver.add('foo', 'bar.ong');\n   * resolver.resolveUrl('foo', 'bar.png'); // => 'https://home.com/bar.png'\n   * @param basePath - the base path to use\n   */\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  /**\n   * Set the root path for root-relative URLs. By default the `basePath`'s root is used. If no `basePath` is set, then the\n   * default value for browsers is `window.location.origin`\n   * @example\n   * // Application hosted on https://home.com/some-path/index.html\n   * resolver.basePath = 'https://home.com/some-path/';\n   * resolver.rootPath = 'https://home.com/';\n   * resolver.add('foo', '/bar.png');\n   * resolver.resolveUrl('foo', '/bar.png'); // => 'https://home.com/bar.png'\n   * @param rootPath - the root path to use\n   */\n  set rootPath(rootPath) {\n    this._rootPath = rootPath;\n  }\n  get rootPath() {\n    return this._rootPath;\n  }\n  /**\n   * All the active URL parsers that help the parser to extract information and create\n   * an asset object-based on parsing the URL itself.\n   *\n   * Can be added using the extensions API\n   * @example\n   * resolver.add('foo', [\n   *     {\n   *         resolution: 2,\n   *         format: 'png',\n   *         src: 'image@2x.png',\n   *     },\n   *     {\n   *         resolution:1,\n   *         format:'png',\n   *         src: 'image.png',\n   *     },\n   * ]);\n   *\n   * // With a url parser the information such as resolution and file format could extracted from the url itself:\n   * extensions.add({\n   *     extension: ExtensionType.ResolveParser,\n   *     test: loadTextures.test, // test if url ends in an image\n   *     parse: (value: string) =>\n   *     ({\n   *         resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n   *         format: value.split('.').pop(),\n   *         src: value,\n   *     }),\n   * });\n   *\n   * // Now resolution and format can be extracted from the url\n   * resolver.add('foo', [\n   *     'image@2x.png',\n   *     'image.png',\n   * ]);\n   */\n  get parsers() {\n    return this._parsers;\n  }\n  /** Used for testing, this resets the resolver to its initial state */\n  reset() {\n    this.setBundleIdentifier(this._defaultBundleIdentifierOptions), this._assetMap = {}, this._preferredOrder = [], this._resolverHash = {}, this._rootPath = null, this._basePath = null, this._manifest = null, this._bundles = {}, this._defaultSearchParams = null;\n  }\n  /**\n   * Sets the default URL search parameters for the URL resolver. The urls can be specified as a string or an object.\n   * @param searchParams - the default url parameters to append when resolving urls\n   */\n  setDefaultSearchParams(searchParams) {\n    if (typeof searchParams == \"string\")\n      this._defaultSearchParams = searchParams;\n    else {\n      const queryValues = searchParams;\n      this._defaultSearchParams = Object.keys(queryValues).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryValues[key])}`).join(\"&\");\n    }\n  }\n  /**\n   * Returns the aliases for a given asset\n   * @param asset - the asset to get the aliases for\n   */\n  getAlias(asset) {\n    const { alias, name, src, srcs } = asset;\n    return convertToList(\n      alias || name || src || srcs,\n      (value) => typeof value == \"string\" ? value : Array.isArray(value) ? value.map((v) => v?.src ?? v?.srcs ?? v) : value?.src || value?.srcs ? value.src ?? value.srcs : value,\n      !0\n    );\n  }\n  /**\n   * Add a manifest to the asset resolver. This is a nice way to add all the asset information in one go.\n   * generally a manifest would be built using a tool.\n   * @param manifest - the manifest to add to the resolver\n   */\n  addManifest(manifest) {\n    this._manifest && console.warn(\"[Resolver] Manifest already exists, this will be overwritten\"), this._manifest = manifest, manifest.bundles.forEach((bundle) => {\n      this.addBundle(bundle.name, bundle.assets);\n    });\n  }\n  /**\n   * This adds a bundle of assets in one go so that you can resolve them as a group.\n   * For example you could add a bundle for each screen in you pixi app\n   * @example\n   * resolver.addBundle('animals', {\n   *     bunny: 'bunny.png',\n   *     chicken: 'chicken.png',\n   *     thumper: 'thumper.png',\n   * });\n   *\n   * const resolvedAssets = await resolver.resolveBundle('animals');\n   * @param bundleId - The id of the bundle to add\n   * @param assets - A record of the asset or assets that will be chosen from when loading via the specified key\n   */\n  addBundle(bundleId, assets) {\n    const assetNames = [];\n    Array.isArray(assets) ? assets.forEach((asset) => {\n      const srcs = asset.src ?? asset.srcs, aliases = asset.alias ?? asset.name;\n      let ids;\n      if (typeof aliases == \"string\") {\n        const bundleAssetId = this._createBundleAssetId(bundleId, aliases);\n        assetNames.push(bundleAssetId), ids = [aliases, bundleAssetId];\n      } else {\n        const bundleIds = aliases.map((name) => this._createBundleAssetId(bundleId, name));\n        assetNames.push(...bundleIds), ids = [...aliases, ...bundleIds];\n      }\n      this.add({\n        ...asset,\n        alias: ids,\n        src: srcs\n      });\n    }) : Object.keys(assets).forEach((key) => {\n      const aliases = [key, this._createBundleAssetId(bundleId, key)];\n      if (typeof assets[key] == \"string\")\n        this.add({\n          alias: aliases,\n          src: assets[key]\n        });\n      else if (Array.isArray(assets[key]))\n        this.add({\n          alias: aliases,\n          src: assets[key]\n        });\n      else {\n        const asset = assets[key], assetSrc = asset.src ?? asset.srcs;\n        this.add({\n          ...asset,\n          alias: aliases,\n          src: Array.isArray(assetSrc) ? assetSrc : [assetSrc]\n        });\n      }\n      assetNames.push(...aliases);\n    }), this._bundles[bundleId] = assetNames;\n  }\n  add(aliases, srcs, data, format, loadParser) {\n    const assets = [];\n    typeof aliases == \"string\" || Array.isArray(aliases) && typeof aliases[0] == \"string\" ? (utils.deprecation(\"7.2.0\", `Assets.add now uses an object instead of individual parameters.\nPlease use Assets.add({ alias, src, data, format, loadParser }) instead.`), assets.push({ alias: aliases, src: srcs, data, format, loadParser })) : Array.isArray(aliases) ? assets.push(...aliases) : assets.push(aliases);\n    let keyCheck;\n    keyCheck = (key) => {\n      this.hasKey(key) && console.warn(`[Resolver] already has key: ${key} overwriting`);\n    }, convertToList(assets).forEach((asset) => {\n      const { src, srcs: srcs2 } = asset;\n      let { data: data2, format: format2, loadParser: loadParser2 } = asset;\n      const srcsToUse = convertToList(src || srcs2).map((src2) => typeof src2 == \"string\" ? createStringVariations(src2) : Array.isArray(src2) ? src2 : [src2]), aliasesToUse = this.getAlias(asset);\n      Array.isArray(aliasesToUse) ? aliasesToUse.forEach(keyCheck) : keyCheck(aliasesToUse);\n      const resolvedAssets = [];\n      srcsToUse.forEach((srcs3) => {\n        srcs3.forEach((src2) => {\n          let formattedAsset = {};\n          if (typeof src2 != \"object\") {\n            formattedAsset.src = src2;\n            for (let i = 0; i < this._parsers.length; i++) {\n              const parser = this._parsers[i];\n              if (parser.test(src2)) {\n                formattedAsset = parser.parse(src2);\n                break;\n              }\n            }\n          } else\n            data2 = src2.data ?? data2, format2 = src2.format ?? format2, loadParser2 = src2.loadParser ?? loadParser2, formattedAsset = {\n              ...formattedAsset,\n              ...src2\n            };\n          if (!aliasesToUse)\n            throw new Error(`[Resolver] alias is undefined for this asset: ${formattedAsset.src}`);\n          formattedAsset = this.buildResolvedAsset(formattedAsset, {\n            aliases: aliasesToUse,\n            data: data2,\n            format: format2,\n            loadParser: loadParser2\n          }), resolvedAssets.push(formattedAsset);\n        });\n      }), aliasesToUse.forEach((alias) => {\n        this._assetMap[alias] = resolvedAssets;\n      });\n    });\n  }\n  // TODO: this needs an overload like load did in Assets\n  /**\n   * If the resolver has had a manifest set via setManifest, this will return the assets urls for\n   * a given bundleId or bundleIds.\n   * @example\n   * // Manifest Example\n   * const manifest = {\n   *     bundles: [\n   *         {\n   *             name: 'load-screen',\n   *             assets: [\n   *                 {\n   *                     alias: 'background',\n   *                     src: 'sunset.png',\n   *                 },\n   *                 {\n   *                     alias: 'bar',\n   *                     src: 'load-bar.{png,webp}',\n   *                 },\n   *             ],\n   *         },\n   *         {\n   *             name: 'game-screen',\n   *             assets: [\n   *                 {\n   *                     alias: 'character',\n   *                     src: 'robot.png',\n   *                 },\n   *                 {\n   *                     alias: 'enemy',\n   *                     src: 'bad-guy.png',\n   *                 },\n   *             ],\n   *         },\n   *     ]\n   * };\n   *\n   * resolver.setManifest(manifest);\n   * const resolved = resolver.resolveBundle('load-screen');\n   * @param bundleIds - The bundle ids to resolve\n   * @returns All the bundles assets or a hash of assets for each bundle specified\n   */\n  resolveBundle(bundleIds) {\n    const singleAsset = isSingleItem(bundleIds);\n    bundleIds = convertToList(bundleIds);\n    const out = {};\n    return bundleIds.forEach((bundleId) => {\n      const assetNames = this._bundles[bundleId];\n      if (assetNames) {\n        const results = this.resolve(assetNames), assets = {};\n        for (const key in results) {\n          const asset = results[key];\n          assets[this._extractAssetIdFromBundle(bundleId, key)] = asset;\n        }\n        out[bundleId] = assets;\n      }\n    }), singleAsset ? out[bundleIds[0]] : out;\n  }\n  /**\n   * Does exactly what resolve does, but returns just the URL rather than the whole asset object\n   * @param key - The key or keys to resolve\n   * @returns - The URLs associated with the key(s)\n   */\n  resolveUrl(key) {\n    const result = this.resolve(key);\n    if (typeof key != \"string\") {\n      const out = {};\n      for (const i in result)\n        out[i] = result[i].src;\n      return out;\n    }\n    return result.src;\n  }\n  resolve(keys) {\n    const singleAsset = isSingleItem(keys);\n    keys = convertToList(keys);\n    const result = {};\n    return keys.forEach((key) => {\n      if (!this._resolverHash[key])\n        if (this._assetMap[key]) {\n          let assets = this._assetMap[key];\n          const bestAsset = assets[0], preferredOrder = this._getPreferredOrder(assets);\n          preferredOrder?.priority.forEach((priorityKey) => {\n            preferredOrder.params[priorityKey].forEach((value) => {\n              const filteredAssets = assets.filter((asset) => asset[priorityKey] ? asset[priorityKey] === value : !1);\n              filteredAssets.length && (assets = filteredAssets);\n            });\n          }), this._resolverHash[key] = assets[0] ?? bestAsset;\n        } else\n          this._resolverHash[key] = this.buildResolvedAsset({\n            alias: [key],\n            src: key\n          }, {});\n      result[key] = this._resolverHash[key];\n    }), singleAsset ? result[keys[0]] : result;\n  }\n  /**\n   * Checks if an asset with a given key exists in the resolver\n   * @param key - The key of the asset\n   */\n  hasKey(key) {\n    return !!this._assetMap[key];\n  }\n  /**\n   * Checks if a bundle with the given key exists in the resolver\n   * @param key - The key of the bundle\n   */\n  hasBundle(key) {\n    return !!this._bundles[key];\n  }\n  /**\n   * Internal function for figuring out what prefer criteria an asset should use.\n   * @param assets\n   */\n  _getPreferredOrder(assets) {\n    for (let i = 0; i < assets.length; i++) {\n      const asset = assets[0], preferred = this._preferredOrder.find((preference) => preference.params.format.includes(asset.format));\n      if (preferred)\n        return preferred;\n    }\n    return this._preferredOrder[0];\n  }\n  /**\n   * Appends the default url parameters to the url\n   * @param url - The url to append the default parameters to\n   * @returns - The url with the default parameters appended\n   */\n  _appendDefaultSearchParams(url) {\n    if (!this._defaultSearchParams)\n      return url;\n    const paramConnector = /\\?/.test(url) ? \"&\" : \"?\";\n    return `${url}${paramConnector}${this._defaultSearchParams}`;\n  }\n  buildResolvedAsset(formattedAsset, data) {\n    const { aliases, data: assetData, loadParser, format } = data;\n    return (this._basePath || this._rootPath) && (formattedAsset.src = utils.path.toAbsolute(formattedAsset.src, this._basePath, this._rootPath)), formattedAsset.alias = aliases ?? formattedAsset.alias ?? [formattedAsset.src], formattedAsset.src = this._appendDefaultSearchParams(formattedAsset.src), formattedAsset.data = { ...assetData || {}, ...formattedAsset.data }, formattedAsset.loadParser = loadParser ?? formattedAsset.loadParser, formattedAsset.format = format ?? formattedAsset.format ?? utils.path.extname(formattedAsset.src).slice(1), formattedAsset.srcs = formattedAsset.src, formattedAsset.name = formattedAsset.alias, formattedAsset;\n  }\n}\nexport {\n  Resolver\n};\n//# sourceMappingURL=Resolver.mjs.map\n"],"names":["Resolver","bundleId","assetId","assetBundleId","bundleIdentifier","preferOrders","prefer","basePath","rootPath","searchParams","queryValues","key","asset","alias","name","src","srcs","convertToList","value","v","manifest","bundle","assets","assetNames","aliases","ids","bundleAssetId","bundleIds","assetSrc","data","format","loadParser","utils.deprecation","keyCheck","srcs2","data2","format2","loadParser2","srcsToUse","src2","createStringVariations","aliasesToUse","resolvedAssets","srcs3","formattedAsset","i","parser","singleAsset","isSingleItem","out","results","result","keys","bestAsset","preferredOrder","priorityKey","filteredAssets","preferred","preference","url","paramConnector","assetData","utils.path"],"mappings":"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","x_google_ignoreList":[0]}