{"version":3,"file":"index393.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/maths/matrix/Matrix.mjs"],"sourcesContent":["import { PI_2 } from '../misc/const.mjs';\nimport { Point } from '../point/Point.mjs';\n\n\"use strict\";\nclass Matrix {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    /** An array of the current matrix. Only populated when `toArray` is called */\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    const array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  }\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  }\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const tx = this.tx;\n    const ty = this.ty;\n    const id = 1 / (a * d + c * -b);\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    newPos.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return newPos;\n  }\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  }\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  }\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  }\n  /**\n   * Appends two matrix's and sets the result to this matrix. AB = A * B\n   * @param a - The matrix to append.\n   * @param b - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  appendFrom(a, b) {\n    const a1 = a.a;\n    const b1 = a.b;\n    const c1 = a.c;\n    const d1 = a.d;\n    const tx = a.tx;\n    const ty = a.ty;\n    const a2 = b.a;\n    const b2 = b.b;\n    const c2 = b.c;\n    const d2 = b.d;\n    this.a = a1 * a2 + b1 * c2;\n    this.b = a1 * b2 + b1 * d2;\n    this.c = c1 * a2 + d1 * c2;\n    this.d = c1 * b2 + d1 * d2;\n    this.tx = tx * a2 + ty * c2 + b.tx;\n    this.ty = tx * b2 + ty * d2 + b.ty;\n    return this;\n  }\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  }\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  }\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  decompose(transform) {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const pivot = transform.pivot;\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n    const delta = Math.abs(skewX + skewY);\n    if (delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  }\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  }\n  /** Checks if this matrix is an identity matrix */\n  isIdentity() {\n    return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.tx === 0 && this.ty === 0;\n  }\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  }\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  copyTo(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param matrix - The matrix to copy from.\n   * @returns this\n   */\n  copyFrom(matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  }\n  /**\n   * check to see if two matrices are the same\n   * @param matrix - The matrix to compare to.\n   */\n  equals(matrix) {\n    return matrix.a === this.a && matrix.b === this.b && matrix.c === this.c && matrix.d === this.d && matrix.tx === this.tx && matrix.ty === this.ty;\n  }\n  toString() {\n    return `[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n  }\n  /**\n   * A default (identity) matrix.\n   *\n   * This is a shared object, if you want to modify it consider creating a new `Matrix`\n   * @readonly\n   */\n  static get IDENTITY() {\n    return identityMatrix.identity();\n  }\n  /**\n   * A static Matrix that can be used to avoid creating new objects.\n   * Will always ensure the matrix is reset to identity when requested.\n   * Use this object for fast but temporary calculations, as it may be mutated later on.\n   * This is a different object to the `IDENTITY` object and so can be modified without changing `IDENTITY`.\n   * @readonly\n   */\n  static get shared() {\n    return tempMatrix.identity();\n  }\n}\nconst tempMatrix = new Matrix();\nconst identityMatrix = new Matrix();\n\nexport { Matrix };\n//# sourceMappingURL=Matrix.mjs.map\n"],"names":["Matrix","a","b","c","d","tx","ty","array","transpose","out","pos","newPos","Point","x","y","id","angle","cos","sin","a1","c1","tx1","matrix","b1","d1","a2","b2","c2","d2","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","transform","pivot","delta","PI_2","identityMatrix","tempMatrix"],"mappings":"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","x_google_ignoreList":[0]}