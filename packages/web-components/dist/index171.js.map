{"version":3,"file":"index171.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/textures/resources/BufferResource.mjs"],"sourcesContent":["import { ALPHA_MODES } from \"@pixi/constants\";\nimport { Resource } from \"./Resource.mjs\";\nclass BufferResource extends Resource {\n  /**\n   * @param source - Source buffer\n   * @param options - Options\n   * @param {number} options.width - Width of the texture\n   * @param {number} options.height - Height of the texture\n   * @param {1|2|4|8} [options.unpackAlignment=4] - The alignment of the pixel rows.\n   */\n  constructor(source, options) {\n    const { width, height } = options || {};\n    if (!width || !height)\n      throw new Error(\"BufferResource width or height invalid\");\n    super(width, height), this.data = source, this.unpackAlignment = options.unpackAlignment ?? 4;\n  }\n  /**\n   * Upload the texture to the GPU.\n   * @param renderer - Upload to the renderer\n   * @param baseTexture - Reference to parent texture\n   * @param glTexture - glTexture\n   * @returns - true is success\n   */\n  upload(renderer, baseTexture, glTexture) {\n    const gl = renderer.gl;\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment), gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n    const width = baseTexture.realWidth, height = baseTexture.realHeight;\n    return glTexture.width === width && glTexture.height === height ? gl.texSubImage2D(\n      baseTexture.target,\n      0,\n      0,\n      0,\n      width,\n      height,\n      baseTexture.format,\n      glTexture.type,\n      this.data\n    ) : (glTexture.width = width, glTexture.height = height, gl.texImage2D(\n      baseTexture.target,\n      0,\n      glTexture.internalFormat,\n      width,\n      height,\n      0,\n      baseTexture.format,\n      glTexture.type,\n      this.data\n    )), !0;\n  }\n  /** Destroy and don't use after this. */\n  dispose() {\n    this.data = null;\n  }\n  /**\n   * Used to auto-detect the type of resource.\n   * @param {*} source - The source object\n   * @returns {boolean} `true` if buffer source\n   */\n  static test(source) {\n    return source === null || source instanceof Int8Array || source instanceof Uint8Array || source instanceof Uint8ClampedArray || source instanceof Int16Array || source instanceof Uint16Array || source instanceof Int32Array || source instanceof Uint32Array || source instanceof Float32Array;\n  }\n}\nexport {\n  BufferResource\n};\n//# sourceMappingURL=BufferResource.mjs.map\n"],"names":["BufferResource","Resource","source","options","width","height","renderer","baseTexture","glTexture","gl","ALPHA_MODES"],"mappings":";;AAEA,MAAMA,UAAuBC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpC,YAAYC,GAAQC,GAAS;AAC3B,UAAM,EAAE,OAAAC,GAAO,QAAAC,MAAWF,KAAW,CAAA;AACrC,QAAI,CAACC,KAAS,CAACC;AACb,YAAM,IAAI,MAAM,wCAAwC;AAC1D,UAAMD,GAAOC,CAAM,GAAG,KAAK,OAAOH,GAAQ,KAAK,kBAAkBC,EAAQ,mBAAmB;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAOG,GAAUC,GAAaC,GAAW;AACvC,UAAMC,IAAKH,EAAS;AACpB,IAAAG,EAAG,YAAYA,EAAG,kBAAkB,KAAK,eAAe,GAAGA,EAAG,YAAYA,EAAG,gCAAgCF,EAAY,cAAcG,EAAY,MAAM;AACzJ,UAAMN,IAAQG,EAAY,WAAWF,IAASE,EAAY;AAC1D,WAAOC,EAAU,UAAUJ,KAASI,EAAU,WAAWH,IAASI,EAAG;AAAA,MACnEF,EAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACAH;AAAA,MACAC;AAAA,MACAE,EAAY;AAAA,MACZC,EAAU;AAAA,MACV,KAAK;AAAA,IACX,KAASA,EAAU,QAAQJ,GAAOI,EAAU,SAASH,GAAQI,EAAG;AAAA,MAC1DF,EAAY;AAAA,MACZ;AAAA,MACAC,EAAU;AAAA,MACVJ;AAAA,MACAC;AAAA,MACA;AAAA,MACAE,EAAY;AAAA,MACZC,EAAU;AAAA,MACV,KAAK;AAAA,IACX,IAAQ;AAAA,EACL;AAAA;AAAA,EAED,UAAU;AACR,SAAK,OAAO;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,KAAKN,GAAQ;AAClB,WAAOA,MAAW,QAAQA,aAAkB,aAAaA,aAAkB,cAAcA,aAAkB,qBAAqBA,aAAkB,cAAcA,aAAkB,eAAeA,aAAkB,cAAcA,aAAkB,eAAeA,aAAkB;AAAA,EACrR;AACH;","x_google_ignoreList":[0]}