{"version":3,"file":"index8.js","sources":["../src/games/game-factory.ts"],"sourcesContent":["import { Game, GameType, GameOptions } from '../types';\nimport { PongGame } from './pong-game';\nimport { SnakeGame } from './snake-game';\nimport { BreakoutGame } from './breakout-game';\nimport { DinoRunGame } from './dino-run-game';\n\n/**\n * GameFactory\n * \n * Creates game instances based on the specified type and options.\n */\nexport class GameFactory {\n  /**\n   * Create a game instance\n   */\n  public static createGame(type: GameType, options: GameOptions): Game {\n    // If type is random, select a random game type\n    if (type === 'random') {\n      const types: GameType[] = ['pong', 'snake', 'breakout', 'dino-run'];\n      type = types[Math.floor(Math.random() * types.length)] as GameType;\n    }\n    \n    // Create the appropriate game instance\n    switch (type) {\n      case 'pong':\n        return new PongGame(options);\n      case 'snake':\n        return new SnakeGame(options);\n      case 'breakout':\n        return new BreakoutGame(options);\n      case 'dino-run':\n        return new DinoRunGame(options);\n      default:\n        throw new Error(`Unsupported game type: ${type}`);\n    }\n  }\n}\n"],"names":["GameFactory","type","options","types","PongGame","SnakeGame","BreakoutGame","DinoRunGame"],"mappings":";;;;AAWO,MAAMA,EAAY;AAAA;AAAA;AAAA;AAAA,EAIvB,OAAc,WAAWC,GAAgBC,GAA4B;AAEnE,QAAID,MAAS,UAAU;AACrB,YAAME,IAAoB,CAAC,QAAQ,SAAS,YAAY,UAAU;AAC3D,MAAAF,IAAAE,EAAM,KAAK,MAAM,KAAK,WAAWA,EAAM,MAAM,CAAC;AAAA,IACvD;AAGA,YAAQF,GAAM;AAAA,MACZ,KAAK;AACI,eAAA,IAAIG,EAASF,CAAO;AAAA,MAC7B,KAAK;AACI,eAAA,IAAIG,EAAUH,CAAO;AAAA,MAC9B,KAAK;AACI,eAAA,IAAII,EAAaJ,CAAO;AAAA,MACjC,KAAK;AACI,eAAA,IAAIK,EAAYL,CAAO;AAAA,MAChC;AACE,cAAM,IAAI,MAAM,0BAA0BD,CAAI,EAAE;AAAA,IACpD;AAAA,EACF;AACF;"}