{"version":3,"file":"index63.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/projection/ProjectionSystem.mjs"],"sourcesContent":["import { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Matrix } from \"@pixi/math\";\nclass ProjectionSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this.renderer = renderer, this.destinationFrame = null, this.sourceFrame = null, this.defaultFrame = null, this.projectionMatrix = new Matrix(), this.transform = null;\n  }\n  /**\n   * Updates the projection-matrix based on the sourceFrame â†’ destinationFrame mapping provided.\n   *\n   * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because\n   * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.\n   *\n   * NOTE-2: {@link PIXI.RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture.\n   * It is expected\n   * that you dirty the current bindings when calling this manually.\n   * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,\n   *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.\n   * @param sourceFrame - The rectangle in world space that contains the contents being rendered.\n   * @param resolution - The resolution of the render-target, which is the ratio of\n   *  world-space (or CSS) pixels to physical pixels.\n   * @param root - Whether the render-target is the screen. This is required because rendering to textures\n   *  is y-flipped (i.e. upside down relative to the screen).\n   */\n  update(destinationFrame, sourceFrame, resolution, root) {\n    this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame, this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame, this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root), this.transform && this.projectionMatrix.append(this.transform);\n    const renderer = this.renderer;\n    renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix, renderer.globalUniforms.update(), renderer.shader.shader && renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);\n  }\n  /**\n   * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.\n   * @param _destinationFrame - The destination frame in the render-target.\n   * @param sourceFrame - The source frame in world space.\n   * @param _resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.\n   * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection\n   *  is y-flipped.\n   */\n  calculateProjection(_destinationFrame, sourceFrame, _resolution, root) {\n    const pm = this.projectionMatrix, sign = root ? -1 : 1;\n    pm.identity(), pm.a = 1 / sourceFrame.width * 2, pm.d = sign * (1 / sourceFrame.height * 2), pm.tx = -1 - sourceFrame.x * pm.a, pm.ty = -sign - sourceFrame.y * pm.d;\n  }\n  /**\n   * Sets the transform of the active render target to the given matrix.\n   * @param _matrix - The transformation matrix\n   */\n  setTransform(_matrix) {\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nProjectionSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"projection\"\n};\nextensions.add(ProjectionSystem);\nexport {\n  ProjectionSystem\n};\n//# sourceMappingURL=ProjectionSystem.mjs.map\n"],"names":["ProjectionSystem","renderer","Matrix","destinationFrame","sourceFrame","resolution","root","_destinationFrame","_resolution","pm","sign","_matrix","ExtensionType","extensions"],"mappings":";;;;;;;;;;;AAEA,MAAMA,EAAiB;AAAA;AAAA,EAErB,YAAYC,GAAU;AACpB,SAAK,WAAWA,GAAU,KAAK,mBAAmB,MAAM,KAAK,cAAc,MAAM,KAAK,eAAe,MAAM,KAAK,mBAAmB,IAAIC,KAAU,KAAK,YAAY;AAAA,EACnK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBD,OAAOC,GAAkBC,GAAaC,GAAYC,GAAM;AACtD,SAAK,mBAAmBH,KAAoB,KAAK,oBAAoB,KAAK,cAAc,KAAK,cAAcC,KAAe,KAAK,eAAeD,GAAkB,KAAK,oBAAoB,KAAK,kBAAkB,KAAK,aAAaE,GAAYC,CAAI,GAAG,KAAK,aAAa,KAAK,iBAAiB,OAAO,KAAK,SAAS;AAClT,UAAML,IAAW,KAAK;AACtB,IAAAA,EAAS,eAAe,SAAS,mBAAmB,KAAK,kBAAkBA,EAAS,eAAe,UAAUA,EAAS,OAAO,UAAUA,EAAS,OAAO,iBAAiBA,EAAS,OAAO,OAAO,SAAS,OAAO;AAAA,EAChN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,oBAAoBM,GAAmBH,GAAaI,GAAaF,GAAM;AACrE,UAAMG,IAAK,KAAK,kBAAkBC,IAAOJ,IAAO,KAAK;AACrD,IAAAG,EAAG,SAAQ,GAAIA,EAAG,IAAI,IAAIL,EAAY,QAAQ,GAAGK,EAAG,IAAIC,KAAQ,IAAIN,EAAY,SAAS,IAAIK,EAAG,KAAK,KAAKL,EAAY,IAAIK,EAAG,GAAGA,EAAG,KAAK,CAACC,IAAON,EAAY,IAAIK,EAAG;AAAA,EACpK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,aAAaE,GAAS;AAAA,EACrB;AAAA,EACD,UAAU;AACR,SAAK,WAAW;AAAA,EACjB;AACH;AACAX,EAAiB,YAAY;AAAA,EAC3B,MAAMY,EAAc;AAAA,EACpB,MAAM;AACR;AACAC,EAAW,IAAIb,CAAgB;","x_google_ignoreList":[0]}