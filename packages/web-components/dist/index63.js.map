{"version":3,"file":"index63.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/renderTexture/GenerateTextureSystem.mjs"],"sourcesContent":["import { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Transform, Rectangle, Matrix } from \"@pixi/math\";\nimport { RenderTexture } from \"./RenderTexture.mjs\";\nconst tempTransform = new Transform(), tempRect = new Rectangle();\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this.renderer = renderer, this._tempMatrix = new Matrix();\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n   * @param displayObject - The displayObject the object will be generated from.\n   * @param {IGenerateTextureOptions} options - Generate texture options.\n   * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n   *        if no region is specified, defaults to the local bounds of the displayObject.\n   * @param {number} [options.resolution] - If not given, the renderer's resolution is used.\n   * @param {PIXI.MSAA_QUALITY} [options.multisample] - If not given, the renderer's multisample is used.\n   * @returns a shiny new texture of the display object passed in\n   */\n  generateTexture(displayObject, options) {\n    const { region: manualRegion, ...textureOptions } = options || {}, region = manualRegion?.copyTo(tempRect) || displayObject.getLocalBounds(tempRect, !0), resolution = textureOptions.resolution || this.renderer.resolution;\n    region.width = Math.max(region.width, 1 / resolution), region.height = Math.max(region.height, 1 / resolution), textureOptions.width = region.width, textureOptions.height = region.height, textureOptions.resolution = resolution, textureOptions.multisample ?? (textureOptions.multisample = this.renderer.multisample);\n    const renderTexture = RenderTexture.create(textureOptions);\n    this._tempMatrix.tx = -region.x, this._tempMatrix.ty = -region.y;\n    const transform = displayObject.transform;\n    return displayObject.transform = tempTransform, this.renderer.render(displayObject, {\n      renderTexture,\n      transform: this._tempMatrix,\n      skipUpdateTransform: !!displayObject.parent,\n      blit: !0\n    }), displayObject.transform = transform, renderTexture;\n  }\n  destroy() {\n  }\n}\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.RendererSystem,\n    ExtensionType.CanvasRendererSystem\n  ],\n  name: \"textureGenerator\"\n};\nextensions.add(GenerateTextureSystem);\nexport {\n  GenerateTextureSystem\n};\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n"],"names":["tempTransform","Transform","tempRect","Rectangle","GenerateTextureSystem","renderer","Matrix","displayObject","options","manualRegion","textureOptions","region","resolution","renderTexture","RenderTexture","transform","ExtensionType","extensions"],"mappings":";;;;;;;;;;;;AAGA,MAAMA,IAAgB,IAAIC,EAAS,GAAIC,IAAW,IAAIC,EAAS;AAC/D,MAAMC,EAAsB;AAAA,EAC1B,YAAYC,GAAU;AACpB,SAAK,WAAWA,GAAU,KAAK,cAAc,IAAIC;EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,gBAAgBC,GAAeC,GAAS;AACtC,UAAM,EAAE,QAAQC,GAAc,GAAGC,EAAgB,IAAGF,KAAW,CAAA,GAAIG,KAASF,KAAA,gBAAAA,EAAc,OAAOP,OAAaK,EAAc,eAAeL,GAAU,EAAE,GAAGU,IAAaF,EAAe,cAAc,KAAK,SAAS;AAClN,IAAAC,EAAO,QAAQ,KAAK,IAAIA,EAAO,OAAO,IAAIC,CAAU,GAAGD,EAAO,SAAS,KAAK,IAAIA,EAAO,QAAQ,IAAIC,CAAU,GAAGF,EAAe,QAAQC,EAAO,OAAOD,EAAe,SAASC,EAAO,QAAQD,EAAe,aAAaE,GAAYF,EAAe,gBAAgBA,EAAe,cAAc,KAAK,SAAS;AAC9S,UAAMG,IAAgBC,EAAc,OAAOJ,CAAc;AACzD,SAAK,YAAY,KAAK,CAACC,EAAO,GAAG,KAAK,YAAY,KAAK,CAACA,EAAO;AAC/D,UAAMI,IAAYR,EAAc;AAChC,WAAOA,EAAc,YAAYP,GAAe,KAAK,SAAS,OAAOO,GAAe;AAAA,MAClF,eAAAM;AAAA,MACA,WAAW,KAAK;AAAA,MAChB,qBAAqB,CAAC,CAACN,EAAc;AAAA,MACrC,MAAM;AAAA,IACP,CAAA,GAAGA,EAAc,YAAYQ,GAAWF;AAAA,EAC1C;AAAA,EACD,UAAU;AAAA,EACT;AACH;AACAT,EAAsB,YAAY;AAAA,EAChC,MAAM;AAAA,IACJY,EAAc;AAAA,IACdA,EAAc;AAAA,EACf;AAAA,EACD,MAAM;AACR;AACAC,EAAW,IAAIb,CAAqB;","x_google_ignoreList":[0]}