{"version":3,"file":"index47.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/batch/BatchSystem.mjs"],"sourcesContent":["import { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { ObjectRenderer } from \"./ObjectRenderer.mjs\";\nclass BatchSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.emptyRenderer = new ObjectRenderer(renderer), this.currentRenderer = this.emptyRenderer;\n  }\n  /**\n   * Changes the current renderer to the one given in parameter\n   * @param objectRenderer - The object renderer to use.\n   */\n  setObjectRenderer(objectRenderer) {\n    this.currentRenderer !== objectRenderer && (this.currentRenderer.stop(), this.currentRenderer = objectRenderer, this.currentRenderer.start());\n  }\n  /**\n   * This should be called if you wish to do some custom rendering\n   * It will basically render anything that may be batched up such as sprites\n   */\n  flush() {\n    this.setObjectRenderer(this.emptyRenderer);\n  }\n  /** Reset the system to an empty renderer */\n  reset() {\n    this.setObjectRenderer(this.emptyRenderer);\n  }\n  /**\n   * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n   * sets actual _batchLocation for them\n   * @param arr - arr copy destination\n   * @param maxTextures - number of copied elements\n   */\n  copyBoundTextures(arr, maxTextures) {\n    const { boundTextures } = this.renderer.texture;\n    for (let i = maxTextures - 1; i >= 0; --i)\n      arr[i] = boundTextures[i] || null, arr[i] && (arr[i]._batchLocation = i);\n  }\n  /**\n   * Assigns batch locations to textures in array based on boundTextures state.\n   * All textures in texArray should have `_batchEnabled = _batchId`,\n   * and their count should be less than `maxTextures`.\n   * @param texArray - textures to bound\n   * @param boundTextures - current state of bound textures\n   * @param batchId - marker for _batchEnabled param of textures in texArray\n   * @param maxTextures - number of texture locations to manipulate\n   */\n  boundArray(texArray, boundTextures, batchId, maxTextures) {\n    const { elements, ids, count } = texArray;\n    let j = 0;\n    for (let i = 0; i < count; i++) {\n      const tex = elements[i], loc = tex._batchLocation;\n      if (loc >= 0 && loc < maxTextures && boundTextures[loc] === tex) {\n        ids[i] = loc;\n        continue;\n      }\n      for (; j < maxTextures; ) {\n        const bound = boundTextures[j];\n        if (bound && bound._batchEnabled === batchId && bound._batchLocation === j) {\n          j++;\n          continue;\n        }\n        ids[i] = j, tex._batchLocation = j, boundTextures[j] = tex;\n        break;\n      }\n    }\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.renderer = null;\n  }\n}\nBatchSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"batch\"\n};\nextensions.add(BatchSystem);\nexport {\n  BatchSystem\n};\n//# sourceMappingURL=BatchSystem.mjs.map\n"],"names":["BatchSystem","renderer","ObjectRenderer","objectRenderer","arr","maxTextures","boundTextures","i","texArray","batchId","elements","ids","count","j","tex","loc","bound","ExtensionType","extensions"],"mappings":";;AAEA,MAAMA,EAAY;AAAA;AAAA;AAAA;AAAA,EAIhB,YAAYC,GAAU;AACpB,SAAK,WAAWA,GAAU,KAAK,gBAAgB,IAAIC,EAAeD,CAAQ,GAAG,KAAK,kBAAkB,KAAK;AAAA,EAC1G;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,kBAAkBE,GAAgB;AAChC,SAAK,oBAAoBA,MAAmB,KAAK,gBAAgB,KAAM,GAAE,KAAK,kBAAkBA,GAAgB,KAAK,gBAAgB,MAAO;AAAA,EAC7I;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,SAAK,kBAAkB,KAAK,aAAa;AAAA,EAC1C;AAAA;AAAA,EAED,QAAQ;AACN,SAAK,kBAAkB,KAAK,aAAa;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,kBAAkBC,GAAKC,GAAa;AAClC,UAAM,EAAE,eAAAC,EAAe,IAAG,KAAK,SAAS;AACxC,aAASC,IAAIF,IAAc,GAAGE,KAAK,GAAG,EAAEA;AACtC,MAAAH,EAAIG,CAAC,IAAID,EAAcC,CAAC,KAAK,MAAMH,EAAIG,CAAC,MAAMH,EAAIG,CAAC,EAAE,iBAAiBA;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,WAAWC,GAAUF,GAAeG,GAASJ,GAAa;AACxD,UAAM,EAAE,UAAAK,GAAU,KAAAC,GAAK,OAAAC,EAAK,IAAKJ;AACjC,QAAIK,IAAI;AACR,aAASN,IAAI,GAAGA,IAAIK,GAAOL,KAAK;AAC9B,YAAMO,IAAMJ,EAASH,CAAC,GAAGQ,IAAMD,EAAI;AACnC,UAAIC,KAAO,KAAKA,IAAMV,KAAeC,EAAcS,CAAG,MAAMD,GAAK;AAC/D,QAAAH,EAAIJ,CAAC,IAAIQ;AACT;AAAA,MACD;AACD,aAAOF,IAAIR,KAAe;AACxB,cAAMW,IAAQV,EAAcO,CAAC;AAC7B,YAAIG,KAASA,EAAM,kBAAkBP,KAAWO,EAAM,mBAAmBH,GAAG;AAC1E,UAAAA;AACA;AAAA,QACD;AACD,QAAAF,EAAIJ,CAAC,IAAIM,GAAGC,EAAI,iBAAiBD,GAAGP,EAAcO,CAAC,IAAIC;AACvD;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAID,UAAU;AACR,SAAK,WAAW;AAAA,EACjB;AACH;AACAd,EAAY,YAAY;AAAA,EACtB,MAAMiB,EAAc;AAAA,EACpB,MAAM;AACR;AACAC,EAAW,IAAIlB,CAAW;","x_google_ignoreList":[0]}