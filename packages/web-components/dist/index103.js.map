{"version":3,"file":"index103.js","sources":["../../../node_modules/.pnpm/@pixi+events@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3_/node_modules/@pixi/events/lib/EventSystem.mjs"],"sourcesContent":["import { ExtensionType, extensions } from \"@pixi/core\";\nimport { EventBoundary } from \"./EventBoundary.mjs\";\nimport { EventsTicker } from \"./EventTicker.mjs\";\nimport { FederatedPointerEvent } from \"./FederatedPointerEvent.mjs\";\nimport { FederatedWheelEvent } from \"./FederatedWheelEvent.mjs\";\nconst MOUSE_POINTER_ID = 1, TOUCH_TO_POINTER = {\n  touchstart: \"pointerdown\",\n  touchend: \"pointerup\",\n  touchendoutside: \"pointerupoutside\",\n  touchmove: \"pointermove\",\n  touchcancel: \"pointercancel\"\n}, _EventSystem = class _EventSystem2 {\n  /**\n   * @param {PIXI.Renderer} renderer\n   */\n  constructor(renderer) {\n    this.supportsTouchEvents = \"ontouchstart\" in globalThis, this.supportsPointerEvents = !!globalThis.PointerEvent, this.domElement = null, this.resolution = 1, this.renderer = renderer, this.rootBoundary = new EventBoundary(null), EventsTicker.init(this), this.autoPreventDefault = !0, this.eventsAdded = !1, this.rootPointerEvent = new FederatedPointerEvent(null), this.rootWheelEvent = new FederatedWheelEvent(null), this.cursorStyles = {\n      default: \"inherit\",\n      pointer: \"pointer\"\n    }, this.features = new Proxy({ ..._EventSystem2.defaultEventFeatures }, {\n      set: (target, key, value) => (key === \"globalMove\" && (this.rootBoundary.enableGlobalMoveEvents = value), target[key] = value, !0)\n    }), this.onPointerDown = this.onPointerDown.bind(this), this.onPointerMove = this.onPointerMove.bind(this), this.onPointerUp = this.onPointerUp.bind(this), this.onPointerOverOut = this.onPointerOverOut.bind(this), this.onWheel = this.onWheel.bind(this);\n  }\n  /**\n   * The default interaction mode for all display objects.\n   * @see PIXI.DisplayObject.eventMode\n   * @type {PIXI.EventMode}\n   * @readonly\n   * @since 7.2.0\n   */\n  static get defaultEventMode() {\n    return this._defaultEventMode;\n  }\n  /**\n   * Runner init called, view is available at this point.\n   * @ignore\n   */\n  init(options) {\n    const { view, resolution } = this.renderer;\n    this.setTargetElement(view), this.resolution = resolution, _EventSystem2._defaultEventMode = options.eventMode ?? \"auto\", Object.assign(this.features, options.eventFeatures ?? {}), this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n  }\n  /**\n   * Handle changing resolution.\n   * @ignore\n   */\n  resolutionChange(resolution) {\n    this.resolution = resolution;\n  }\n  /** Destroys all event listeners and detaches the renderer. */\n  destroy() {\n    this.setTargetElement(null), this.renderer = null;\n  }\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   * @param mode - cursor mode, a key from the cursorStyles dictionary\n   */\n  setCursor(mode) {\n    mode = mode || \"default\";\n    let applyStyles = !0;\n    if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas && (applyStyles = !1), this.currentCursor === mode)\n      return;\n    this.currentCursor = mode;\n    const style = this.cursorStyles[mode];\n    if (style)\n      switch (typeof style) {\n        case \"string\":\n          applyStyles && (this.domElement.style.cursor = style);\n          break;\n        case \"function\":\n          style(mode);\n          break;\n        case \"object\":\n          applyStyles && Object.assign(this.domElement.style, style);\n          break;\n      }\n    else\n      applyStyles && typeof mode == \"string\" && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode) && (this.domElement.style.cursor = mode);\n  }\n  /**\n   * The global pointer event.\n   * Useful for getting the pointer position without listening to events.\n   * @since 7.2.0\n   */\n  get pointer() {\n    return this.rootPointerEvent;\n  }\n  /**\n   * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch event.\n   */\n  onPointerDown(nativeEvent) {\n    if (!this.features.click)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    const events = this.normalizeToPointerData(nativeEvent);\n    this.autoPreventDefault && events[0].isNormalized && (nativeEvent.cancelable || !(\"cancelable\" in nativeEvent)) && nativeEvent.preventDefault();\n    for (let i = 0, j = events.length; i < j; i++) {\n      const nativeEvent2 = events[i], federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent2);\n      this.rootBoundary.mapEvent(federatedEvent);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch events.\n   */\n  onPointerMove(nativeEvent) {\n    if (!this.features.move)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered, EventsTicker.pointerMoved();\n    const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch event.\n   */\n  onPointerUp(nativeEvent) {\n    if (!this.features.click)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    let target = nativeEvent.target;\n    nativeEvent.composedPath && nativeEvent.composedPath().length > 0 && (target = nativeEvent.composedPath()[0]);\n    const outside = target !== this.domElement ? \"outside\" : \"\", normalizedEvents = this.normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n      event.type += outside, this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n   * @param nativeEvent - The native mouse/pointer/touch event.\n   */\n  onPointerOverOut(nativeEvent) {\n    if (!this.features.click)\n      return;\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered;\n    const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n    for (let i = 0, j = normalizedEvents.length; i < j; i++) {\n      const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n      this.rootBoundary.mapEvent(event);\n    }\n    this.setCursor(this.rootBoundary.cursor);\n  }\n  /**\n   * Passive handler for `wheel` events on {@link PIXI.EventSystem.domElement this.domElement}.\n   * @param nativeEvent - The native wheel event.\n   */\n  onWheel(nativeEvent) {\n    if (!this.features.wheel)\n      return;\n    const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n    this.rootBoundary.rootTarget = this.renderer.lastObjectRendered, this.rootBoundary.mapEvent(wheelEvent);\n  }\n  /**\n   * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n   *\n   * To deregister the current DOM element without setting a new one, pass {@code null}.\n   * @param element - The new DOM element.\n   */\n  setTargetElement(element) {\n    this.removeEvents(), this.domElement = element, EventsTicker.domElement = element, this.addEvents();\n  }\n  /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n  addEvents() {\n    if (this.eventsAdded || !this.domElement)\n      return;\n    EventsTicker.addTickerListener();\n    const style = this.domElement.style;\n    style && (globalThis.navigator.msPointerEnabled ? (style.msContentZooming = \"none\", style.msTouchAction = \"none\") : this.supportsPointerEvents && (style.touchAction = \"none\")), this.supportsPointerEvents ? (globalThis.document.addEventListener(\"pointermove\", this.onPointerMove, !0), this.domElement.addEventListener(\"pointerdown\", this.onPointerDown, !0), this.domElement.addEventListener(\"pointerleave\", this.onPointerOverOut, !0), this.domElement.addEventListener(\"pointerover\", this.onPointerOverOut, !0), globalThis.addEventListener(\"pointerup\", this.onPointerUp, !0)) : (globalThis.document.addEventListener(\"mousemove\", this.onPointerMove, !0), this.domElement.addEventListener(\"mousedown\", this.onPointerDown, !0), this.domElement.addEventListener(\"mouseout\", this.onPointerOverOut, !0), this.domElement.addEventListener(\"mouseover\", this.onPointerOverOut, !0), globalThis.addEventListener(\"mouseup\", this.onPointerUp, !0), this.supportsTouchEvents && (this.domElement.addEventListener(\"touchstart\", this.onPointerDown, !0), this.domElement.addEventListener(\"touchend\", this.onPointerUp, !0), this.domElement.addEventListener(\"touchmove\", this.onPointerMove, !0))), this.domElement.addEventListener(\"wheel\", this.onWheel, {\n      passive: !0,\n      capture: !0\n    }), this.eventsAdded = !0;\n  }\n  /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n  removeEvents() {\n    if (!this.eventsAdded || !this.domElement)\n      return;\n    EventsTicker.removeTickerListener();\n    const style = this.domElement.style;\n    globalThis.navigator.msPointerEnabled ? (style.msContentZooming = \"\", style.msTouchAction = \"\") : this.supportsPointerEvents && (style.touchAction = \"\"), this.supportsPointerEvents ? (globalThis.document.removeEventListener(\"pointermove\", this.onPointerMove, !0), this.domElement.removeEventListener(\"pointerdown\", this.onPointerDown, !0), this.domElement.removeEventListener(\"pointerleave\", this.onPointerOverOut, !0), this.domElement.removeEventListener(\"pointerover\", this.onPointerOverOut, !0), globalThis.removeEventListener(\"pointerup\", this.onPointerUp, !0)) : (globalThis.document.removeEventListener(\"mousemove\", this.onPointerMove, !0), this.domElement.removeEventListener(\"mousedown\", this.onPointerDown, !0), this.domElement.removeEventListener(\"mouseout\", this.onPointerOverOut, !0), this.domElement.removeEventListener(\"mouseover\", this.onPointerOverOut, !0), globalThis.removeEventListener(\"mouseup\", this.onPointerUp, !0), this.supportsTouchEvents && (this.domElement.removeEventListener(\"touchstart\", this.onPointerDown, !0), this.domElement.removeEventListener(\"touchend\", this.onPointerUp, !0), this.domElement.removeEventListener(\"touchmove\", this.onPointerMove, !0))), this.domElement.removeEventListener(\"wheel\", this.onWheel, !0), this.domElement = null, this.eventsAdded = !1;\n  }\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   * @param  {PIXI.IPointData} point - the point that the result will be stored in\n   * @param  {number} x - the x coord of the position to map\n   * @param  {number} y - the y coord of the position to map\n   */\n  mapPositionToPoint(point, x, y) {\n    const rect = this.domElement.isConnected ? this.domElement.getBoundingClientRect() : {\n      x: 0,\n      y: 0,\n      width: this.domElement.width,\n      height: this.domElement.height,\n      left: 0,\n      top: 0\n    }, resolutionMultiplier = 1 / this.resolution;\n    point.x = (x - rect.left) * (this.domElement.width / rect.width) * resolutionMultiplier, point.y = (y - rect.top) * (this.domElement.height / rect.height) * resolutionMultiplier;\n  }\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   * @param event - The original event data from a touch or mouse event\n   * @returns An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n  normalizeToPointerData(event) {\n    const normalizedEvents = [];\n    if (this.supportsTouchEvents && event instanceof TouchEvent)\n      for (let i = 0, li = event.changedTouches.length; i < li; i++) {\n        const touch = event.changedTouches[i];\n        typeof touch.button > \"u\" && (touch.button = 0), typeof touch.buttons > \"u\" && (touch.buttons = 1), typeof touch.isPrimary > \"u\" && (touch.isPrimary = event.touches.length === 1 && event.type === \"touchstart\"), typeof touch.width > \"u\" && (touch.width = touch.radiusX || 1), typeof touch.height > \"u\" && (touch.height = touch.radiusY || 1), typeof touch.tiltX > \"u\" && (touch.tiltX = 0), typeof touch.tiltY > \"u\" && (touch.tiltY = 0), typeof touch.pointerType > \"u\" && (touch.pointerType = \"touch\"), typeof touch.pointerId > \"u\" && (touch.pointerId = touch.identifier || 0), typeof touch.pressure > \"u\" && (touch.pressure = touch.force || 0.5), typeof touch.twist > \"u\" && (touch.twist = 0), typeof touch.tangentialPressure > \"u\" && (touch.tangentialPressure = 0), typeof touch.layerX > \"u\" && (touch.layerX = touch.offsetX = touch.clientX), typeof touch.layerY > \"u\" && (touch.layerY = touch.offsetY = touch.clientY), touch.isNormalized = !0, touch.type = event.type, normalizedEvents.push(touch);\n      }\n    else if (!globalThis.MouseEvent || event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))) {\n      const tempEvent = event;\n      typeof tempEvent.isPrimary > \"u\" && (tempEvent.isPrimary = !0), typeof tempEvent.width > \"u\" && (tempEvent.width = 1), typeof tempEvent.height > \"u\" && (tempEvent.height = 1), typeof tempEvent.tiltX > \"u\" && (tempEvent.tiltX = 0), typeof tempEvent.tiltY > \"u\" && (tempEvent.tiltY = 0), typeof tempEvent.pointerType > \"u\" && (tempEvent.pointerType = \"mouse\"), typeof tempEvent.pointerId > \"u\" && (tempEvent.pointerId = MOUSE_POINTER_ID), typeof tempEvent.pressure > \"u\" && (tempEvent.pressure = 0.5), typeof tempEvent.twist > \"u\" && (tempEvent.twist = 0), typeof tempEvent.tangentialPressure > \"u\" && (tempEvent.tangentialPressure = 0), tempEvent.isNormalized = !0, normalizedEvents.push(tempEvent);\n    } else\n      normalizedEvents.push(event);\n    return normalizedEvents;\n  }\n  /**\n   * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n   *\n   * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n   * multiple native wheel events.\n   * @param nativeEvent - The native wheel event that occurred on the canvas.\n   * @returns A federated wheel event.\n   */\n  normalizeWheelEvent(nativeEvent) {\n    const event = this.rootWheelEvent;\n    return this.transferMouseData(event, nativeEvent), event.deltaX = nativeEvent.deltaX, event.deltaY = nativeEvent.deltaY, event.deltaZ = nativeEvent.deltaZ, event.deltaMode = nativeEvent.deltaMode, this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY), event.global.copyFrom(event.screen), event.offset.copyFrom(event.screen), event.nativeEvent = nativeEvent, event.type = nativeEvent.type, event;\n  }\n  /**\n   * Normalizes the `nativeEvent` into a federateed {@link PIXI.FederatedPointerEvent}.\n   * @param event\n   * @param nativeEvent\n   */\n  bootstrapEvent(event, nativeEvent) {\n    return event.originalEvent = null, event.nativeEvent = nativeEvent, event.pointerId = nativeEvent.pointerId, event.width = nativeEvent.width, event.height = nativeEvent.height, event.isPrimary = nativeEvent.isPrimary, event.pointerType = nativeEvent.pointerType, event.pressure = nativeEvent.pressure, event.tangentialPressure = nativeEvent.tangentialPressure, event.tiltX = nativeEvent.tiltX, event.tiltY = nativeEvent.tiltY, event.twist = nativeEvent.twist, this.transferMouseData(event, nativeEvent), this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY), event.global.copyFrom(event.screen), event.offset.copyFrom(event.screen), event.isTrusted = nativeEvent.isTrusted, event.type === \"pointerleave\" && (event.type = \"pointerout\"), event.type.startsWith(\"mouse\") && (event.type = event.type.replace(\"mouse\", \"pointer\")), event.type.startsWith(\"touch\") && (event.type = TOUCH_TO_POINTER[event.type] || event.type), event;\n  }\n  /**\n   * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n   * @param event\n   * @param nativeEvent\n   */\n  transferMouseData(event, nativeEvent) {\n    event.isTrusted = nativeEvent.isTrusted, event.srcElement = nativeEvent.srcElement, event.timeStamp = performance.now(), event.type = nativeEvent.type, event.altKey = nativeEvent.altKey, event.button = nativeEvent.button, event.buttons = nativeEvent.buttons, event.client.x = nativeEvent.clientX, event.client.y = nativeEvent.clientY, event.ctrlKey = nativeEvent.ctrlKey, event.metaKey = nativeEvent.metaKey, event.movement.x = nativeEvent.movementX, event.movement.y = nativeEvent.movementY, event.page.x = nativeEvent.pageX, event.page.y = nativeEvent.pageY, event.relatedTarget = null, event.shiftKey = nativeEvent.shiftKey;\n  }\n};\n_EventSystem.extension = {\n  name: \"events\",\n  type: [\n    ExtensionType.RendererSystem,\n    ExtensionType.CanvasRendererSystem\n  ]\n}, /**\n* The event features that are enabled by the EventSystem\n* This option only is available when using **@pixi/events** package\n* (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n* @since 7.2.0\n*/\n_EventSystem.defaultEventFeatures = {\n  move: !0,\n  globalMove: !0,\n  click: !0,\n  wheel: !0\n};\nlet EventSystem = _EventSystem;\nextensions.add(EventSystem);\nexport {\n  EventSystem\n};\n//# sourceMappingURL=EventSystem.mjs.map\n"],"names":["MOUSE_POINTER_ID","TOUCH_TO_POINTER","_EventSystem","_EventSystem2","renderer","EventBoundary","EventsTicker","FederatedPointerEvent","FederatedWheelEvent","target","key","value","options","view","resolution","mode","applyStyles","style","nativeEvent","events","i","j","nativeEvent2","federatedEvent","normalizedEvents","event","outside","wheelEvent","element","point","x","y","rect","resolutionMultiplier","li","touch","tempEvent","ExtensionType","EventSystem","extensions"],"mappings":"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","x_google_ignoreList":[0]}