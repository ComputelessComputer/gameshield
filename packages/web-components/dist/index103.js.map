{"version":3,"file":"index103.js","sources":["../../../node_modules/.pnpm/@pixi+display@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/display/lib/Container.mjs"],"sourcesContent":["import { Matrix, utils, MASK_TYPES } from \"@pixi/core\";\nimport { DisplayObject } from \"./DisplayObject.mjs\";\nconst tempMatrix = new Matrix();\nfunction sortChildren(a, b) {\n  return a.zIndex === b.zIndex ? a._lastSortedIndex - b._lastSortedIndex : a.zIndex - b.zIndex;\n}\nconst _Container = class _Container2 extends DisplayObject {\n  constructor() {\n    super(), this.children = [], this.sortableChildren = _Container2.defaultSortableChildren, this.sortDirty = !1;\n  }\n  /**\n   * Overridable method that can be used by Container subclasses whenever the children array is modified.\n   * @param _length\n   */\n  onChildrenChange(_length) {\n  }\n  /**\n   * Adds one or more children to the container.\n   *\n   * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n   * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n   * @returns {PIXI.DisplayObject} - The first child that was added.\n   */\n  addChild(...children) {\n    if (children.length > 1)\n      for (let i = 0; i < children.length; i++)\n        this.addChild(children[i]);\n    else {\n      const child = children[0];\n      child.parent && child.parent.removeChild(child), child.parent = this, this.sortDirty = !0, child.transform._parentID = -1, this.children.push(child), this._boundsID++, this.onChildrenChange(this.children.length - 1), this.emit(\"childAdded\", child, this, this.children.length - 1), child.emit(\"added\", this);\n    }\n    return children[0];\n  }\n  /**\n   * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n   * If the child is already in this container, it will be moved to the specified index.\n   * @param {PIXI.DisplayObject} child - The child to add.\n   * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n   * @returns {PIXI.DisplayObject} The child that was added.\n   */\n  addChildAt(child, index) {\n    if (index < 0 || index > this.children.length)\n      throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n    return child.parent && child.parent.removeChild(child), child.parent = this, this.sortDirty = !0, child.transform._parentID = -1, this.children.splice(index, 0, child), this._boundsID++, this.onChildrenChange(index), child.emit(\"added\", this), this.emit(\"childAdded\", child, this, index), child;\n  }\n  /**\n   * Swaps the position of 2 Display Objects within this container.\n   * @param child - First display object to swap\n   * @param child2 - Second display object to swap\n   */\n  swapChildren(child, child2) {\n    if (child === child2)\n      return;\n    const index1 = this.getChildIndex(child), index2 = this.getChildIndex(child2);\n    this.children[index1] = child2, this.children[index2] = child, this.onChildrenChange(index1 < index2 ? index1 : index2);\n  }\n  /**\n   * Returns the index position of a child DisplayObject instance\n   * @param child - The DisplayObject instance to identify\n   * @returns - The index position of the child display object to identify\n   */\n  getChildIndex(child) {\n    const index = this.children.indexOf(child);\n    if (index === -1)\n      throw new Error(\"The supplied DisplayObject must be a child of the caller\");\n    return index;\n  }\n  /**\n   * Changes the position of an existing child in the display object container\n   * @param child - The child DisplayObject instance for which you want to change the index number\n   * @param index - The resulting index number for the child display object\n   */\n  setChildIndex(child, index) {\n    if (index < 0 || index >= this.children.length)\n      throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n    const currentIndex = this.getChildIndex(child);\n    utils.removeItems(this.children, currentIndex, 1), this.children.splice(index, 0, child), this.onChildrenChange(index);\n  }\n  /**\n   * Returns the child at the specified index\n   * @param index - The index to get the child at\n   * @returns - The child at the given index, if any.\n   */\n  getChildAt(index) {\n    if (index < 0 || index >= this.children.length)\n      throw new Error(`getChildAt: Index (${index}) does not exist.`);\n    return this.children[index];\n  }\n  /**\n   * Removes one or more children from the container.\n   * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n   * @returns {PIXI.DisplayObject} The first child that was removed.\n   */\n  removeChild(...children) {\n    if (children.length > 1)\n      for (let i = 0; i < children.length; i++)\n        this.removeChild(children[i]);\n    else {\n      const child = children[0], index = this.children.indexOf(child);\n      if (index === -1)\n        return null;\n      child.parent = null, child.transform._parentID = -1, utils.removeItems(this.children, index, 1), this._boundsID++, this.onChildrenChange(index), child.emit(\"removed\", this), this.emit(\"childRemoved\", child, this, index);\n    }\n    return children[0];\n  }\n  /**\n   * Removes a child from the specified index position.\n   * @param index - The index to get the child from\n   * @returns The child that was removed.\n   */\n  removeChildAt(index) {\n    const child = this.getChildAt(index);\n    return child.parent = null, child.transform._parentID = -1, utils.removeItems(this.children, index, 1), this._boundsID++, this.onChildrenChange(index), child.emit(\"removed\", this), this.emit(\"childRemoved\", child, this, index), child;\n  }\n  /**\n   * Removes all children from this container that are within the begin and end indexes.\n   * @param beginIndex - The beginning position.\n   * @param endIndex - The ending position. Default value is size of the container.\n   * @returns - List of removed children\n   */\n  removeChildren(beginIndex = 0, endIndex = this.children.length) {\n    const begin = beginIndex, end = endIndex, range = end - begin;\n    let removed;\n    if (range > 0 && range <= end) {\n      removed = this.children.splice(begin, range);\n      for (let i = 0; i < removed.length; ++i)\n        removed[i].parent = null, removed[i].transform && (removed[i].transform._parentID = -1);\n      this._boundsID++, this.onChildrenChange(beginIndex);\n      for (let i = 0; i < removed.length; ++i)\n        removed[i].emit(\"removed\", this), this.emit(\"childRemoved\", removed[i], this, i);\n      return removed;\n    } else if (range === 0 && this.children.length === 0)\n      return [];\n    throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n  }\n  /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n  sortChildren() {\n    let sortRequired = !1;\n    for (let i = 0, j = this.children.length; i < j; ++i) {\n      const child = this.children[i];\n      child._lastSortedIndex = i, !sortRequired && child.zIndex !== 0 && (sortRequired = !0);\n    }\n    sortRequired && this.children.length > 1 && this.children.sort(sortChildren), this.sortDirty = !1;\n  }\n  /** Updates the transform on all children of this container for rendering. */\n  updateTransform() {\n    this.sortableChildren && this.sortDirty && this.sortChildren(), this._boundsID++, this.transform.updateTransform(this.parent.transform), this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    for (let i = 0, j = this.children.length; i < j; ++i) {\n      const child = this.children[i];\n      child.visible && child.updateTransform();\n    }\n  }\n  /**\n   * Recalculates the bounds of the container.\n   *\n   * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n   * is limited to its mask's bounds or filterArea, if any is applied.\n   */\n  calculateBounds() {\n    this._bounds.clear(), this._calculateBounds();\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (!(!child.visible || !child.renderable))\n        if (child.calculateBounds(), child._mask) {\n          const maskObject = child._mask.isMaskData ? child._mask.maskObject : child._mask;\n          maskObject ? (maskObject.calculateBounds(), this._bounds.addBoundsMask(child._bounds, maskObject._bounds)) : this._bounds.addBounds(child._bounds);\n        } else\n          child.filterArea ? this._bounds.addBoundsArea(child._bounds, child.filterArea) : this._bounds.addBounds(child._bounds);\n    }\n    this._bounds.updateID = this._boundsID;\n  }\n  /**\n   * Retrieves the local bounds of the displayObject as a rectangle object.\n   *\n   * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n   * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n   * @param rect - Optional rectangle to store the result of the bounds calculation.\n   * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n   *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n   * @returns - The rectangular bounding area.\n   */\n  getLocalBounds(rect, skipChildrenUpdate = !1) {\n    const result = super.getLocalBounds(rect);\n    if (!skipChildrenUpdate)\n      for (let i = 0, j = this.children.length; i < j; ++i) {\n        const child = this.children[i];\n        child.visible && child.updateTransform();\n      }\n    return result;\n  }\n  /**\n   * Recalculates the content bounds of this object. This should be overriden to\n   * calculate the bounds of this specific object (not including children).\n   * @protected\n   */\n  _calculateBounds() {\n  }\n  /**\n   * Renders this object and its children with culling.\n   * @protected\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n  _renderWithCulling(renderer) {\n    const sourceFrame = renderer.renderTexture.sourceFrame;\n    if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n      return;\n    let bounds, transform;\n    this.cullArea ? (bounds = this.cullArea, transform = this.worldTransform) : this._render !== _Container2.prototype._render && (bounds = this.getBounds(!0));\n    const projectionTransform = renderer.projection.transform;\n    if (projectionTransform && (transform ? (transform = tempMatrix.copyFrom(transform), transform.prepend(projectionTransform)) : transform = projectionTransform), bounds && sourceFrame.intersects(bounds, transform))\n      this._render(renderer);\n    else if (this.cullArea)\n      return;\n    for (let i = 0, j = this.children.length; i < j; ++i) {\n      const child = this.children[i], childCullable = child.cullable;\n      child.cullable = childCullable || !this.cullArea, child.render(renderer), child.cullable = childCullable;\n    }\n  }\n  /**\n   * Renders the object using the WebGL renderer.\n   *\n   * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n   * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n   * children afterward.\n   *\n   * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n   * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n   * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n   * setting alpha to zero is not recommended for purely skipping rendering.\n   *\n   * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n   * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n   * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n   * Other culling methods might be better suited for a large number static objects; see\n   * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n   * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n   *\n   * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n   * filtering is applied on a container. This does, however, break batching and can affect performance when\n   * masking and filtering is applied extensively throughout the scene graph.\n   * @param renderer - The renderer\n   */\n  render(renderer) {\n    if (!(!this.visible || this.worldAlpha <= 0 || !this.renderable))\n      if (this._mask || this.filters?.length)\n        this.renderAdvanced(renderer);\n      else if (this.cullable)\n        this._renderWithCulling(renderer);\n      else {\n        this._render(renderer);\n        for (let i = 0, j = this.children.length; i < j; ++i)\n          this.children[i].render(renderer);\n      }\n  }\n  /**\n   * Render the object using the WebGL renderer and advanced features.\n   * @param renderer - The renderer\n   */\n  renderAdvanced(renderer) {\n    const filters = this.filters, mask = this._mask;\n    if (filters) {\n      this._enabledFilters || (this._enabledFilters = []), this._enabledFilters.length = 0;\n      for (let i = 0; i < filters.length; i++)\n        filters[i].enabled && this._enabledFilters.push(filters[i]);\n    }\n    const flush = filters && this._enabledFilters?.length || mask && (!mask.isMaskData || mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE));\n    if (flush && renderer.batch.flush(), filters && this._enabledFilters?.length && renderer.filter.push(this, this._enabledFilters), mask && renderer.mask.push(this, this._mask), this.cullable)\n      this._renderWithCulling(renderer);\n    else {\n      this._render(renderer);\n      for (let i = 0, j = this.children.length; i < j; ++i)\n        this.children[i].render(renderer);\n    }\n    flush && renderer.batch.flush(), mask && renderer.mask.pop(this), filters && this._enabledFilters?.length && renderer.filter.pop();\n  }\n  /**\n   * To be overridden by the subclasses.\n   * @param _renderer - The renderer\n   */\n  _render(_renderer) {\n  }\n  /**\n   * Removes all internal references and listeners as well as removes children from the display list.\n   * Do not use a Container after calling `destroy`.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  destroy(options) {\n    super.destroy(), this.sortDirty = !1;\n    const destroyChildren = typeof options == \"boolean\" ? options : options?.children, oldChildren = this.removeChildren(0, this.children.length);\n    if (destroyChildren)\n      for (let i = 0; i < oldChildren.length; ++i)\n        oldChildren[i].destroy(options);\n  }\n  /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return this.scale.x * this.getLocalBounds().width;\n  }\n  set width(value) {\n    const width = this.getLocalBounds().width;\n    width !== 0 ? this.scale.x = value / width : this.scale.x = 1, this._width = value;\n  }\n  /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return this.scale.y * this.getLocalBounds().height;\n  }\n  set height(value) {\n    const height = this.getLocalBounds().height;\n    height !== 0 ? this.scale.y = value / height : this.scale.y = 1, this._height = value;\n  }\n};\n_Container.defaultSortableChildren = !1;\nlet Container = _Container;\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\nexport {\n  Container\n};\n//# sourceMappingURL=Container.mjs.map\n"],"names":["tempMatrix","Matrix","sortChildren","a","b","_Container","_Container2","DisplayObject","_length","children","i","child","index","child2","index1","index2","currentIndex","utils.removeItems","beginIndex","endIndex","begin","end","range","removed","sortRequired","j","maskObject","rect","skipChildrenUpdate","result","renderer","sourceFrame","bounds","transform","projectionTransform","childCullable","_a","filters","mask","flush","MASK_TYPES","_b","_c","_renderer","options","destroyChildren","oldChildren","value","width","height","Container"],"mappings":"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","x_google_ignoreList":[0]}