{"version":3,"file":"index129.js","sources":["../../game-core/dist/src/games/breakout.js"],"sourcesContent":["/**\n * Breakout Game Implementation\n *\n * A classic brick-breaking game where players control a paddle to bounce a ball\n * and break bricks.\n *\n * @packageDocumentation\n */\nimport * as PIXI from 'pixi.js';\nimport { BaseGame } from './base-game';\n/**\n * Class representing a Breakout game implementation\n */\nexport class BreakoutGame extends BaseGame {\n    /**\n     * Create a new BreakoutGame instance\n     *\n     * @param options - Game creation options\n     */\n    constructor(options) {\n        super(options.app, {\n            width: options.width,\n            height: options.height,\n            difficulty: options.difficulty,\n            backgroundColor: options.backgroundColor,\n            assetsPath: options.assetsPath,\n            onLoad: options.onLoad\n        });\n        /** Paddle sprite */\n        this.paddle = null;\n        /** Ball sprite */\n        this.ball = null;\n        /** Ball velocity */\n        this.ballVelocity = { x: 0, y: 0 };\n        /** Array of brick sprites */\n        this.bricks = [];\n        /** Number of lives remaining */\n        this.lives = 3;\n        /** Current score */\n        this.score = 0;\n        /** Text display for score */\n        this.scoreText = null;\n        /** Number of bricks that have been broken */\n        this.bricksBroken = 0;\n        // Set up breakout specific options based on difficulty\n        this.gameConfig = {\n            rows: options.rows || this.getDifficultyBasedRows(),\n            columns: options.columns || this.getDifficultyBasedColumns(),\n            ballSpeed: options.ballSpeed || this.getDifficultyBasedBallSpeed(),\n            paddleWidth: options.paddleWidth || this.getDifficultyBasedPaddleWidth()\n        };\n        // Set completion callback if provided\n        if (options.onComplete) {\n            this.setCompletionCallback(options.onComplete);\n        }\n        // Initialize the game\n        this.init();\n    }\n    /**\n     * Initialize the breakout game\n     *\n     * @protected\n     */\n    initialize() {\n        // This would contain the full implementation with:\n        // - Creating paddle, ball, and bricks\n        // - Setting up collision detection\n        // - Handling user input\n        // - Setting up scorekeeping\n        // For now, we'll just add a placeholder message\n        const comingSoonText = new PIXI.Text('Breakout Game\\n\\nClick to complete demo', {\n            fontFamily: 'Arial',\n            fontSize: 24,\n            fill: 0xffffff,\n            align: 'center'\n        });\n        comingSoonText.anchor.set(0.5);\n        comingSoonText.x = this.config.width / 2;\n        comingSoonText.y = this.config.height / 2;\n        this.container.addChild(comingSoonText);\n        // For demo purposes, add a click handler that completes the game\n        this.container.eventMode = 'static';\n        this.container.cursor = 'pointer';\n        this.container.on('pointerdown', () => {\n            this.complete(true, 85, { demo: true });\n        });\n        // Set up the game ticker\n        this.app.ticker.add(this.update, this);\n    }\n    /**\n     * Update game state on each frame\n     *\n     * @param ticker - PIXI ticker\n     * @protected\n     */\n    update(ticker) {\n        const delta = ticker.deltaTime;\n        // In a full implementation, this would update:\n        // - Ball position based on velocity\n        // - Check for collisions with walls, paddle and bricks\n        // - Update score and lives\n        // - Check for game over or victory conditions\n    }\n    /**\n     * Get rows based on difficulty\n     *\n     * @returns Number of brick rows\n     * @private\n     */\n    getDifficultyBasedRows() {\n        switch (this.config.difficulty) {\n            case 'easy': return 3;\n            case 'medium': return 4;\n            case 'hard': return 5;\n            default: return 4;\n        }\n    }\n    /**\n     * Get columns based on difficulty\n     *\n     * @returns Number of brick columns\n     * @private\n     */\n    getDifficultyBasedColumns() {\n        switch (this.config.difficulty) {\n            case 'easy': return 6;\n            case 'medium': return 8;\n            case 'hard': return 10;\n            default: return 8;\n        }\n    }\n    /**\n     * Get ball speed based on difficulty\n     *\n     * @returns Ball speed multiplier\n     * @private\n     */\n    getDifficultyBasedBallSpeed() {\n        switch (this.config.difficulty) {\n            case 'easy': return 3;\n            case 'medium': return 4;\n            case 'hard': return 5.5;\n            default: return 4;\n        }\n    }\n    /**\n     * Get paddle width based on difficulty\n     *\n     * @returns Paddle width in pixels\n     * @private\n     */\n    getDifficultyBasedPaddleWidth() {\n        switch (this.config.difficulty) {\n            case 'easy': return 100;\n            case 'medium': return 80;\n            case 'hard': return 60;\n            default: return 80;\n        }\n    }\n}\n"],"names":["BreakoutGame","BaseGame","options","comingSoonText","PIXI.Text","ticker"],"mappings":";;;AAaO,MAAMA,UAAqBC,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMvC,YAAYC,GAAS;AACjB,UAAMA,EAAQ,KAAK;AAAA,MACf,OAAOA,EAAQ;AAAA,MACf,QAAQA,EAAQ;AAAA,MAChB,YAAYA,EAAQ;AAAA,MACpB,iBAAiBA,EAAQ;AAAA,MACzB,YAAYA,EAAQ;AAAA,MACpB,QAAQA,EAAQ;AAAA,IAC5B,CAAS,GAED,KAAK,SAAS,MAEd,KAAK,OAAO,MAEZ,KAAK,eAAe,EAAE,GAAG,GAAG,GAAG,KAE/B,KAAK,SAAS,IAEd,KAAK,QAAQ,GAEb,KAAK,QAAQ,GAEb,KAAK,YAAY,MAEjB,KAAK,eAAe,GAEpB,KAAK,aAAa;AAAA,MACd,MAAMA,EAAQ,QAAQ,KAAK,uBAAwB;AAAA,MACnD,SAASA,EAAQ,WAAW,KAAK,0BAA2B;AAAA,MAC5D,WAAWA,EAAQ,aAAa,KAAK,4BAA6B;AAAA,MAClE,aAAaA,EAAQ,eAAe,KAAK,8BAA+B;AAAA,IACpF,GAEYA,EAAQ,cACR,KAAK,sBAAsBA,EAAQ,UAAU,GAGjD,KAAK,KAAI;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa;AAOT,UAAMC,IAAiB,IAAIC,EAAU;AAAA;AAAA,yBAA2C;AAAA,MAC5E,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,IACnB,CAAS;AACD,IAAAD,EAAe,OAAO,IAAI,GAAG,GAC7BA,EAAe,IAAI,KAAK,OAAO,QAAQ,GACvCA,EAAe,IAAI,KAAK,OAAO,SAAS,GACxC,KAAK,UAAU,SAASA,CAAc,GAEtC,KAAK,UAAU,YAAY,UAC3B,KAAK,UAAU,SAAS,WACxB,KAAK,UAAU,GAAG,eAAe,MAAM;AACnC,WAAK,SAAS,IAAM,IAAI,EAAE,MAAM,GAAI,CAAE;AAAA,IAClD,CAAS,GAED,KAAK,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAOE,GAAQ;AACG,IAAAA,EAAO;AAAA,EAMxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,yBAAyB;AACrB,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,4BAA4B;AACxB,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,8BAA8B;AAC1B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,gCAAgC;AAC5B,YAAQ,KAAK,OAAO,YAAU;AAAA,MAC1B,KAAK;AAAQ,eAAO;AAAA,MACpB,KAAK;AAAU,eAAO;AAAA,MACtB,KAAK;AAAQ,eAAO;AAAA,MACpB;AAAS,eAAO;AAAA,IACnB;AAAA,EACJ;AACL;"}