{"version":3,"file":"index509.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildLine.mjs"],"sourcesContent":["import { Point } from '../../../../maths/point/Point.mjs';\nimport { closePointEps, curveEps } from '../const.mjs';\nimport { getOrientationOfPoints } from '../utils/getOrientationOfPoints.mjs';\n\n\"use strict\";\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight;\n  const iy = y - ny * innerWeight;\n  const ox = x + nx * outerWeight;\n  const oy = y + ny * outerWeight;\n  let exx;\n  let eyy;\n  if (clockwise) {\n    exx = ny;\n    eyy = -nx;\n  } else {\n    exx = -ny;\n    eyy = nx;\n  }\n  const eix = ix + exx;\n  const eiy = iy + eyy;\n  const eox = ox + exx;\n  const eoy = oy + eyy;\n  verts.push(eix, eiy);\n  verts.push(eox, eoy);\n  return 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx;\n  const cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y);\n  let angle1 = Math.atan2(ex - cx, ey - cy);\n  if (clockwise && angle0 < angle1) {\n    angle0 += Math.PI * 2;\n  } else if (!clockwise && angle0 > angle1) {\n    angle1 += Math.PI * 2;\n  }\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0;\n  const absAngleDiff = Math.abs(angleDiff);\n  const radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y);\n  const segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1;\n  const angleInc = angleDiff / segCount;\n  startAngle += angleInc;\n  if (clockwise) {\n    verts.push(cx, cy);\n    verts.push(sx, sy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx, cy);\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n    }\n    verts.push(cx, cy);\n    verts.push(ex, ey);\n  } else {\n    verts.push(sx, sy);\n    verts.push(cx, cy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n      verts.push(cx, cy);\n    }\n    verts.push(ex, ey);\n    verts.push(cx, cy);\n  }\n  return segCount * 2;\n}\nfunction buildLine(points, lineStyle, flipAlignment, closed, vertices, indices) {\n  const eps = closePointEps;\n  if (points.length === 0) {\n    return;\n  }\n  const style = lineStyle;\n  let alignment = style.alignment;\n  if (lineStyle.alignment !== 0.5) {\n    let orientation = getOrientationOfPoints(points);\n    if (flipAlignment)\n      orientation *= -1;\n    alignment = (alignment - 0.5) * orientation + 0.5;\n  }\n  const firstPoint = new Point(points[0], points[1]);\n  const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n  const closedShape = closed;\n  const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice();\n    if (closedPath) {\n      points.pop();\n      points.pop();\n      lastPoint.set(points[points.length - 2], points[points.length - 1]);\n    }\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n    const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n  const verts = vertices;\n  const length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2;\n  const width = style.width / 2;\n  const widthSquared = width * width;\n  const miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0];\n  let y0 = points[1];\n  let x1 = points[2];\n  let y1 = points[3];\n  let x2 = 0;\n  let y2 = 0;\n  let perpX = -(y0 - y1);\n  let perpY = x0 - x1;\n  let perp1x = 0;\n  let perp1y = 0;\n  let dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  const ratio = alignment;\n  const innerWeight = (1 - ratio) * 2;\n  const outerWeight = ratio * 2;\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x0 - perpX * (innerWeight - outerWeight) * 0.5,\n        y0 - perpY * (innerWeight - outerWeight) * 0.5,\n        x0 - perpX * innerWeight,\n        y0 - perpY * innerWeight,\n        x0 + perpX * outerWeight,\n        y0 + perpY * outerWeight,\n        verts,\n        true\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n    }\n  }\n  verts.push(\n    x0 - perpX * innerWeight,\n    y0 - perpY * innerWeight\n  );\n  verts.push(\n    x0 + perpX * outerWeight,\n    y0 + perpY * outerWeight\n  );\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2];\n    y0 = points[(i - 1) * 2 + 1];\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    x2 = points[(i + 1) * 2];\n    y2 = points[(i + 1) * 2 + 1];\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n    dist = Math.sqrt(perpX * perpX + perpY * perpY);\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n    perp1x = -(y1 - y2);\n    perp1y = x1 - x2;\n    dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y);\n    perp1x /= dist;\n    perp1y /= dist;\n    perp1x *= width;\n    perp1y *= width;\n    const dx0 = x1 - x0;\n    const dy0 = y0 - y1;\n    const dx1 = x1 - x2;\n    const dy1 = y2 - y1;\n    const dot = dx0 * dx1 + dy0 * dy1;\n    const cross = dy0 * dx1 - dy1 * dx0;\n    const clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight\n      );\n      verts.push(\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight\n      );\n      if (dot >= 0) {\n        if (style.join === \"round\") {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n        } else {\n          indexCount += 2;\n        }\n        verts.push(\n          x1 - perp1x * outerWeight,\n          y1 - perp1y * outerWeight\n        );\n        verts.push(\n          x1 + perp1x * innerWeight,\n          y1 + perp1y * innerWeight\n        );\n      }\n      continue;\n    }\n    const c1 = (-perpX + x0) * (-perpY + y1) - (-perpX + x1) * (-perpY + y0);\n    const c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2);\n    const px = (dx0 * c2 - dx1 * c1) / cross;\n    const py = (dy1 * c1 - dy0 * c2) / cross;\n    const pDist = (px - x1) * (px - x1) + (py - y1) * (py - y1);\n    const imx = x1 + (px - x1) * innerWeight;\n    const imy = y1 + (py - y1) * innerWeight;\n    const omx = x1 - (px - x1) * outerWeight;\n    const omy = y1 - (py - y1) * outerWeight;\n    const smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1);\n    const insideWeight = clockwise ? innerWeight : outerWeight;\n    const smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared;\n    const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n    if (insideMiterOk) {\n      if (style.join === \"bevel\" || pDist / widthSquared > miterLimitSquared) {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n        indexCount += 2;\n      } else if (style.join === \"round\") {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 4;\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n      } else {\n        verts.push(imx, imy);\n        verts.push(omx, omy);\n      }\n    } else {\n      verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n      verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n      if (style.join === \"round\") {\n        if (clockwise) {\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 2;\n        } else {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 2;\n        }\n      } else if (style.join === \"miter\" && pDist / widthSquared <= miterLimitSquared) {\n        if (clockwise) {\n          verts.push(omx, omy);\n          verts.push(omx, omy);\n        } else {\n          verts.push(imx, imy);\n          verts.push(imx, imy);\n        }\n        indexCount += 2;\n      }\n      verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n      verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n      indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2];\n  y0 = points[(length - 2) * 2 + 1];\n  x1 = points[(length - 1) * 2];\n  y1 = points[(length - 1) * 2 + 1];\n  perpX = -(y0 - y1);\n  perpY = x0 - x1;\n  dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n  verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x1 - perpX * (innerWeight - outerWeight) * 0.5,\n        y1 - perpY * (innerWeight - outerWeight) * 0.5,\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight,\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight,\n        verts,\n        false\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n    }\n  }\n  const eps2 = curveEps * curveEps;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i) {\n    x0 = verts[i * 2];\n    y0 = verts[i * 2 + 1];\n    x1 = verts[(i + 1) * 2];\n    y1 = verts[(i + 1) * 2 + 1];\n    x2 = verts[(i + 2) * 2];\n    y2 = verts[(i + 2) * 2 + 1];\n    if (Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) {\n      continue;\n    }\n    indices.push(i, i + 1, i + 2);\n  }\n}\n\nexport { buildLine };\n//# sourceMappingURL=buildLine.mjs.map\n"],"names":["square","x","y","nx","ny","innerWeight","outerWeight","clockwise","verts","ix","iy","ox","oy","exx","eyy","eix","eiy","eox","eoy","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","angle1","startAngle","angleDiff","absAngleDiff","radius","segCount","angleInc","i","angle","buildLine","points","lineStyle","flipAlignment","closed","vertices","indices","eps","closePointEps","style","alignment","orientation","getOrientationOfPoints","firstPoint","Point","lastPoint","closedShape","closedPath","midPointX","midPointY","length","indexCount","indexStart","width","widthSquared","miterLimitSquared","x0","y0","x1","y1","x2","y2","perpX","perpY","perp1x","perp1y","dist","ratio","dx0","dy0","dx1","dy1","dot","cross","c1","c2","px","py","pDist","imx","imy","omx","omy","smallerInsideSegmentSq","insideWeight","smallerInsideDiagonalSq","eps2","curveEps"],"mappings":"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","x_google_ignoreList":[0]}