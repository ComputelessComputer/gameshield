{"version":3,"file":"index563.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      let key = style.styleKey;\n      key = key.substring(0, key.lastIndexOf(\"-\"));\n      fontFamilyKey = `${key}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.remove(fontFamilyKey);\n      });\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n//# sourceMappingURL=BitmapFontManager.mjs.map\n"],"names":["fontCount","BitmapFontManagerClass","text","style","fontFamilyKey","overrideFill","key","Cache","fnt","DynamicBitmapFont","warn","dynamicFont","_a","trimEnd","bitmapFont","getBitmapTextLayout","args","options","_b","_c","_d","deprecation","v8_0_0","name","textStyle","TextStyle","font","flatChars","resolveCharacters","cacheKey","BitmapFontManager"],"mappings":"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","x_google_ignoreList":[0]}