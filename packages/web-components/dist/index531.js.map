{"version":3,"file":"index531.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGStyle.mjs"],"sourcesContent":["import { Color } from '../../../../color/Color.mjs';\nimport { extractSvgUrlId } from './utils/extractSvgUrlId.mjs';\n\n\"use strict\";\nconst styleAttributes = {\n  // Fill properties\n  fill: { type: \"paint\", default: 0 },\n  // Fill color/gradient\n  \"fill-opacity\": { type: \"number\", default: 1 },\n  // Fill transparency\n  // Stroke properties\n  stroke: { type: \"paint\", default: 0 },\n  // Stroke color/gradient\n  \"stroke-width\": { type: \"number\", default: 1 },\n  // Width of stroke\n  \"stroke-opacity\": { type: \"number\", default: 1 },\n  // Stroke transparency\n  \"stroke-linecap\": { type: \"string\", default: \"butt\" },\n  // End cap style: butt, round, square\n  \"stroke-linejoin\": { type: \"string\", default: \"miter\" },\n  // Join style: miter, round, bevel\n  \"stroke-miterlimit\": { type: \"number\", default: 10 },\n  // Limit on miter join sharpness\n  \"stroke-dasharray\": { type: \"string\", default: \"none\" },\n  // Dash pattern\n  \"stroke-dashoffset\": { type: \"number\", default: 0 },\n  // Offset for dash pattern\n  // Global properties\n  opacity: { type: \"number\", default: 1 }\n  // Overall opacity\n};\nfunction parseSVGStyle(svg, session) {\n  const style = svg.getAttribute(\"style\");\n  const strokeStyle = {};\n  const fillStyle = {};\n  const result = {\n    strokeStyle,\n    fillStyle,\n    useFill: false,\n    useStroke: false\n  };\n  for (const key in styleAttributes) {\n    const attribute = svg.getAttribute(key);\n    if (attribute) {\n      parseAttribute(session, result, key, attribute.trim());\n    }\n  }\n  if (style) {\n    const styleParts = style.split(\";\");\n    for (let i = 0; i < styleParts.length; i++) {\n      const stylePart = styleParts[i].trim();\n      const [key, value] = stylePart.split(\":\");\n      if (styleAttributes[key]) {\n        parseAttribute(session, result, key, value.trim());\n      }\n    }\n  }\n  return {\n    strokeStyle: result.useStroke ? strokeStyle : null,\n    fillStyle: result.useFill ? fillStyle : null,\n    useFill: result.useFill,\n    useStroke: result.useStroke\n  };\n}\nfunction parseAttribute(session, result, id, value) {\n  switch (id) {\n    case \"stroke\":\n      if (value !== \"none\") {\n        if (value.startsWith(\"url(\")) {\n          const id2 = extractSvgUrlId(value);\n          result.strokeStyle.fill = session.defs[id2];\n        } else {\n          result.strokeStyle.color = Color.shared.setValue(value).toNumber();\n        }\n        result.useStroke = true;\n      }\n      break;\n    case \"stroke-width\":\n      result.strokeStyle.width = Number(value);\n      break;\n    case \"fill\":\n      if (value !== \"none\") {\n        if (value.startsWith(\"url(\")) {\n          const id2 = extractSvgUrlId(value);\n          result.fillStyle.fill = session.defs[id2];\n        } else {\n          result.fillStyle.color = Color.shared.setValue(value).toNumber();\n        }\n        result.useFill = true;\n      }\n      break;\n    case \"fill-opacity\":\n      result.fillStyle.alpha = Number(value);\n      break;\n    case \"stroke-opacity\":\n      result.strokeStyle.alpha = Number(value);\n      break;\n    case \"opacity\":\n      result.fillStyle.alpha = Number(value);\n      result.strokeStyle.alpha = Number(value);\n      break;\n  }\n}\n\nexport { parseAttribute, parseSVGStyle, styleAttributes };\n//# sourceMappingURL=parseSVGStyle.mjs.map\n"],"names":["styleAttributes","parseSVGStyle","svg","session","style","strokeStyle","fillStyle","result","key","attribute","parseAttribute","styleParts","stylePart","value","id","id2","extractSvgUrlId","Color"],"mappings":"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","x_google_ignoreList":[0]}