{"version":3,"file":"index183.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/geometry/ViewableBuffer.mjs"],"sourcesContent":["class ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    typeof sizeOrBuffer == \"number\" ? this.rawBinaryData = new ArrayBuffer(sizeOrBuffer) : sizeOrBuffer instanceof Uint8Array ? this.rawBinaryData = sizeOrBuffer.buffer : this.rawBinaryData = sizeOrBuffer, this.uint32View = new Uint32Array(this.rawBinaryData), this.float32View = new Float32Array(this.rawBinaryData);\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    return this._int8View || (this._int8View = new Int8Array(this.rawBinaryData)), this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    return this._uint8View || (this._uint8View = new Uint8Array(this.rawBinaryData)), this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    return this._int16View || (this._int16View = new Int16Array(this.rawBinaryData)), this._int16View;\n  }\n  /** View on the raw binary data as a `Uint16Array`. */\n  get uint16View() {\n    return this._uint16View || (this._uint16View = new Uint16Array(this.rawBinaryData)), this._uint16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    return this._int32View || (this._int32View = new Int32Array(this.rawBinaryData)), this._int32View;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null, this._int8View = null, this._uint8View = null, this._int16View = null, this._uint16View = null, this._int32View = null, this.uint32View = null, this.float32View = null;\n  }\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\nexport {\n  ViewableBuffer\n};\n//# sourceMappingURL=ViewableBuffer.mjs.map\n"],"names":["ViewableBuffer","sizeOrBuffer","type"],"mappings":"AAAA,MAAMA,EAAe;AAAA,EACnB,YAAYC,GAAc;AACxB,WAAOA,KAAgB,WAAW,KAAK,gBAAgB,IAAI,YAAYA,CAAY,IAAIA,aAAwB,aAAa,KAAK,gBAAgBA,EAAa,SAAS,KAAK,gBAAgBA,GAAc,KAAK,aAAa,IAAI,YAAY,KAAK,aAAa,GAAG,KAAK,cAAc,IAAI,aAAa,KAAK,aAAa;AAAA,EACxT;AAAA;AAAA,EAED,IAAI,WAAW;AACb,WAAO,KAAK,cAAc,KAAK,YAAY,IAAI,UAAU,KAAK,aAAa,IAAI,KAAK;AAAA,EACrF;AAAA;AAAA,EAED,IAAI,YAAY;AACd,WAAO,KAAK,eAAe,KAAK,aAAa,IAAI,WAAW,KAAK,aAAa,IAAI,KAAK;AAAA,EACxF;AAAA;AAAA,EAED,IAAI,YAAY;AACd,WAAO,KAAK,eAAe,KAAK,aAAa,IAAI,WAAW,KAAK,aAAa,IAAI,KAAK;AAAA,EACxF;AAAA;AAAA,EAED,IAAI,aAAa;AACf,WAAO,KAAK,gBAAgB,KAAK,cAAc,IAAI,YAAY,KAAK,aAAa,IAAI,KAAK;AAAA,EAC3F;AAAA;AAAA,EAED,IAAI,YAAY;AACd,WAAO,KAAK,eAAe,KAAK,aAAa,IAAI,WAAW,KAAK,aAAa,IAAI,KAAK;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,KAAKC,GAAM;AACT,WAAO,KAAK,GAAGA,CAAI,MAAM;AAAA,EAC1B;AAAA;AAAA,EAED,UAAU;AACR,SAAK,gBAAgB,MAAM,KAAK,YAAY,MAAM,KAAK,aAAa,MAAM,KAAK,aAAa,MAAM,KAAK,cAAc,MAAM,KAAK,aAAa,MAAM,KAAK,aAAa,MAAM,KAAK,cAAc;AAAA,EAC/L;AAAA,EACD,OAAO,OAAOA,GAAM;AAClB,YAAQA,GAAI;AAAA,MACV,KAAK;AAAA,MACL,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AAAA,MACL,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,eAAO;AAAA,MACT;AACE,cAAM,IAAI,MAAM,GAAGA,CAAI,0BAA0B;AAAA,IACpD;AAAA,EACF;AACH;","x_google_ignoreList":[0]}