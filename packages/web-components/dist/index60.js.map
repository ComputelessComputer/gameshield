{"version":3,"file":"index60.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/mask/ScissorSystem.mjs"],"sourcesContent":["import { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Matrix, Rectangle } from \"@pixi/math\";\nimport { settings } from \"@pixi/settings\";\nimport { AbstractMaskSystem } from \"./AbstractMaskSystem.mjs\";\nconst tempMatrix = new Matrix(), rectPool = [], _ScissorSystem = class _ScissorSystem2 extends AbstractMaskSystem {\n  /**\n   * @param {PIXI.Renderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    super(renderer), this.glConst = settings.ADAPTER.getWebGLRenderingContext().SCISSOR_TEST;\n  }\n  getStackLength() {\n    const maskData = this.maskStack[this.maskStack.length - 1];\n    return maskData ? maskData._scissorCounter : 0;\n  }\n  /**\n   * evaluates _boundsTransformed, _scissorRect for MaskData\n   * @param maskData\n   */\n  calcScissorRect(maskData) {\n    if (maskData._scissorRectLocal)\n      return;\n    const prevData = maskData._scissorRect, { maskObject } = maskData, { renderer } = this, renderTextureSystem = renderer.renderTexture, rect = maskObject.getBounds(!0, rectPool.pop() ?? new Rectangle());\n    this.roundFrameToPixels(\n      rect,\n      renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n      renderTextureSystem.sourceFrame,\n      renderTextureSystem.destinationFrame,\n      renderer.projection.transform\n    ), prevData && rect.fit(prevData), maskData._scissorRectLocal = rect;\n  }\n  static isMatrixRotated(matrix) {\n    if (!matrix)\n      return !1;\n    const { a, b, c, d } = matrix;\n    return (Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4) && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4);\n  }\n  /**\n   * Test, whether the object can be scissor mask with current renderer projection.\n   * Calls \"calcScissorRect()\" if its true.\n   * @param maskData - mask data\n   * @returns whether Whether the object can be scissor mask\n   */\n  testScissor(maskData) {\n    const { maskObject } = maskData;\n    if (!maskObject.isFastRect || !maskObject.isFastRect() || _ScissorSystem2.isMatrixRotated(maskObject.worldTransform) || _ScissorSystem2.isMatrixRotated(this.renderer.projection.transform))\n      return !1;\n    this.calcScissorRect(maskData);\n    const rect = maskData._scissorRectLocal;\n    return rect.width > 0 && rect.height > 0;\n  }\n  roundFrameToPixels(frame, resolution, bindingSourceFrame, bindingDestinationFrame, transform) {\n    _ScissorSystem2.isMatrixRotated(transform) || (transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity(), transform.translate(-bindingSourceFrame.x, -bindingSourceFrame.y).scale(\n      bindingDestinationFrame.width / bindingSourceFrame.width,\n      bindingDestinationFrame.height / bindingSourceFrame.height\n    ).translate(bindingDestinationFrame.x, bindingDestinationFrame.y), this.renderer.filter.transformAABB(transform, frame), frame.fit(bindingDestinationFrame), frame.x = Math.round(frame.x * resolution), frame.y = Math.round(frame.y * resolution), frame.width = Math.round(frame.width * resolution), frame.height = Math.round(frame.height * resolution));\n  }\n  /**\n   * Applies the Mask and adds it to the current stencil stack.\n   * @author alvin\n   * @param maskData - The mask data.\n   */\n  push(maskData) {\n    maskData._scissorRectLocal || this.calcScissorRect(maskData);\n    const { gl } = this.renderer;\n    maskData._scissorRect || gl.enable(gl.SCISSOR_TEST), maskData._scissorCounter++, maskData._scissorRect = maskData._scissorRectLocal, this._useCurrent();\n  }\n  /**\n   * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\n   * last mask in the stack.\n   *\n   * This can also be called when you directly modify the scissor box and want to restore PixiJS state.\n   * @param maskData - The mask data.\n   */\n  pop(maskData) {\n    const { gl } = this.renderer;\n    maskData && rectPool.push(maskData._scissorRectLocal), this.getStackLength() > 0 ? this._useCurrent() : gl.disable(gl.SCISSOR_TEST);\n  }\n  /**\n   * Setup renderer to use the current scissor data.\n   * @private\n   */\n  _useCurrent() {\n    const rect = this.maskStack[this.maskStack.length - 1]._scissorRect;\n    let y;\n    this.renderer.renderTexture.current ? y = rect.y : y = this.renderer.height - rect.height - rect.y, this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);\n  }\n};\n_ScissorSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"scissor\"\n};\nlet ScissorSystem = _ScissorSystem;\nextensions.add(ScissorSystem);\nexport {\n  ScissorSystem\n};\n//# sourceMappingURL=ScissorSystem.mjs.map\n"],"names":["tempMatrix","Matrix","rectPool","_ScissorSystem","_ScissorSystem2","AbstractMaskSystem","renderer","settings","maskData","prevData","maskObject","renderTextureSystem","rect","Rectangle","matrix","a","b","d","frame","resolution","bindingSourceFrame","bindingDestinationFrame","transform","gl","y","ExtensionType","ScissorSystem","extensions"],"mappings":"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","x_google_ignoreList":[0]}