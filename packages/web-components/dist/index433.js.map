{"version":3,"file":"index433.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs"],"sourcesContent":["import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { extractAttributesFromGpuProgram } from './utils/extractAttributesFromGpuProgram.mjs';\nimport { extractStructAndGroups } from './utils/extractStructAndGroups.mjs';\nimport { generateGpuLayoutGroups } from './utils/generateGpuLayoutGroups.mjs';\nimport { generateLayoutHash } from './utils/generateLayoutHash.mjs';\nimport { removeStructAndGroupDuplicates } from './utils/removeStructAndGroupDuplicates.mjs';\n\n\"use strict\";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /**\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._attributeLocationsKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = createIdFromString(bigKey, \"program\");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n    }\n    return programCache[key];\n  }\n}\n\nexport { GpuProgram };\n//# sourceMappingURL=GpuProgram.mjs.map\n"],"names":["programCache","GpuProgram","options","fragment","vertex","layout","gpuLayout","name","structsAndGroups","extractStructAndGroups","vertexStructsAndGroups","fragmentStructsAndGroups","removeStructAndGroupDuplicates","generateLayoutHash","generateGpuLayoutGroups","_a","_b","bigKey","createIdFromString","extractAttributesFromGpuProgram","key"],"mappings":";;;;;;AAQA,MAAMA,IAA+B,uBAAO,OAAO,IAAI;AACvD,MAAMC,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,YAAYC,GAAS;;AAKnB,SAAK,aAAa,GAKlB,KAAK,yBAAyB;AAC9B,UAAM,EAAE,UAAAC,GAAU,QAAAC,GAAQ,QAAAC,GAAQ,WAAAC,GAAW,MAAAC,EAAM,IAAGL;AAItD,QAHA,KAAK,OAAOK,GACZ,KAAK,WAAWJ,GAChB,KAAK,SAASC,GACVD,EAAS,WAAWC,EAAO,QAAQ;AACrC,YAAMI,IAAmBC,EAAuBN,EAAS,MAAM;AAC/D,WAAK,mBAAmBK;AAAA,IAC9B,OAAW;AACL,YAAME,IAAyBD,EAAuBL,EAAO,MAAM,GAC7DO,IAA2BF,EAAuBN,EAAS,MAAM;AACvE,WAAK,mBAAmBS,EAA+BF,GAAwBC,CAAwB;AAAA,IACxG;AACD,SAAK,SAASN,KAAUQ,EAAmB,KAAK,gBAAgB,GAChE,KAAK,YAAYP,KAAaQ,EAAwB,KAAK,gBAAgB,GAC3E,KAAK,6BAA8BC,IAAA,KAAK,OAAO,CAAC,MAAb,gBAAAA,EAAgB,oBAAmB,QACtE,KAAK,4BAA6BC,IAAA,KAAK,OAAO,CAAC,MAAb,gBAAAA,EAAgB,mBAAkB,QACpE,KAAK,oBAAmB;AAAA,EACzB;AAAA;AAAA,EAED,sBAAsB;AACpB,UAAM,EAAE,QAAAZ,GAAQ,UAAAD,EAAU,IAAG,MACvBc,IAASb,EAAO,SAASD,EAAS,SAASC,EAAO,aAAaD,EAAS;AAC9E,SAAK,aAAae,EAAmBD,GAAQ,SAAS;AAAA,EACvD;AAAA,EACD,IAAI,gBAAgB;AAClB,gBAAK,mBAAmB,KAAK,iBAAiBE,EAAgC,KAAK,MAAM,IAClF,KAAK;AAAA,EACb;AAAA;AAAA,EAED,UAAU;AACR,SAAK,YAAY,MACjB,KAAK,SAAS,MACd,KAAK,mBAAmB,MACxB,KAAK,WAAW,MAChB,KAAK,SAAS;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,KAAKjB,GAAS;AACnB,UAAMkB,IAAM,GAAGlB,EAAQ,OAAO,MAAM,IAAIA,EAAQ,SAAS,MAAM,IAAIA,EAAQ,SAAS,UAAU,IAAIA,EAAQ,OAAO,UAAU;AAC3H,WAAKF,EAAaoB,CAAG,MACnBpB,EAAaoB,CAAG,IAAI,IAAInB,EAAWC,CAAO,IAErCF,EAAaoB,CAAG;AAAA,EACxB;AACH;","x_google_ignoreList":[0]}