{"version":3,"file":"index408.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/maths/shapes/Ellipse.mjs"],"sourcesContent":["import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nclass Ellipse {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    this.type = \"ellipse\";\n    this.x = x;\n    this.y = y;\n    this.halfWidth = halfWidth;\n    this.halfHeight = halfHeight;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {Ellipse} A copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.halfWidth <= 0 || this.halfHeight <= 0) {\n      return false;\n    }\n    let normx = (x - this.x) / this.halfWidth;\n    let normy = (y - this.y) / this.halfHeight;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @param alignment - The alignment of the stroke\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  strokeContains(x, y, strokeWidth, alignment = 0.5) {\n    const { halfWidth, halfHeight } = this;\n    if (halfWidth <= 0 || halfHeight <= 0) {\n      return false;\n    }\n    const strokeOuterWidth = strokeWidth * (1 - alignment);\n    const strokeInnerWidth = strokeWidth - strokeOuterWidth;\n    const innerHorizontal = halfWidth - strokeInnerWidth;\n    const innerVertical = halfHeight - strokeInnerWidth;\n    const outerHorizontal = halfWidth + strokeOuterWidth;\n    const outerVertical = halfHeight + strokeOuterWidth;\n    const normalizedX = x - this.x;\n    const normalizedY = y - this.y;\n    const innerEllipse = normalizedX * normalizedX / (innerHorizontal * innerHorizontal) + normalizedY * normalizedY / (innerVertical * innerVertical);\n    const outerEllipse = normalizedX * normalizedX / (outerHorizontal * outerHorizontal) + normalizedY * normalizedY / (outerVertical * outerVertical);\n    return innerEllipse > 1 && outerEllipse <= 1;\n  }\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out || (out = new Rectangle());\n    out.x = this.x - this.halfWidth;\n    out.y = this.y - this.halfHeight;\n    out.width = this.halfWidth * 2;\n    out.height = this.halfHeight * 2;\n    return out;\n  }\n  /**\n   * Copies another ellipse to this one.\n   * @param ellipse - The ellipse to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(ellipse) {\n    this.x = ellipse.x;\n    this.y = ellipse.y;\n    this.halfWidth = ellipse.halfWidth;\n    this.halfHeight = ellipse.halfHeight;\n    return this;\n  }\n  /**\n   * Copies this ellipse to another one.\n   * @param ellipse - The ellipse to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(ellipse) {\n    ellipse.copyFrom(this);\n    return ellipse;\n  }\n  toString() {\n    return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n  }\n}\n\nexport { Ellipse };\n//# sourceMappingURL=Ellipse.mjs.map\n"],"names":["Ellipse","x","y","halfWidth","halfHeight","normx","normy","strokeWidth","alignment","strokeOuterWidth","strokeInnerWidth","innerHorizontal","innerVertical","outerHorizontal","outerVertical","normalizedX","normalizedY","innerEllipse","outerEllipse","out","Rectangle","ellipse"],"mappings":";AAGA,MAAMA,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOZ,YAAYC,IAAI,GAAGC,IAAI,GAAGC,IAAY,GAAGC,IAAa,GAAG;AAKvD,SAAK,OAAO,WACZ,KAAK,IAAIH,GACT,KAAK,IAAIC,GACT,KAAK,YAAYC,GACjB,KAAK,aAAaC;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,WAAO,IAAIJ,EAAQ,KAAK,GAAG,KAAK,GAAG,KAAK,WAAW,KAAK,UAAU;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAASC,GAAGC,GAAG;AACb,QAAI,KAAK,aAAa,KAAK,KAAK,cAAc;AAC5C,aAAO;AAET,QAAIG,KAASJ,IAAI,KAAK,KAAK,KAAK,WAC5BK,KAASJ,IAAI,KAAK,KAAK,KAAK;AAChC,WAAAG,KAASA,GACTC,KAASA,GACFD,IAAQC,KAAS;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,eAAeL,GAAGC,GAAGK,GAAaC,IAAY,KAAK;AACjD,UAAM,EAAE,WAAAL,GAAW,YAAAC,EAAY,IAAG;AAClC,QAAID,KAAa,KAAKC,KAAc;AAClC,aAAO;AAET,UAAMK,IAAmBF,KAAe,IAAIC,IACtCE,IAAmBH,IAAcE,GACjCE,IAAkBR,IAAYO,GAC9BE,IAAgBR,IAAaM,GAC7BG,IAAkBV,IAAYM,GAC9BK,IAAgBV,IAAaK,GAC7BM,IAAcd,IAAI,KAAK,GACvBe,IAAcd,IAAI,KAAK,GACvBe,IAAeF,IAAcA,KAAeJ,IAAkBA,KAAmBK,IAAcA,KAAeJ,IAAgBA,IAC9HM,IAAeH,IAAcA,KAAeF,IAAkBA,KAAmBG,IAAcA,KAAeF,IAAgBA;AACpI,WAAOG,IAAe,KAAKC,KAAgB;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAUC,GAAK;AACb,WAAAA,MAAQA,IAAM,IAAIC,EAAS,IAC3BD,EAAI,IAAI,KAAK,IAAI,KAAK,WACtBA,EAAI,IAAI,KAAK,IAAI,KAAK,YACtBA,EAAI,QAAQ,KAAK,YAAY,GAC7BA,EAAI,SAAS,KAAK,aAAa,GACxBA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,SAASE,GAAS;AAChB,gBAAK,IAAIA,EAAQ,GACjB,KAAK,IAAIA,EAAQ,GACjB,KAAK,YAAYA,EAAQ,WACzB,KAAK,aAAaA,EAAQ,YACnB;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAOA,GAAS;AACd,WAAAA,EAAQ,SAAS,IAAI,GACdA;AAAA,EACR;AAAA,EACD,WAAW;AACT,WAAO,2BAA2B,KAAK,CAAC,MAAM,KAAK,CAAC,cAAc,KAAK,SAAS,eAAe,KAAK,UAAU;AAAA,EAC/G;AACH;","x_google_ignoreList":[0]}