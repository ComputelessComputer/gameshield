{"version":3,"file":"index368.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContext.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color } from '../../../color/Color.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../maths/point/Point.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { uid } from '../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\nimport { GraphicsPath } from './path/GraphicsPath.mjs';\nimport { SVGParser } from './svg/SVGParser.mjs';\nimport { toFillStyle, toStrokeStyle } from './utils/convertFillInputToFillStyle.mjs';\n\n\"use strict\";\nconst tmpPoint = new Point();\nconst tempMatrix = new Matrix();\nconst _GraphicsContext = class _GraphicsContext extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** unique id for this graphics context */\n    this.uid = uid(\"graphicsContext\");\n    this.dirty = true;\n    this.batchMode = \"auto\";\n    this.instructions = [];\n    this._activePath = new GraphicsPath();\n    this._transform = new Matrix();\n    this._fillStyle = { ..._GraphicsContext.defaultFillStyle };\n    this._strokeStyle = { ..._GraphicsContext.defaultStrokeStyle };\n    this._stateStack = [];\n    this._tick = 0;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n  }\n  /**\n   * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n   * including the current drawing state, transformations, styles, and instructions.\n   * @returns A new GraphicsContext instance with the same properties and state as this one.\n   */\n  clone() {\n    const clone = new _GraphicsContext();\n    clone.batchMode = this.batchMode;\n    clone.instructions = this.instructions.slice();\n    clone._activePath = this._activePath.clone();\n    clone._transform = this._transform.clone();\n    clone._fillStyle = { ...this._fillStyle };\n    clone._strokeStyle = { ...this._strokeStyle };\n    clone._stateStack = this._stateStack.slice();\n    clone._bounds = this._bounds.clone();\n    clone._boundsDirty = true;\n    return clone;\n  }\n  /**\n   * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n   */\n  get fillStyle() {\n    return this._fillStyle;\n  }\n  set fillStyle(value) {\n    this._fillStyle = toFillStyle(value, _GraphicsContext.defaultFillStyle);\n  }\n  /**\n   * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   */\n  get strokeStyle() {\n    return this._strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._strokeStyle = toStrokeStyle(value, _GraphicsContext.defaultStrokeStyle);\n  }\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n   *                or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(style) {\n    this._fillStyle = toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    return this;\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   *                or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(style) {\n    this._strokeStyle = toFillStyle(style, _GraphicsContext.defaultStrokeStyle);\n    return this;\n  }\n  texture(texture, tint, dx, dy, dw, dh) {\n    this.instructions.push({\n      action: \"texture\",\n      data: {\n        image: texture,\n        dx: dx || 0,\n        dy: dy || 0,\n        dw: dw || texture.frame.width,\n        dh: dh || texture.frame.height,\n        transform: this._transform.clone(),\n        alpha: this._fillStyle.alpha,\n        style: tint ? Color.shared.setValue(tint).toNumber() : 16777215\n      }\n    });\n    this.onUpdate();\n    return this;\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    this._activePath = new GraphicsPath();\n    return this;\n  }\n  fill(style, alpha) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"stroke\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      if (alpha !== void 0 && typeof style === \"number\") {\n        deprecation(v8_0_0, \"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead\");\n        style = { color: style, alpha };\n      }\n      this._fillStyle = toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    }\n    this.instructions.push({\n      action: \"fill\",\n      // TODO copy fill style!\n      data: { style: this.fillStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  _initNextPathLocation() {\n    const { x, y } = this._activePath.getLastPoint(Point.shared);\n    this._activePath.clear();\n    this._activePath.moveTo(x, y);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillInput parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(style) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"fill\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      this._strokeStyle = toStrokeStyle(style, _GraphicsContext.defaultStrokeStyle);\n    }\n    this.instructions.push({\n      action: \"stroke\",\n      // TODO copy fill style!\n      data: { style: this.strokeStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  cut() {\n    for (let i = 0; i < 2; i++) {\n      const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n      const holePath = this._activePath.clone();\n      if (lastInstruction) {\n        if (lastInstruction.action === \"stroke\" || lastInstruction.action === \"fill\") {\n          if (lastInstruction.data.hole) {\n            lastInstruction.data.hole.addPath(holePath);\n          } else {\n            lastInstruction.data.hole = holePath;\n            break;\n          }\n        }\n      }\n    }\n    this._initNextPathLocation();\n    return this;\n  }\n  /**\n   * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n   * starting and ending angles, and direction.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The arc's radius.\n   * @param startAngle - The starting angle, in radians.\n   * @param endAngle - The ending angle, in radians.\n   * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arc(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      radius,\n      startAngle,\n      endAngle,\n      counterclockwise\n    );\n    return this;\n  }\n  /**\n   * Adds an arc to the current path with the given control points and radius, connected to the previous point\n   * by a straight line if necessary.\n   * @param x1 - The x-coordinate of the first control point.\n   * @param y1 - The y-coordinate of the first control point.\n   * @param x2 - The x-coordinate of the second control point.\n   * @param y2 - The y-coordinate of the second control point.\n   * @param radius - The arc's radius.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcTo(\n      t.a * x1 + t.c * y1 + t.tx,\n      t.b * x1 + t.d * y1 + t.ty,\n      t.a * x2 + t.c * y2 + t.tx,\n      t.b * x2 + t.d * y2 + t.ty,\n      radius\n    );\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcToSvg(\n      rx,\n      ry,\n      xAxisRotation,\n      // should we rotate this with transform??\n      largeArcFlag,\n      sweepFlag,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.bezierCurveTo(\n      t.a * cp1x + t.c * cp1y + t.tx,\n      t.b * cp1x + t.d * cp1y + t.ty,\n      t.a * cp2x + t.c * cp2y + t.tx,\n      t.b * cp2x + t.d * cp2y + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this._tick++;\n    this._activePath?.closePath();\n    return this;\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY) {\n    this._tick++;\n    this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius) {\n    this._tick++;\n    this._activePath.circle(x, y, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @returns The instance of the current object for chaining.\n   */\n  path(path) {\n    this._tick++;\n    this._activePath.addPath(path, this._transform.clone());\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.lineTo(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    const instructions = this._activePath.instructions;\n    const transformedX = t.a * x + t.c * y + t.tx;\n    const transformedY = t.b * x + t.d * y + t.ty;\n    if (instructions.length === 1 && instructions[0].action === \"moveTo\") {\n      instructions[0].data[0] = transformedX;\n      instructions[0].data[1] = transformedY;\n      return this;\n    }\n    this._activePath.moveTo(\n      transformedX,\n      transformedY\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cpx - The x-coordinate of the control point.\n   * @param cpy - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cpx, cpy, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.quadraticCurveTo(\n      t.a * cpx + t.c * cpy + t.tx,\n      t.b * cpx + t.d * cpy + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h) {\n    this._tick++;\n    this._activePath.rect(x, y, w, h, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius) {\n    this._tick++;\n    this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n   * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n   * rotated, or translated as needed.\n   * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates, of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   */\n  poly(points, close) {\n    this._tick++;\n    this._activePath.poly(points, close, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    this._tick++;\n    this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation) {\n    this._tick++;\n    this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n    return this;\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic, smoothness) {\n    this._tick++;\n    this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n    return this;\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    this._tick++;\n    this._activePath.filletRect(x, y, width, height, fillet);\n    return this;\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    this._tick++;\n    this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  star(x, y, points, radius, innerRadius = 0, rotation = 0) {\n    this._tick++;\n    this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n    return this;\n  }\n  /**\n   * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n   * defined in SVG format to be drawn within the graphics context.\n   * @param svg - The SVG string to be parsed and rendered.\n   */\n  svg(svg) {\n    this._tick++;\n    SVGParser(svg, this);\n    return this;\n  }\n  /**\n   * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n   * This includes transformations, fill styles, and stroke styles.\n   */\n  restore() {\n    const state = this._stateStack.pop();\n    if (state) {\n      this._transform = state.transform;\n      this._fillStyle = state.fillStyle;\n      this._strokeStyle = state.strokeStyle;\n    }\n    return this;\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    this._stateStack.push({\n      transform: this._transform.clone(),\n      fillStyle: { ...this._fillStyle },\n      strokeStyle: { ...this._strokeStyle }\n    });\n    return this;\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this._transform;\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    this._transform.identity();\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the graphics context around the current origin.\n   * @param angle - The angle of rotation in radians.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  rotate(angle) {\n    this._transform.rotate(angle);\n    return this;\n  }\n  /**\n   * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n   * @param x - The scale factor in the horizontal direction.\n   * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  scale(x, y = x) {\n    this._transform.scale(x, y);\n    return this;\n  }\n  setTransform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix) {\n      this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n      return this;\n    }\n    this._transform.set(a, b, c, d, dx, dy);\n    return this;\n  }\n  transform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix) {\n      this._transform.append(a);\n      return this;\n    }\n    tempMatrix.set(a, b, c, d, dx, dy);\n    this._transform.append(tempMatrix);\n    return this;\n  }\n  /**\n   * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n   * @param x - The amount to translate in the horizontal direction.\n   * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  translate(x, y = x) {\n    this._transform.translate(x, y);\n    return this;\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    this._activePath.clear();\n    this.instructions.length = 0;\n    this.resetTransform();\n    this.onUpdate();\n    return this;\n  }\n  onUpdate() {\n    if (this.dirty)\n      return;\n    this.emit(\"update\", this, 16);\n    this.dirty = true;\n    this._boundsDirty = true;\n  }\n  /** The bounds of the graphic shape. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    const bounds = this._bounds;\n    bounds.clear();\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const action = instruction.action;\n      if (action === \"fill\") {\n        const data = instruction.data;\n        bounds.addBounds(data.path.bounds);\n      } else if (action === \"texture\") {\n        const data = instruction.data;\n        bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n      }\n      if (action === \"stroke\") {\n        const data = instruction.data;\n        const alignment = data.style.alignment;\n        const outerPadding = data.style.width * (1 - alignment);\n        const _bounds = data.path.bounds;\n        bounds.addFrame(\n          _bounds.minX - outerPadding,\n          _bounds.minY - outerPadding,\n          _bounds.maxX + outerPadding,\n          _bounds.maxY + outerPadding\n        );\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Check to see if a point is contained within this geometry.\n   * @param point - Point to check if it's contained.\n   * @returns {boolean} `true` if the point is contained within geometry.\n   */\n  containsPoint(point) {\n    if (!this.bounds.containsPoint(point.x, point.y))\n      return false;\n    const instructions = this.instructions;\n    let hasHit = false;\n    for (let k = 0; k < instructions.length; k++) {\n      const instruction = instructions[k];\n      const data = instruction.data;\n      const path = data.path;\n      if (!instruction.action || !path)\n        continue;\n      const style = data.style;\n      const shapes = path.shapePath.shapePrimitives;\n      for (let i = 0; i < shapes.length; i++) {\n        const shape = shapes[i].shape;\n        if (!style || !shape)\n          continue;\n        const transform = shapes[i].transform;\n        const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n        if (instruction.action === \"fill\") {\n          hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n        } else {\n          const strokeStyle = style;\n          hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, strokeStyle.width, strokeStyle.alignment);\n        }\n        const holes = data.hole;\n        if (holes) {\n          const holeShapes = holes.shapePath?.shapePrimitives;\n          if (holeShapes) {\n            for (let j = 0; j < holeShapes.length; j++) {\n              if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y)) {\n                hasHit = false;\n              }\n            }\n          }\n        }\n        if (hasHit) {\n          return true;\n        }\n      }\n    }\n    return hasHit;\n  }\n  /**\n   * Destroys the GraphicsData object.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n   * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n   */\n  destroy(options = false) {\n    this._stateStack.length = 0;\n    this._transform = null;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fillStyle.texture) {\n        this._fillStyle.texture.destroy(destroyTextureSource);\n      }\n      if (this._strokeStyle.texture) {\n        this._strokeStyle.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fillStyle = null;\n    this._strokeStyle = null;\n    this.instructions = null;\n    this._activePath = null;\n    this._bounds = null;\n    this._stateStack = null;\n    this.customShader = null;\n    this._transform = null;\n  }\n};\n/** The default fill style to use when none is provided. */\n_GraphicsContext.defaultFillStyle = {\n  /** The color to use for the fill. */\n  color: 16777215,\n  /** The alpha value to use for the fill. */\n  alpha: 1,\n  /** The texture to use for the fill. */\n  texture: Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null,\n  /** Whether coordinates are 'global' or 'local' */\n  textureSpace: \"local\"\n};\n/** The default stroke style to use when none is provided. */\n_GraphicsContext.defaultStrokeStyle = {\n  /** The width of the stroke. */\n  width: 1,\n  /** The color to use for the stroke. */\n  color: 16777215,\n  /** The alpha value to use for the stroke. */\n  alpha: 1,\n  /** The alignment of the stroke. */\n  alignment: 0.5,\n  /** The miter limit to use. */\n  miterLimit: 10,\n  /** The line cap style to use. */\n  cap: \"butt\",\n  /** The line join style to use. */\n  join: \"miter\",\n  /** The texture to use for the fill. */\n  texture: Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null,\n  /** Whether coordinates are 'global' or 'local' */\n  textureSpace: \"local\",\n  /** If the stroke is a pixel line. */\n  pixelLine: false\n};\nlet GraphicsContext = _GraphicsContext;\n\nexport { GraphicsContext };\n//# sourceMappingURL=GraphicsContext.mjs.map\n"],"names":["tmpPoint","Point","tempMatrix","Matrix","_GraphicsContext","EventEmitter","uid","GraphicsPath","Bounds","clone","value","toFillStyle","toStrokeStyle","style","texture","tint","dx","dy","dw","dh","Color","alpha","path","lastInstruction","deprecation","v8_0_0","x","y","i","holePath","radius","startAngle","endAngle","counterclockwise","t","x1","y1","x2","y2","rx","ry","xAxisRotation","largeArcFlag","sweepFlag","cp1x","cp1y","cp2x","cp2y","smoothness","_a","radiusX","radiusY","instructions","transformedX","transformedY","cpx","cpy","w","h","points","close","sides","rotation","transform","corner","useQuadratic","width","height","fillet","chamfer","innerRadius","svg","SVGParser","state","angle","a","b","c","d","bounds","instruction","action","data","alignment","outerPadding","_bounds","point","hasHit","k","shapes","shape","transformedPoint","strokeStyle","holes","holeShapes","j","options","destroyTextureSource","Texture","GraphicsContext"],"mappings":"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","x_google_ignoreList":[0]}