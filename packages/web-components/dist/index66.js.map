{"version":3,"file":"index66.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/renderTexture/RenderTextureSystem.mjs"],"sourcesContent":["import { Color } from \"@pixi/color\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Rectangle } from \"@pixi/math\";\nconst tempRect = new Rectangle(), tempRect2 = new Rectangle();\nclass RenderTextureSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.defaultMaskStack = [], this.current = null, this.sourceFrame = new Rectangle(), this.destinationFrame = new Rectangle(), this.viewportFrame = new Rectangle();\n  }\n  contextChange() {\n    const attributes = this.renderer?.gl.getContextAttributes();\n    this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n  }\n  /**\n   * Bind the current render texture.\n   * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n   * @param sourceFrame - Part of world that is mapped to the renderTexture.\n   * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n   */\n  bind(renderTexture = null, sourceFrame, destinationFrame) {\n    const renderer = this.renderer;\n    this.current = renderTexture;\n    let baseTexture, framebuffer, resolution;\n    renderTexture ? (baseTexture = renderTexture.baseTexture, resolution = baseTexture.resolution, sourceFrame || (tempRect.width = renderTexture.frame.width, tempRect.height = renderTexture.frame.height, sourceFrame = tempRect), destinationFrame || (tempRect2.x = renderTexture.frame.x, tempRect2.y = renderTexture.frame.y, tempRect2.width = sourceFrame.width, tempRect2.height = sourceFrame.height, destinationFrame = tempRect2), framebuffer = baseTexture.framebuffer) : (resolution = renderer.resolution, sourceFrame || (tempRect.width = renderer._view.screen.width, tempRect.height = renderer._view.screen.height, sourceFrame = tempRect), destinationFrame || (destinationFrame = tempRect, destinationFrame.width = sourceFrame.width, destinationFrame.height = sourceFrame.height));\n    const viewportFrame = this.viewportFrame;\n    viewportFrame.x = destinationFrame.x * resolution, viewportFrame.y = destinationFrame.y * resolution, viewportFrame.width = destinationFrame.width * resolution, viewportFrame.height = destinationFrame.height * resolution, renderTexture || (viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height)), viewportFrame.ceil(), this.renderer.framebuffer.bind(framebuffer, viewportFrame), this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer), renderTexture ? this.renderer.mask.setMaskStack(baseTexture.maskStack) : this.renderer.mask.setMaskStack(this.defaultMaskStack), this.sourceFrame.copyFrom(sourceFrame), this.destinationFrame.copyFrom(destinationFrame);\n  }\n  /**\n   * Erases the render texture and fills the drawing area with a colour.\n   * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n   * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n   *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n   */\n  clear(clearColor, mask) {\n    const fallbackColor = this.current ? this.current.baseTexture.clear : this.renderer.background.backgroundColor, color = Color.shared.setValue(clearColor || fallbackColor);\n    (this.current && this.current.baseTexture.alphaMode > 0 || !this.current && this._rendererPremultipliedAlpha) && color.premultiply(color.alpha);\n    const destinationFrame = this.destinationFrame, baseFrame = this.current ? this.current.baseTexture : this.renderer._view.screen, clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n    if (clearMask) {\n      let { x, y, width, height } = this.viewportFrame;\n      x = Math.round(x), y = Math.round(y), width = Math.round(width), height = Math.round(height), this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST), this.renderer.gl.scissor(x, y, width, height);\n    }\n    this.renderer.framebuffer.clear(color.red, color.green, color.blue, color.alpha, mask), clearMask && this.renderer.scissor.pop();\n  }\n  resize() {\n    this.bind(null);\n  }\n  /** Resets render-texture state. */\n  reset() {\n    this.bind(null);\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nRenderTextureSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"renderTexture\"\n};\nextensions.add(RenderTextureSystem);\nexport {\n  RenderTextureSystem\n};\n//# sourceMappingURL=RenderTextureSystem.mjs.map\n"],"names":["tempRect","Rectangle","tempRect2","RenderTextureSystem","renderer","attributes","_a","renderTexture","sourceFrame","destinationFrame","baseTexture","framebuffer","resolution","viewportFrame","clearColor","mask","fallbackColor","color","Color","baseFrame","clearMask","x","y","width","height","ExtensionType","extensions"],"mappings":"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","x_google_ignoreList":[0]}