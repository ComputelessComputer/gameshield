{"version":3,"file":"index551.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n"],"names":["sharedQuad","QuadGeometry","TilingSpritePipe","renderer","State","renderable","tilingSpriteData","couldBatch","canBatch","batchableMesh","tilingSprite","instructionSet","batcher","geometry","BatchableMesh","TilingSpriteShader","shader","localUniforms","color32BitToUniform","getAdjustedBlendModeBlend","_a","MeshGeometry","renderableData","style","setUvs","setPositions","i","texture","_nonPowOf2wrapping","RendererType","ExtensionType"],"mappings":"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","x_google_ignoreList":[0]}