{"version":3,"file":"index294.js","sources":["../../../node_modules/.pnpm/@pixi+text-bitmap@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3_@pixi+dis_e8d16dc3b3f9170908692deae8697d60/node_modules/@pixi/text-bitmap/lib/formats/TextFormat.mjs"],"sourcesContent":["import { BitmapFontData } from \"../BitmapFontData.mjs\";\nclass TextFormat {\n  /**\n   * Check if resource refers to txt font data.\n   * @param data\n   * @returns - True if resource could be treated as font data, false otherwise.\n   */\n  static test(data) {\n    return typeof data == \"string\" && data.startsWith(\"info face=\");\n  }\n  /**\n   * Convert text font data to a javascript object.\n   * @param txt - Raw string data to be converted\n   * @returns - Parsed font data\n   */\n  static parse(txt) {\n    const items = txt.match(/^[a-z]+\\s+.+$/gm), rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (const i in items) {\n      const name = items[i].match(/^[a-z]+/gm)[0], attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm), itemData = {};\n      for (const i2 in attributeList) {\n        const split = attributeList[i2].split(\"=\"), key = split[0], strValue = split[1].replace(/\"/gm, \"\"), floatValue = parseFloat(strValue), value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      rawData[name].push(itemData);\n    }\n    const font = new BitmapFontData();\n    return rawData.info.forEach((info) => font.info.push({\n      face: info.face,\n      size: parseInt(info.size, 10)\n    })), rawData.common.forEach((common) => font.common.push({\n      lineHeight: parseInt(common.lineHeight, 10)\n    })), rawData.page.forEach((page) => font.page.push({\n      id: parseInt(page.id, 10),\n      file: page.file\n    })), rawData.char.forEach((char) => font.char.push({\n      id: parseInt(char.id, 10),\n      page: parseInt(char.page, 10),\n      x: parseInt(char.x, 10),\n      y: parseInt(char.y, 10),\n      width: parseInt(char.width, 10),\n      height: parseInt(char.height, 10),\n      xoffset: parseInt(char.xoffset, 10),\n      yoffset: parseInt(char.yoffset, 10),\n      xadvance: parseInt(char.xadvance, 10)\n    })), rawData.kerning.forEach((kerning) => font.kerning.push({\n      first: parseInt(kerning.first, 10),\n      second: parseInt(kerning.second, 10),\n      amount: parseInt(kerning.amount, 10)\n    })), rawData.distanceField.forEach((df) => font.distanceField.push({\n      distanceRange: parseInt(df.distanceRange, 10),\n      fieldType: df.fieldType\n    })), font;\n  }\n}\nexport {\n  TextFormat\n};\n//# sourceMappingURL=TextFormat.mjs.map\n"],"names":["TextFormat","data","txt","items","rawData","i","name","attributeList","itemData","i2","split","key","strValue","floatValue","value","font","BitmapFontData","info","common","page","char","kerning","df"],"mappings":";AACA,MAAMA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,OAAO,KAAKC,GAAM;AAChB,WAAO,OAAOA,KAAQ,YAAYA,EAAK,WAAW,YAAY;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,MAAMC,GAAK;AAChB,UAAMC,IAAQD,EAAI,MAAM,iBAAiB,GAAGE,IAAU;AAAA,MACpD,MAAM,CAAE;AAAA,MACR,QAAQ,CAAE;AAAA,MACV,MAAM,CAAE;AAAA,MACR,MAAM,CAAE;AAAA,MACR,OAAO,CAAE;AAAA,MACT,SAAS,CAAE;AAAA,MACX,UAAU,CAAE;AAAA,MACZ,eAAe,CAAE;AAAA,IACvB;AACI,eAAWC,KAAKF,GAAO;AACrB,YAAMG,IAAOH,EAAME,CAAC,EAAE,MAAM,WAAW,EAAE,CAAC,GAAGE,IAAgBJ,EAAME,CAAC,EAAE,MAAM,kCAAkC,GAAGG,IAAW;AAC5H,iBAAWC,KAAMF,GAAe;AAC9B,cAAMG,IAAQH,EAAcE,CAAE,EAAE,MAAM,GAAG,GAAGE,IAAMD,EAAM,CAAC,GAAGE,IAAWF,EAAM,CAAC,EAAE,QAAQ,OAAO,EAAE,GAAGG,IAAa,WAAWD,CAAQ,GAAGE,IAAQ,MAAMD,CAAU,IAAID,IAAWC;AAC9K,QAAAL,EAASG,CAAG,IAAIG;AAAA,MACjB;AACD,MAAAV,EAAQE,CAAI,EAAE,KAAKE,CAAQ;AAAA,IAC5B;AACD,UAAMO,IAAO,IAAIC;AACjB,WAAOZ,EAAQ,KAAK,QAAQ,CAACa,MAASF,EAAK,KAAK,KAAK;AAAA,MACnD,MAAME,EAAK;AAAA,MACX,MAAM,SAASA,EAAK,MAAM,EAAE;AAAA,IAClC,CAAK,CAAC,GAAGb,EAAQ,OAAO,QAAQ,CAACc,MAAWH,EAAK,OAAO,KAAK;AAAA,MACvD,YAAY,SAASG,EAAO,YAAY,EAAE;AAAA,IAChD,CAAK,CAAC,GAAGd,EAAQ,KAAK,QAAQ,CAACe,MAASJ,EAAK,KAAK,KAAK;AAAA,MACjD,IAAI,SAASI,EAAK,IAAI,EAAE;AAAA,MACxB,MAAMA,EAAK;AAAA,IACjB,CAAK,CAAC,GAAGf,EAAQ,KAAK,QAAQ,CAACgB,MAASL,EAAK,KAAK,KAAK;AAAA,MACjD,IAAI,SAASK,EAAK,IAAI,EAAE;AAAA,MACxB,MAAM,SAASA,EAAK,MAAM,EAAE;AAAA,MAC5B,GAAG,SAASA,EAAK,GAAG,EAAE;AAAA,MACtB,GAAG,SAASA,EAAK,GAAG,EAAE;AAAA,MACtB,OAAO,SAASA,EAAK,OAAO,EAAE;AAAA,MAC9B,QAAQ,SAASA,EAAK,QAAQ,EAAE;AAAA,MAChC,SAAS,SAASA,EAAK,SAAS,EAAE;AAAA,MAClC,SAAS,SAASA,EAAK,SAAS,EAAE;AAAA,MAClC,UAAU,SAASA,EAAK,UAAU,EAAE;AAAA,IAC1C,CAAK,CAAC,GAAGhB,EAAQ,QAAQ,QAAQ,CAACiB,MAAYN,EAAK,QAAQ,KAAK;AAAA,MAC1D,OAAO,SAASM,EAAQ,OAAO,EAAE;AAAA,MACjC,QAAQ,SAASA,EAAQ,QAAQ,EAAE;AAAA,MACnC,QAAQ,SAASA,EAAQ,QAAQ,EAAE;AAAA,IACzC,CAAK,CAAC,GAAGjB,EAAQ,cAAc,QAAQ,CAACkB,MAAOP,EAAK,cAAc,KAAK;AAAA,MACjE,eAAe,SAASO,EAAG,eAAe,EAAE;AAAA,MAC5C,WAAWA,EAAG;AAAA,IACpB,CAAK,CAAC,GAAGP;AAAA,EACN;AACH;","x_google_ignoreList":[0]}