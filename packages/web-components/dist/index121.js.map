{"version":3,"file":"index121.js","sources":["../../../node_modules/.pnpm/@pixi+text-bitmap@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3_@pixi+dis_e8d16dc3b3f9170908692deae8697d60/node_modules/@pixi/text-bitmap/lib/BitmapFont.mjs"],"sourcesContent":["import { utils, ALPHA_MODES, MIPMAP_MODES, Rectangle, Texture, settings, BaseTexture } from \"@pixi/core\";\nimport { TextStyle, TextMetrics } from \"@pixi/text\";\nimport { BitmapFontData } from \"./BitmapFontData.mjs\";\nimport { autoDetectFormat } from \"./formats/index.mjs\";\nimport \"./utils/index.mjs\";\nimport { resolveCharacters } from \"./utils/resolveCharacters.mjs\";\nimport { drawGlyph } from \"./utils/drawGlyph.mjs\";\nimport { extractCharCode } from \"./utils/extractCharCode.mjs\";\nconst _BitmapFont = class _BitmapFont2 {\n  /**\n   * @param data\n   * @param textures\n   * @param ownsTextures - Setting to `true` will destroy page textures\n   *        when the font is uninstalled.\n   */\n  constructor(data, textures, ownsTextures) {\n    const [info] = data.info, [common] = data.common, [page] = data.page, [distanceField] = data.distanceField, res = utils.getResolutionOfUrl(page.file), pageTextures = {};\n    this._ownsTextures = ownsTextures, this.font = info.face, this.size = info.size, this.lineHeight = common.lineHeight / res, this.chars = {}, this.pageTextures = pageTextures;\n    for (let i = 0; i < data.page.length; i++) {\n      const { id, file } = data.page[i];\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file], distanceField?.fieldType && distanceField.fieldType !== \"none\" && (pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA, pageTextures[id].baseTexture.mipmap = MIPMAP_MODES.OFF);\n    }\n    for (let i = 0; i < data.char.length; i++) {\n      const { id, page: page2 } = data.char[i];\n      let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n      x /= res, y /= res, width /= res, height /= res, xoffset /= res, yoffset /= res, xadvance /= res;\n      const rect = new Rectangle(\n        x + pageTextures[page2].frame.x / res,\n        y + pageTextures[page2].frame.y / res,\n        width,\n        height\n      );\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new Texture(\n          pageTextures[page2].baseTexture,\n          rect\n        ),\n        page: page2\n      };\n    }\n    for (let i = 0; i < data.kerning.length; i++) {\n      let { first, second, amount } = data.kerning[i];\n      first /= res, second /= res, amount /= res, this.chars[second] && (this.chars[second].kerning[first] = amount);\n    }\n    this.distanceFieldRange = distanceField?.distanceRange, this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? \"none\";\n  }\n  /** Remove references to created glyph textures. */\n  destroy() {\n    for (const id in this.chars)\n      this.chars[id].texture.destroy(), this.chars[id].texture = null;\n    for (const id in this.pageTextures)\n      this._ownsTextures && this.pageTextures[id].destroy(!0), this.pageTextures[id] = null;\n    this.chars = null, this.pageTextures = null;\n  }\n  /**\n   * Register a new bitmap font.\n   * @param data - The\n   *        characters map that could be provided as xml or raw string.\n   * @param textures - List of textures for each page.\n   * @param ownsTextures - Set to `true` to destroy page textures\n   *        when the font is uninstalled. By default fonts created with\n   *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n   * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n   *         and char fields.\n   */\n  static install(data, textures, ownsTextures) {\n    let fontData;\n    if (data instanceof BitmapFontData)\n      fontData = data;\n    else {\n      const format = autoDetectFormat(data);\n      if (!format)\n        throw new Error(\"Unrecognized data format for font.\");\n      fontData = format.parse(data);\n    }\n    textures instanceof Texture && (textures = [textures]);\n    const font = new _BitmapFont2(fontData, textures, ownsTextures);\n    return _BitmapFont2.available[font.font] = font, font;\n  }\n  /**\n   * Remove bitmap font by name.\n   * @param name - Name of the font to uninstall.\n   */\n  static uninstall(name) {\n    const font = _BitmapFont2.available[name];\n    if (!font)\n      throw new Error(`No font found named '${name}'`);\n    font.destroy(), delete _BitmapFont2.available[name];\n  }\n  /**\n   * Generates a bitmap-font for the given style and character set. This does not support\n   * kernings yet. With `style` properties, only the following non-layout properties are used:\n   *\n   * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n   * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n   * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n   * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n   * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n   * - {@link PIXI.TextStyle#fill|fill}\n   * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n   * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n   * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n   * - {@link PIXI.TextStyle#fontSize|fontSize}\n   * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n   * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n   * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n   * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n   * - {@link PIXI.TextStyle#stroke|stroke}\n   * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n   * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n   * @param name - The name of the custom font to use with BitmapText.\n   * @param textStyle - Style options to render with BitmapFont.\n   * @param options - Setup options for font or name of the font.\n   * @returns Font generated by style options.\n   * @example\n   * import { BitmapFont, BitmapText } from 'pixi.js';\n   *\n   * BitmapFont.from('TitleFont', {\n   *     fontFamily: 'Arial',\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: 'purple',\n   * });\n   *\n   * const title = new BitmapText('This is the title', { fontName: 'TitleFont' });\n   */\n  static from(name, textStyle, options) {\n    if (!name)\n      throw new Error(\"[BitmapFont] Property `name` is required.\");\n    const {\n      chars,\n      padding,\n      resolution,\n      textureWidth,\n      textureHeight,\n      ...baseOptions\n    } = Object.assign({}, _BitmapFont2.defaultOptions, options), charsList = resolveCharacters(chars), style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle), lineWidth = textureWidth, fontData = new BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    }, fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    let positionX = 0, positionY = 0, canvas, context, baseTexture, maxCharHeight = 0;\n    const baseTextures = [], textures = [];\n    for (let i = 0; i < charsList.length; i++) {\n      canvas || (canvas = settings.ADAPTER.createCanvas(), canvas.width = textureWidth, canvas.height = textureHeight, context = canvas.getContext(\"2d\"), baseTexture = new BaseTexture(canvas, { resolution, ...baseOptions }), baseTextures.push(baseTexture), textures.push(new Texture(baseTexture)), fontData.page.push({\n        id: textures.length - 1,\n        file: \"\"\n      }));\n      const character = charsList[i], metrics = TextMetrics.measureText(character, style, !1, canvas), width = metrics.width, height = Math.ceil(metrics.height), textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0)\n          throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small (fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n        --i, canvas = null, context = null, baseTexture = null, positionY = 0, positionX = 0, maxCharHeight = 0;\n        continue;\n      }\n      if (maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight), textureGlyphWidth * resolution + positionX >= lineWidth) {\n        if (positionX === 0)\n          throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small (fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n        --i, positionY += maxCharHeight * resolution, positionY = Math.ceil(positionY), positionX = 0, maxCharHeight = 0;\n        continue;\n      }\n      drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n      const id = extractCharCode(metrics.text);\n      fontData.char.push({\n        id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0)\n      }), positionX += (textureGlyphWidth + 2 * padding) * resolution, positionX = Math.ceil(positionX);\n    }\n    if (!options?.skipKerning)\n      for (let i = 0, len = charsList.length; i < len; i++) {\n        const first = charsList[i];\n        for (let j = 0; j < len; j++) {\n          const second = charsList[j], c1 = context.measureText(first).width, c2 = context.measureText(second).width, amount = context.measureText(first + second).width - (c1 + c2);\n          amount && fontData.kerning.push({\n            first: extractCharCode(first),\n            second: extractCharCode(second),\n            amount\n          });\n        }\n      }\n    const font = new _BitmapFont2(fontData, textures, !0);\n    return _BitmapFont2.available[name] !== void 0 && _BitmapFont2.uninstall(name), _BitmapFont2.available[name] = font, font;\n  }\n};\n_BitmapFont.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"], /**\n* This character set includes all decimal digits (from 0 to 9).\n* @type {string[][]}\n* @example\n* BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n*/\n_BitmapFont.NUMERIC = [[\"0\", \"9\"]], /**\n* This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n* @type {string[][]}\n*/\n_BitmapFont.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"], /**\n* This character set consists of all the ASCII table.\n* @member {string[][]}\n* @see http://www.asciitable.com/\n*/\n_BitmapFont.ASCII = [[\" \", \"~\"]], /**\n* Collection of default options when using `BitmapFont.from`.\n* @property {number} [resolution=1] -\n* @property {number} [textureWidth=512] -\n* @property {number} [textureHeight=512] -\n* @property {number} [padding=4] -\n* @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n*/\n_BitmapFont.defaultOptions = {\n  resolution: 1,\n  textureWidth: 512,\n  textureHeight: 512,\n  padding: 4,\n  chars: _BitmapFont.ALPHANUMERIC\n}, /** Collection of available/installed fonts. */\n_BitmapFont.available = {};\nlet BitmapFont = _BitmapFont;\nexport {\n  BitmapFont\n};\n//# sourceMappingURL=BitmapFont.mjs.map\n"],"names":["_BitmapFont","_BitmapFont2","data","textures","ownsTextures","info","common","page","distanceField","res","utils.getResolutionOfUrl","pageTextures","i","id","file","ALPHA_MODES","MIPMAP_MODES","page2","x","y","width","height","xoffset","yoffset","xadvance","rect","Rectangle","Texture","first","second","amount","_a","fontData","BitmapFontData","format","autoDetectFormat","font","name","textStyle","options","chars","padding","resolution","textureWidth","textureHeight","baseOptions","charsList","resolveCharacters","style","TextStyle","lineWidth","positionX","positionY","canvas","context","baseTexture","maxCharHeight","settings","BaseTexture","character","metrics","TextMetrics","textureGlyphWidth","drawGlyph","extractCharCode","len","j","c1","c2","BitmapFont"],"mappings":"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","x_google_ignoreList":[0]}