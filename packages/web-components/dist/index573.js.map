{"version":3,"file":"index573.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n"],"names":["HTMLTextPipe","renderer","i","gpuText","text","htmlText","newKey","instructionSet","batchableSprite","htmlTextUid","BigPool","e","updateTextBounds","resolution","texture","gpuTextData","Texture","BatchableSprite","ExtensionType"],"mappings":"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","x_google_ignoreList":[0]}