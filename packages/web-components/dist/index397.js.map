{"version":3,"file":"index397.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs"],"sourcesContent":["import { nextPow2 } from '../../../../maths/misc/pow2.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new TextureSource({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: false\n    });\n    return new Texture({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = nextPow2(po2Width);\n    po2Height = nextPow2(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\n\nexport { TexturePool, TexturePoolClass };\n//# sourceMappingURL=TexturePool.mjs.map\n"],"names":["count","TexturePoolClass","textureOptions","pixelWidth","pixelHeight","antialias","textureSource","TextureSource","Texture","frameWidth","frameHeight","resolution","po2Width","po2Height","nextPow2","key","texture","source","renderTexture","destroyTextures","i","textures","j","TexturePool"],"mappings":";;;AAKA,IAAIA,IAAQ;AACZ,MAAMC,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrB,YAAYC,GAAgB;AAC1B,SAAK,eAA+B,uBAAO,OAAO,IAAI,GACtD,KAAK,eAAe,IACpB,KAAK,iBAAiBA,KAAkB,IACxC,KAAK,mBAAmB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,cAAcC,GAAYC,GAAaC,GAAW;AAChD,UAAMC,IAAgB,IAAIC,EAAc;AAAA,MACtC,GAAG,KAAK;AAAA,MACR,OAAOJ;AAAA,MACP,QAAQC;AAAA,MACR,YAAY;AAAA,MACZ,WAAAC;AAAA,MACA,oBAAoB;AAAA,IAC1B,CAAK;AACD,WAAO,IAAIG,EAAQ;AAAA,MACjB,QAAQF;AAAA,MACR,OAAO,eAAeN,GAAO;AAAA,IACnC,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,kBAAkBS,GAAYC,GAAaC,IAAa,GAAGN,GAAW;AACpE,QAAIO,IAAW,KAAK,KAAKH,IAAaE,IAAa,IAAI,GACnDE,IAAY,KAAK,KAAKH,IAAcC,IAAa,IAAI;AACzD,IAAAC,IAAWE,EAASF,CAAQ,GAC5BC,IAAYC,EAASD,CAAS;AAC9B,UAAME,KAAOH,KAAY,OAAOC,KAAa,MAAMR,IAAY,IAAI;AACnE,IAAK,KAAK,aAAaU,CAAG,MACxB,KAAK,aAAaA,CAAG,IAAI;AAE3B,QAAIC,IAAU,KAAK,aAAaD,CAAG,EAAE,IAAG;AACxC,WAAKC,MACHA,IAAU,KAAK,cAAcJ,GAAUC,GAAWR,CAAS,IAE7DW,EAAQ,OAAO,cAAcL,GAC7BK,EAAQ,OAAO,QAAQJ,IAAWD,GAClCK,EAAQ,OAAO,SAASH,IAAYF,GACpCK,EAAQ,OAAO,aAAaJ,GAC5BI,EAAQ,OAAO,cAAcH,GAC7BG,EAAQ,MAAM,IAAI,GAClBA,EAAQ,MAAM,IAAI,GAClBA,EAAQ,MAAM,QAAQP,GACtBO,EAAQ,MAAM,SAASN,GACvBM,EAAQ,UAAS,GACjB,KAAK,aAAaA,EAAQ,GAAG,IAAID,GAC1BC;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,mBAAmBA,GAASX,IAAY,IAAO;AAC7C,UAAMY,IAASD,EAAQ;AACvB,WAAO,KAAK,kBAAkBA,EAAQ,OAAOA,EAAQ,QAAQC,EAAO,aAAaZ,CAAS;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,cAAca,GAAe;AAC3B,UAAMH,IAAM,KAAK,aAAaG,EAAc,GAAG;AAC/C,SAAK,aAAaH,CAAG,EAAE,KAAKG,CAAa;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,MAAMC,GAAiB;AAErB,QADAA,IAAkBA,MAAoB,IAClCA;AACF,iBAAWC,KAAK,KAAK,cAAc;AACjC,cAAMC,IAAW,KAAK,aAAaD,CAAC;AACpC,YAAIC;AACF,mBAASC,IAAI,GAAGA,IAAID,EAAS,QAAQC;AACnC,YAAAD,EAASC,CAAC,EAAE,QAAQ,EAAI;AAAA,MAG7B;AAEH,SAAK,eAAe;EACrB;AACH;AACK,MAACC,IAAc,IAAItB,EAAgB;","x_google_ignoreList":[0]}