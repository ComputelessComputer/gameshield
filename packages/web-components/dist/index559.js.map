{"version":3,"file":"index559.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontTextParser.mjs"],"sourcesContent":["\"use strict\";\nconst bitmapFontTextParser = {\n  test(data) {\n    return typeof data === \"string\" && data.startsWith(\"info face=\");\n  },\n  parse(txt) {\n    const items = txt.match(/^[a-z]+\\s+.+$/gm);\n    const rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (const i in items) {\n      const name = items[i].match(/^[a-z]+/gm)[0];\n      const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      const itemData = {};\n      for (const i2 in attributeList) {\n        const split = attributeList[i2].split(\"=\");\n        const key = split[0];\n        const strValue = split[1].replace(/\"/gm, \"\");\n        const floatValue = parseFloat(strValue);\n        const value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      rawData[name].push(itemData);\n    }\n    const font = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const [info] = rawData.info;\n    const [common] = rawData.common;\n    const [distanceField] = rawData.distanceField ?? [];\n    if (distanceField) {\n      font.distanceField = {\n        range: parseInt(distanceField.distanceRange, 10),\n        type: distanceField.fieldType\n      };\n    }\n    font.fontSize = parseInt(info.size, 10);\n    font.fontFamily = info.face;\n    font.lineHeight = parseInt(common.lineHeight, 10);\n    const page = rawData.page;\n    for (let i = 0; i < page.length; i++) {\n      font.pages.push({\n        id: parseInt(page[i].id, 10) || 0,\n        file: page[i].file\n      });\n    }\n    const map = {};\n    font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n    const char = rawData.char;\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.id, 10);\n      let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      font.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.page, 10) || 0,\n        x: parseInt(charNode.x, 10),\n        y: parseInt(charNode.y, 10),\n        width: parseInt(charNode.width, 10),\n        height: parseInt(charNode.height, 10),\n        xOffset: parseInt(charNode.xoffset, 10),\n        yOffset: parseInt(charNode.yoffset, 10),\n        xAdvance: parseInt(charNode.xadvance, 10),\n        kerning: {}\n      };\n    }\n    const kerning = rawData.kerning || [];\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].first, 10);\n      const second = parseInt(kerning[i].second, 10);\n      const amount = parseInt(kerning[i].amount, 10);\n      font.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return font;\n  }\n};\n\nexport { bitmapFontTextParser };\n//# sourceMappingURL=bitmapFontTextParser.mjs.map\n"],"names":["bitmapFontTextParser","data","txt","items","rawData","i","name","attributeList","itemData","i2","split","key","strValue","floatValue","value","font","info","common","distanceField","page","map","char","charNode","id","letter","kerning","first","second","amount"],"mappings":"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","x_google_ignoreList":[0]}