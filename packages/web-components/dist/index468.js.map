{"version":3,"file":"index468.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/instructions/InstructionSet.mjs"],"sourcesContent":["import { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass InstructionSet {\n  constructor() {\n    /** a unique id for this instruction set used through the renderer */\n    this.uid = uid(\"instructionSet\");\n    /** the array of instructions */\n    this.instructions = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    this.instructionSize = 0;\n    this.renderables = [];\n    /** used by the garbage collector to track when the instruction set was last used */\n    this.gcTick = 0;\n  }\n  /** reset the instruction set so it can be reused set size back to 0 */\n  reset() {\n    this.instructionSize = 0;\n  }\n  /**\n   * Add an instruction to the set\n   * @param instruction - add an instruction to the set\n   */\n  add(instruction) {\n    this.instructions[this.instructionSize++] = instruction;\n  }\n  /**\n   * Log the instructions to the console (for debugging)\n   * @internal\n   * @ignore\n   */\n  log() {\n    this.instructions.length = this.instructionSize;\n    console.table(this.instructions, [\"type\", \"action\"]);\n  }\n}\n\nexport { InstructionSet };\n//# sourceMappingURL=InstructionSet.mjs.map\n"],"names":["InstructionSet","uid","instruction"],"mappings":";AAGA,MAAMA,EAAe;AAAA,EACnB,cAAc;AAEZ,SAAK,MAAMC,EAAI,gBAAgB,GAE/B,KAAK,eAAe,IAEpB,KAAK,kBAAkB,GACvB,KAAK,cAAc,IAEnB,KAAK,SAAS;AAAA,EACf;AAAA;AAAA,EAED,QAAQ;AACN,SAAK,kBAAkB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAIC,GAAa;AACf,SAAK,aAAa,KAAK,iBAAiB,IAAIA;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM;AACJ,SAAK,aAAa,SAAS,KAAK,iBAChC,QAAQ,MAAM,KAAK,cAAc,CAAC,QAAQ,QAAQ,CAAC;AAAA,EACpD;AACH;","x_google_ignoreList":[0]}