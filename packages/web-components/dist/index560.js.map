{"version":3,"file":"index560.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLParser.mjs"],"sourcesContent":["\"use strict\";\nconst bitmapFontXMLParser = {\n  test(data) {\n    const xml = data;\n    return typeof xml !== \"string\" && \"getElementsByTagName\" in xml && xml.getElementsByTagName(\"page\").length && xml.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n  },\n  parse(xml) {\n    const data = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const info = xml.getElementsByTagName(\"info\")[0];\n    const common = xml.getElementsByTagName(\"common\")[0];\n    const distanceField = xml.getElementsByTagName(\"distanceField\")[0];\n    if (distanceField) {\n      data.distanceField = {\n        type: distanceField.getAttribute(\"fieldType\"),\n        range: parseInt(distanceField.getAttribute(\"distanceRange\"), 10)\n      };\n    }\n    const page = xml.getElementsByTagName(\"page\");\n    const char = xml.getElementsByTagName(\"char\");\n    const kerning = xml.getElementsByTagName(\"kerning\");\n    data.fontSize = parseInt(info.getAttribute(\"size\"), 10);\n    data.fontFamily = info.getAttribute(\"face\");\n    data.lineHeight = parseInt(common.getAttribute(\"lineHeight\"), 10);\n    for (let i = 0; i < page.length; i++) {\n      data.pages.push({\n        id: parseInt(page[i].getAttribute(\"id\"), 10) || 0,\n        file: page[i].getAttribute(\"file\")\n      });\n    }\n    const map = {};\n    data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute(\"base\"), 10);\n    for (let i = 0; i < char.length; i++) {\n      const charNode = char[i];\n      const id = parseInt(charNode.getAttribute(\"id\"), 10);\n      let letter = charNode.getAttribute(\"letter\") ?? charNode.getAttribute(\"char\") ?? String.fromCharCode(id);\n      if (letter === \"space\")\n        letter = \" \";\n      map[id] = letter;\n      data.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.getAttribute(\"page\"), 10) || 0,\n        x: parseInt(charNode.getAttribute(\"x\"), 10),\n        y: parseInt(charNode.getAttribute(\"y\"), 10),\n        width: parseInt(charNode.getAttribute(\"width\"), 10),\n        height: parseInt(charNode.getAttribute(\"height\"), 10),\n        // render deets..\n        xOffset: parseInt(charNode.getAttribute(\"xoffset\"), 10),\n        yOffset: parseInt(charNode.getAttribute(\"yoffset\"), 10),\n        // + baseLineOffset,\n        xAdvance: parseInt(charNode.getAttribute(\"xadvance\"), 10),\n        kerning: {}\n      };\n    }\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].getAttribute(\"first\"), 10);\n      const second = parseInt(kerning[i].getAttribute(\"second\"), 10);\n      const amount = parseInt(kerning[i].getAttribute(\"amount\"), 10);\n      data.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return data;\n  }\n};\n\nexport { bitmapFontXMLParser };\n//# sourceMappingURL=bitmapFontXMLParser.mjs.map\n"],"names":["bitmapFontXMLParser","data","xml","info","common","distanceField","page","char","kerning","i","map","charNode","id","letter","first","second","amount"],"mappings":"AACK,MAACA,IAAsB;AAAA,EAC1B,KAAKC,GAAM;AACT,UAAMC,IAAMD;AACZ,WAAO,OAAOC,KAAQ,YAAY,0BAA0BA,KAAOA,EAAI,qBAAqB,MAAM,EAAE,UAAUA,EAAI,qBAAqB,MAAM,EAAE,CAAC,EAAE,aAAa,MAAM,MAAM;AAAA,EAC5K;AAAA,EACD,MAAMA,GAAK;AACT,UAAMD,IAAO;AAAA,MACX,OAAO,CAAE;AAAA,MACT,OAAO,CAAE;AAAA,MACT,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,gBAAgB;AAAA,IACtB,GACUE,IAAOD,EAAI,qBAAqB,MAAM,EAAE,CAAC,GACzCE,IAASF,EAAI,qBAAqB,QAAQ,EAAE,CAAC,GAC7CG,IAAgBH,EAAI,qBAAqB,eAAe,EAAE,CAAC;AACjE,IAAIG,MACFJ,EAAK,gBAAgB;AAAA,MACnB,MAAMI,EAAc,aAAa,WAAW;AAAA,MAC5C,OAAO,SAASA,EAAc,aAAa,eAAe,GAAG,EAAE;AAAA,IACvE;AAEI,UAAMC,IAAOJ,EAAI,qBAAqB,MAAM,GACtCK,IAAOL,EAAI,qBAAqB,MAAM,GACtCM,IAAUN,EAAI,qBAAqB,SAAS;AAClD,IAAAD,EAAK,WAAW,SAASE,EAAK,aAAa,MAAM,GAAG,EAAE,GACtDF,EAAK,aAAaE,EAAK,aAAa,MAAM,GAC1CF,EAAK,aAAa,SAASG,EAAO,aAAa,YAAY,GAAG,EAAE;AAChE,aAASK,IAAI,GAAGA,IAAIH,EAAK,QAAQG;AAC/B,MAAAR,EAAK,MAAM,KAAK;AAAA,QACd,IAAI,SAASK,EAAKG,CAAC,EAAE,aAAa,IAAI,GAAG,EAAE,KAAK;AAAA,QAChD,MAAMH,EAAKG,CAAC,EAAE,aAAa,MAAM;AAAA,MACzC,CAAO;AAEH,UAAMC,IAAM,CAAA;AACZ,IAAAT,EAAK,iBAAiBA,EAAK,aAAa,SAASG,EAAO,aAAa,MAAM,GAAG,EAAE;AAChF,aAASK,IAAI,GAAGA,IAAIF,EAAK,QAAQE,KAAK;AACpC,YAAME,IAAWJ,EAAKE,CAAC,GACjBG,IAAK,SAASD,EAAS,aAAa,IAAI,GAAG,EAAE;AACnD,UAAIE,IAASF,EAAS,aAAa,QAAQ,KAAKA,EAAS,aAAa,MAAM,KAAK,OAAO,aAAaC,CAAE;AACvG,MAAIC,MAAW,YACbA,IAAS,MACXH,EAAIE,CAAE,IAAIC,GACVZ,EAAK,MAAMY,CAAM,IAAI;AAAA,QACnB,IAAAD;AAAA;AAAA,QAEA,MAAM,SAASD,EAAS,aAAa,MAAM,GAAG,EAAE,KAAK;AAAA,QACrD,GAAG,SAASA,EAAS,aAAa,GAAG,GAAG,EAAE;AAAA,QAC1C,GAAG,SAASA,EAAS,aAAa,GAAG,GAAG,EAAE;AAAA,QAC1C,OAAO,SAASA,EAAS,aAAa,OAAO,GAAG,EAAE;AAAA,QAClD,QAAQ,SAASA,EAAS,aAAa,QAAQ,GAAG,EAAE;AAAA;AAAA,QAEpD,SAAS,SAASA,EAAS,aAAa,SAAS,GAAG,EAAE;AAAA,QACtD,SAAS,SAASA,EAAS,aAAa,SAAS,GAAG,EAAE;AAAA;AAAA,QAEtD,UAAU,SAASA,EAAS,aAAa,UAAU,GAAG,EAAE;AAAA,QACxD,SAAS,CAAE;AAAA,MACnB;AAAA,IACK;AACD,aAASF,IAAI,GAAGA,IAAID,EAAQ,QAAQC,KAAK;AACvC,YAAMK,IAAQ,SAASN,EAAQC,CAAC,EAAE,aAAa,OAAO,GAAG,EAAE,GACrDM,IAAS,SAASP,EAAQC,CAAC,EAAE,aAAa,QAAQ,GAAG,EAAE,GACvDO,IAAS,SAASR,EAAQC,CAAC,EAAE,aAAa,QAAQ,GAAG,EAAE;AAC7D,MAAAR,EAAK,MAAMS,EAAIK,CAAM,CAAC,EAAE,QAAQL,EAAII,CAAK,CAAC,IAAIE;AAAA,IAC/C;AACD,WAAOf;AAAA,EACR;AACH;","x_google_ignoreList":[0]}