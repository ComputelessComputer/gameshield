{"version":3,"file":"index117.js","sources":["../../../node_modules/.pnpm/@pixi+spritesheet@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3/node_modules/@pixi/spritesheet/lib/spritesheetAsset.mjs"],"sourcesContent":["import { LoaderParserPriority, copySearchParams } from \"@pixi/assets\";\nimport { utils, ExtensionType, settings, extensions } from \"@pixi/core\";\nimport { Spritesheet } from \"./Spritesheet.mjs\";\nconst validImages = [\n  \"jpg\",\n  \"png\",\n  \"jpeg\",\n  \"avif\",\n  \"webp\",\n  \"s3tc\",\n  \"s3tc_sRGB\",\n  \"etc\",\n  \"etc1\",\n  \"pvrtc\",\n  \"atc\",\n  \"astc\",\n  \"bptc\"\n];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  if (keys.forEach((key) => {\n    out[key] = asset;\n  }), Object.keys(asset.textures).forEach((key) => {\n    out[`${asset.cachePrefix}${key}`] = asset.textures[key];\n  }), !ignoreMultiPack) {\n    const basePath = utils.path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      Object.assign(out, getCacheableAssets(\n        [`${basePath}/${asset.data.meta.related_multi_packs[i]}`],\n        item,\n        !0\n      ));\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: (asset) => asset instanceof Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, !1)\n  },\n  /** Resolve the the resolution of the asset. */\n  resolver: {\n    test: (value) => {\n      const split = value.split(\"?\")[0].split(\".\"), extension = split.pop(), format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: (value) => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   * @ignore\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal\n    },\n    async testParse(asset, options) {\n      return utils.path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      const {\n        texture: imageTexture,\n        // if user need to use preloaded texture\n        imageFilename,\n        // if user need to use custom filename (not from jsonFile.meta.image)\n        cachePrefix\n        // if user need to use custom cache prefix\n      } = options?.data ?? {};\n      let basePath = utils.path.dirname(options.src);\n      basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1 && (basePath += \"/\");\n      let texture;\n      if (imageTexture && imageTexture.baseTexture)\n        texture = imageTexture;\n      else {\n        const imagePath = copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n        texture = (await loader.load([imagePath]))[imagePath];\n      }\n      const spritesheet = new Spritesheet({\n        texture: texture.baseTexture,\n        data: asset,\n        resolutionFilename: options.src,\n        cachePrefix\n      });\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item != \"string\")\n            continue;\n          let itemUrl = basePath + item;\n          options.data?.ignoreMultiPack || (itemUrl = copySearchParams(itemUrl, options.src), promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: !0\n            }\n          })));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res, res.forEach((item) => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    unload(spritesheet) {\n      spritesheet.destroy(!0);\n    }\n  }\n};\nextensions.add(spritesheetAsset);\nexport {\n  spritesheetAsset\n};\n//# sourceMappingURL=spritesheetAsset.mjs.map\n"],"names":["validImages","getCacheableAssets","keys","asset","ignoreMultiPack","out","key","basePath","utils.path","item","i","spritesheetAsset","ExtensionType","Spritesheet","value","split","extension","format","_a","settings","LoaderParserPriority","options","loader","imageTexture","imageFilename","cachePrefix","texture","imagePath","copySearchParams","spritesheet","multiPacks","promises","itemUrl","_b","res","sp","extensions"],"mappings":"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","x_google_ignoreList":[0]}