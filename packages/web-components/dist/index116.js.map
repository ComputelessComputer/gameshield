{"version":3,"file":"index116.js","sources":["../../../node_modules/.pnpm/@pixi+spritesheet@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3/node_modules/@pixi/spritesheet/lib/Spritesheet.mjs"],"sourcesContent":["import { BaseTexture, Texture, utils, Rectangle } from \"@pixi/core\";\nconst _Spritesheet = class _Spritesheet2 {\n  /** @ignore */\n  constructor(optionsOrTexture, arg1, arg2) {\n    this.linkedSheets = [], (optionsOrTexture instanceof BaseTexture || optionsOrTexture instanceof Texture) && (optionsOrTexture = { texture: optionsOrTexture, data: arg1, resolutionFilename: arg2 });\n    const { texture, data, resolutionFilename = null, cachePrefix = \"\" } = optionsOrTexture;\n    this.cachePrefix = cachePrefix, this._texture = texture instanceof Texture ? texture : null, this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture, this.textures = {}, this.animations = {}, this.data = data;\n    const resource = this.baseTexture.resource;\n    this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null)), this._frames = this.data.frames, this._frameKeys = Object.keys(this._frames), this._batchIndex = 0, this._callback = null;\n  }\n  /**\n   * Generate the resolution from the filename or fallback\n   * to the meta.scale field of the JSON data.\n   * @param resolutionFilename - The filename to use for resolving\n   *        the default resolution.\n   * @returns Resolution to use for spritesheet.\n   */\n  _updateResolution(resolutionFilename = null) {\n    const { scale } = this.data.meta;\n    let resolution = utils.getResolutionOfUrl(resolutionFilename, null);\n    return resolution === null && (resolution = typeof scale == \"number\" ? scale : parseFloat(scale ?? \"1\")), resolution !== 1 && this.baseTexture.setResolution(resolution), resolution;\n  }\n  /**\n   * Parser spritesheet from loaded data. This is done asynchronously\n   * to prevent creating too many Texture within a single process.\n   * @method PIXI.Spritesheet#parse\n   */\n  parse() {\n    return new Promise((resolve) => {\n      this._callback = resolve, this._batchIndex = 0, this._frameKeys.length <= _Spritesheet2.BATCH_SIZE ? (this._processFrames(0), this._processAnimations(), this._parseComplete()) : this._nextBatch();\n    });\n  }\n  /**\n   * Process a batch of frames\n   * @param initialFrameIndex - The index of frame to start.\n   */\n  _processFrames(initialFrameIndex) {\n    let frameIndex = initialFrameIndex;\n    const maxFrames = _Spritesheet2.BATCH_SIZE;\n    for (; frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length; ) {\n      const i = this._frameKeys[frameIndex], data = this._frames[i], rect = data.frame;\n      if (rect) {\n        let frame = null, trim = null;\n        const sourceSize = data.trimmed !== !1 && data.sourceSize ? data.sourceSize : data.frame, orig = new Rectangle(\n          0,\n          0,\n          Math.floor(sourceSize.w) / this.resolution,\n          Math.floor(sourceSize.h) / this.resolution\n        );\n        data.rotated ? frame = new Rectangle(\n          Math.floor(rect.x) / this.resolution,\n          Math.floor(rect.y) / this.resolution,\n          Math.floor(rect.h) / this.resolution,\n          Math.floor(rect.w) / this.resolution\n        ) : frame = new Rectangle(\n          Math.floor(rect.x) / this.resolution,\n          Math.floor(rect.y) / this.resolution,\n          Math.floor(rect.w) / this.resolution,\n          Math.floor(rect.h) / this.resolution\n        ), data.trimmed !== !1 && data.spriteSourceSize && (trim = new Rectangle(\n          Math.floor(data.spriteSourceSize.x) / this.resolution,\n          Math.floor(data.spriteSourceSize.y) / this.resolution,\n          Math.floor(rect.w) / this.resolution,\n          Math.floor(rect.h) / this.resolution\n        )), this.textures[i] = new Texture(\n          this.baseTexture,\n          frame,\n          orig,\n          trim,\n          data.rotated ? 2 : 0,\n          data.anchor,\n          data.borders\n        ), Texture.addToCache(this.textures[i], this.cachePrefix + i.toString());\n      }\n      frameIndex++;\n    }\n  }\n  /** Parse animations config. */\n  _processAnimations() {\n    const animations = this.data.animations || {};\n    for (const animName in animations) {\n      this.animations[animName] = [];\n      for (let i = 0; i < animations[animName].length; i++) {\n        const frameName = animations[animName][i];\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  }\n  /** The parse has completed. */\n  _parseComplete() {\n    const callback = this._callback;\n    this._callback = null, this._batchIndex = 0, callback.call(this, this.textures);\n  }\n  /** Begin the next batch of textures. */\n  _nextBatch() {\n    this._processFrames(this._batchIndex * _Spritesheet2.BATCH_SIZE), this._batchIndex++, setTimeout(() => {\n      this._batchIndex * _Spritesheet2.BATCH_SIZE < this._frameKeys.length ? this._nextBatch() : (this._processAnimations(), this._parseComplete());\n    }, 0);\n  }\n  /**\n   * Destroy Spritesheet and don't use after this.\n   * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n   */\n  destroy(destroyBase = !1) {\n    for (const i in this.textures)\n      this.textures[i].destroy();\n    this._frames = null, this._frameKeys = null, this.data = null, this.textures = null, destroyBase && (this._texture?.destroy(), this.baseTexture.destroy()), this._texture = null, this.baseTexture = null, this.linkedSheets = [];\n  }\n};\n_Spritesheet.BATCH_SIZE = 1e3;\nlet Spritesheet = _Spritesheet;\nexport {\n  Spritesheet\n};\n//# sourceMappingURL=Spritesheet.mjs.map\n"],"names":["_Spritesheet","_Spritesheet2","optionsOrTexture","arg1","arg2","BaseTexture","Texture","texture","data","resolutionFilename","cachePrefix","resource","scale","resolution","utils.getResolutionOfUrl","resolve","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","orig","Rectangle","animations","animName","frameName","callback","destroyBase","_a","Spritesheet"],"mappings":"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","x_google_ignoreList":[0]}