{"version":3,"file":"index126.js","sources":["../../../node_modules/.pnpm/@pixi+text-bitmap@7.4.3_@pixi+assets@7.4.3_@pixi+core@7.4.3__@pixi+core@7.4.3_@pixi+dis_e8d16dc3b3f9170908692deae8697d60/node_modules/@pixi/text-bitmap/lib/loadBitmapFont.mjs"],"sourcesContent":["import { LoaderParserPriority, copySearchParams } from \"@pixi/assets\";\nimport { ExtensionType, utils, settings, extensions } from \"@pixi/core\";\nimport { BitmapFont } from \"./BitmapFont.mjs\";\nimport \"./formats/index.mjs\";\nimport { TextFormat } from \"./formats/TextFormat.mjs\";\nimport { XMLStringFormat } from \"./formats/XMLStringFormat.mjs\";\nconst validExtensions = [\".xml\", \".fnt\"], loadBitmapFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Normal\n  },\n  name: \"loadBitmapFont\",\n  test(url) {\n    return validExtensions.includes(utils.path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return TextFormat.test(data) || XMLStringFormat.test(data);\n  },\n  async parse(asset, data, loader) {\n    const fontData = TextFormat.test(asset) ? TextFormat.parse(asset) : XMLStringFormat.parse(asset), { src } = data, { page: pages } = fontData, textureUrls = [];\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n      imagePath = copySearchParams(imagePath, src), textureUrls.push(imagePath);\n    }\n    const loadedTextures = await loader.load(textureUrls), textures = textureUrls.map((url) => loadedTextures[url]);\n    return BitmapFont.install(fontData, textures, !0);\n  },\n  async load(url, _options) {\n    return (await settings.ADAPTER.fetch(url)).text();\n  },\n  unload(bitmapFont) {\n    bitmapFont.destroy();\n  }\n};\nextensions.add(loadBitmapFont);\nexport {\n  loadBitmapFont\n};\n//# sourceMappingURL=loadBitmapFont.mjs.map\n"],"names":["validExtensions","loadBitmapFont","ExtensionType","LoaderParserPriority","url","utils.path","data","TextFormat","XMLStringFormat","asset","loader","fontData","src","pages","textureUrls","i","pageFile","imagePath","copySearchParams","loadedTextures","textures","BitmapFont","_options","settings","bitmapFont","extensions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMK,MAACA,IAAkB,CAAC,QAAQ,MAAM,GAAGC,IAAiB;AAAA,EACzD,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,UAAUC,EAAqB;AAAA,EAChC;AAAA,EACD,MAAM;AAAA,EACN,KAAKC,GAAK;AACR,WAAOJ,EAAgB,SAASK,EAAW,QAAQD,CAAG,EAAE,YAAW,CAAE;AAAA,EACtE;AAAA,EACD,MAAM,UAAUE,GAAM;AACpB,WAAOC,EAAW,KAAKD,CAAI,KAAKE,EAAgB,KAAKF,CAAI;AAAA,EAC1D;AAAA,EACD,MAAM,MAAMG,GAAOH,GAAMI,GAAQ;AAC/B,UAAMC,IAAWJ,EAAW,KAAKE,CAAK,IAAIF,EAAW,MAAME,CAAK,IAAID,EAAgB,MAAMC,CAAK,GAAG,EAAE,KAAAG,EAAK,IAAGN,GAAM,EAAE,MAAMO,MAAUF,GAAUG,IAAc;AAC5J,aAASC,IAAI,GAAGA,IAAIF,EAAM,QAAQ,EAAEE,GAAG;AACrC,YAAMC,IAAWH,EAAME,CAAC,EAAE;AAC1B,UAAIE,IAAYZ,EAAW,KAAKA,EAAW,QAAQO,CAAG,GAAGI,CAAQ;AACjE,MAAAC,IAAYC,EAAiBD,GAAWL,CAAG,GAAGE,EAAY,KAAKG,CAAS;AAAA,IACzE;AACD,UAAME,IAAiB,MAAMT,EAAO,KAAKI,CAAW,GAAGM,IAAWN,EAAY,IAAI,CAACV,MAAQe,EAAef,CAAG,CAAC;AAC9G,WAAOiB,EAAW,QAAQV,GAAUS,GAAU,EAAE;AAAA,EACjD;AAAA,EACD,MAAM,KAAKhB,GAAKkB,GAAU;AACxB,YAAQ,MAAMC,EAAS,QAAQ,MAAMnB,CAAG,GAAG;EAC5C;AAAA,EACD,OAAOoB,GAAY;AACjB,IAAAA,EAAW,QAAO;AAAA,EACnB;AACH;AACAC,EAAW,IAAIxB,CAAc;","x_google_ignoreList":[0]}