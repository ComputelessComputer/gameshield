{"version":3,"file":"index537.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n"],"names":["MeshPipe","renderer","adaptor","UniformGroup","Matrix","BindGroup","mesh","meshData","wasBatched","isBatched","geometry","batchableMesh","instructionSet","batcher","batched","gpuBatchableMesh","gpuMesh","BigPool","getAdjustedBlendModeBlend","localUniforms","color32BitToUniform","_a","_b","BatchableMesh","i","ExtensionType"],"mappings":"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","x_google_ignoreList":[0]}