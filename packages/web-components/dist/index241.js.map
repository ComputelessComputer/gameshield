{"version":3,"file":"index241.js","sources":["../../../node_modules/.pnpm/@pixi+utils@7.4.3/node_modules/@pixi/utils/lib/media/CanvasRenderTarget.mjs"],"sourcesContent":["import { settings } from \"@pixi/settings\";\nclass CanvasRenderTarget {\n  /**\n   * @param width - the width for the newly created canvas\n   * @param height - the height for the newly created canvas\n   * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n   */\n  constructor(width, height, resolution) {\n    this._canvas = settings.ADAPTER.createCanvas(), this._context = this._canvas.getContext(\"2d\"), this.resolution = resolution || settings.RESOLUTION, this.resize(width, height);\n  }\n  /**\n   * Clears the canvas that was created by the CanvasRenderTarget class.\n   * @private\n   */\n  clear() {\n    this._checkDestroyed(), this._context.setTransform(1, 0, 0, 1, 0, 0), this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n  /**\n   * Resizes the canvas to the specified width and height.\n   * @param desiredWidth - the desired width of the canvas\n   * @param desiredHeight - the desired height of the canvas\n   */\n  resize(desiredWidth, desiredHeight) {\n    this._checkDestroyed(), this._canvas.width = Math.round(desiredWidth * this.resolution), this._canvas.height = Math.round(desiredHeight * this.resolution);\n  }\n  /** Destroys this canvas. */\n  destroy() {\n    this._context = null, this._canvas = null;\n  }\n  /**\n   * The width of the canvas buffer in pixels.\n   * @member {number}\n   */\n  get width() {\n    return this._checkDestroyed(), this._canvas.width;\n  }\n  set width(val) {\n    this._checkDestroyed(), this._canvas.width = Math.round(val);\n  }\n  /**\n   * The height of the canvas buffer in pixels.\n   * @member {number}\n   */\n  get height() {\n    return this._checkDestroyed(), this._canvas.height;\n  }\n  set height(val) {\n    this._checkDestroyed(), this._canvas.height = Math.round(val);\n  }\n  /** The Canvas object that belongs to this CanvasRenderTarget. */\n  get canvas() {\n    return this._checkDestroyed(), this._canvas;\n  }\n  /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n  get context() {\n    return this._checkDestroyed(), this._context;\n  }\n  _checkDestroyed() {\n    if (this._canvas === null)\n      throw new TypeError(\"The CanvasRenderTarget has already been destroyed\");\n  }\n}\nexport {\n  CanvasRenderTarget\n};\n//# sourceMappingURL=CanvasRenderTarget.mjs.map\n"],"names":["CanvasRenderTarget","width","height","resolution","settings","desiredWidth","desiredHeight","val"],"mappings":";;AACA,MAAMA,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMvB,YAAYC,GAAOC,GAAQC,GAAY;AACrC,SAAK,UAAUC,EAAS,QAAQ,gBAAgB,KAAK,WAAW,KAAK,QAAQ,WAAW,IAAI,GAAG,KAAK,aAAaD,KAAcC,EAAS,YAAY,KAAK,OAAOH,GAAOC,CAAM;AAAA,EAC9K;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACN,SAAK,gBAAe,GAAI,KAAK,SAAS,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,SAAS,UAAU,GAAG,GAAG,KAAK,QAAQ,OAAO,KAAK,QAAQ,MAAM;AAAA,EAC5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAOG,GAAcC,GAAe;AAClC,SAAK,gBAAiB,GAAE,KAAK,QAAQ,QAAQ,KAAK,MAAMD,IAAe,KAAK,UAAU,GAAG,KAAK,QAAQ,SAAS,KAAK,MAAMC,IAAgB,KAAK,UAAU;AAAA,EAC1J;AAAA;AAAA,EAED,UAAU;AACR,SAAK,WAAW,MAAM,KAAK,UAAU;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,QAAQ;AACV,WAAO,KAAK,gBAAe,GAAI,KAAK,QAAQ;AAAA,EAC7C;AAAA,EACD,IAAI,MAAMC,GAAK;AACb,SAAK,gBAAiB,GAAE,KAAK,QAAQ,QAAQ,KAAK,MAAMA,CAAG;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,SAAS;AACX,WAAO,KAAK,gBAAe,GAAI,KAAK,QAAQ;AAAA,EAC7C;AAAA,EACD,IAAI,OAAOA,GAAK;AACd,SAAK,gBAAiB,GAAE,KAAK,QAAQ,SAAS,KAAK,MAAMA,CAAG;AAAA,EAC7D;AAAA;AAAA,EAED,IAAI,SAAS;AACX,WAAO,KAAK,mBAAmB,KAAK;AAAA,EACrC;AAAA;AAAA,EAED,IAAI,UAAU;AACZ,WAAO,KAAK,mBAAmB,KAAK;AAAA,EACrC;AAAA,EACD,kBAAkB;AAChB,QAAI,KAAK,YAAY;AACnB,YAAM,IAAI,UAAU,mDAAmD;AAAA,EAC1E;AACH;","x_google_ignoreList":[0]}