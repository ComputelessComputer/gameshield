{"version":3,"file":"index395.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer.mjs';\nimport { getGeometryBounds } from './utils/getGeometryBounds.mjs';\n\n\"use strict\";\nfunction ensureIsAttribute(attribute) {\n  if (attribute instanceof Buffer || Array.isArray(attribute) || attribute.BYTES_PER_ELEMENT) {\n    attribute = {\n      buffer: attribute\n    };\n  }\n  attribute.buffer = ensureIsBuffer(attribute.buffer, false);\n  return attribute;\n}\nclass Geometry extends EventEmitter {\n  /**\n   * Create a new instance of a geometry\n   * @param options - The options for the geometry.\n   */\n  constructor(options = {}) {\n    super();\n    /** The unique id of the geometry. */\n    this.uid = uid(\"geometry\");\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /** the instance count of the geometry to draw */\n    this.instanceCount = 1;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n    const { attributes, indexBuffer, topology } = options;\n    this.buffers = [];\n    this.attributes = {};\n    if (attributes) {\n      for (const i in attributes) {\n        this.addAttribute(i, attributes[i]);\n      }\n    }\n    this.instanceCount = options.instanceCount ?? 1;\n    if (indexBuffer) {\n      this.addIndex(indexBuffer);\n    }\n    this.topology = topology || \"triangle-list\";\n  }\n  onBufferUpdate() {\n    this._boundsDirty = true;\n    this.emit(\"update\", this);\n  }\n  /**\n   * Returns the requested attribute.\n   * @param id - The name of the attribute required\n   * @returns - The attribute requested.\n   */\n  getAttribute(id) {\n    return this.attributes[id];\n  }\n  /**\n   * Returns the index buffer\n   * @returns - The index buffer.\n   */\n  getIndex() {\n    return this.indexBuffer;\n  }\n  /**\n   * Returns the requested buffer.\n   * @param id - The name of the buffer required.\n   * @returns - The buffer requested.\n   */\n  getBuffer(id) {\n    return this.getAttribute(id).buffer;\n  }\n  /**\n   * Used to figure out how many vertices there are in this geometry\n   * @returns the number of vertices in the geometry\n   */\n  getSize() {\n    for (const i in this.attributes) {\n      const attribute = this.attributes[i];\n      const buffer = attribute.buffer;\n      return buffer.data.length / (attribute.stride / 4 || attribute.size);\n    }\n    return 0;\n  }\n  /**\n   * Adds an attribute to the geometry.\n   * @param name - The name of the attribute to add.\n   * @param attributeOption - The attribute option to add.\n   */\n  addAttribute(name, attributeOption) {\n    const attribute = ensureIsAttribute(attributeOption);\n    const bufferIndex = this.buffers.indexOf(attribute.buffer);\n    if (bufferIndex === -1) {\n      this.buffers.push(attribute.buffer);\n      attribute.buffer.on(\"update\", this.onBufferUpdate, this);\n      attribute.buffer.on(\"change\", this.onBufferUpdate, this);\n    }\n    this.attributes[name] = attribute;\n  }\n  /**\n   * Adds an index buffer to the geometry.\n   * @param indexBuffer - The index buffer to add. Can be a Buffer, TypedArray, or an array of numbers.\n   */\n  addIndex(indexBuffer) {\n    this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n    this.buffers.push(this.indexBuffer);\n  }\n  /** Returns the bounds of the geometry. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    this._boundsDirty = false;\n    return getGeometryBounds(this, \"aPosition\", this._bounds);\n  }\n  /**\n   * destroys the geometry.\n   * @param destroyBuffers - destroy the buffers associated with this geometry\n   */\n  destroy(destroyBuffers = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    if (destroyBuffers) {\n      this.buffers.forEach((buffer) => buffer.destroy());\n    }\n    this.attributes = null;\n    this.buffers = null;\n    this.indexBuffer = null;\n    this._bounds = null;\n  }\n}\n\nexport { Geometry };\n//# sourceMappingURL=Geometry.mjs.map\n"],"names":["ensureIsAttribute","attribute","Buffer","ensureIsBuffer","Geometry","EventEmitter","options","uid","Bounds","attributes","indexBuffer","topology","i","id","name","attributeOption","getGeometryBounds","destroyBuffers","buffer"],"mappings":";;;;;;AAQA,SAASA,EAAkBC,GAAW;AACpC,UAAIA,aAAqBC,KAAU,MAAM,QAAQD,CAAS,KAAKA,EAAU,uBACvEA,IAAY;AAAA,IACV,QAAQA;AAAA,EACd,IAEEA,EAAU,SAASE,EAAeF,EAAU,QAAQ,EAAK,GAClDA;AACT;AACA,MAAMG,UAAiBC,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlC,YAAYC,IAAU,IAAI;AACxB,aAEA,KAAK,MAAMC,EAAI,UAAU,GAOzB,KAAK,aAAa,GAElB,KAAK,gBAAgB,GACrB,KAAK,UAAU,IAAIC,KACnB,KAAK,eAAe;AACpB,UAAM,EAAE,YAAAC,GAAY,aAAAC,GAAa,UAAAC,EAAQ,IAAKL;AAG9C,QAFA,KAAK,UAAU,IACf,KAAK,aAAa,IACdG;AACF,iBAAWG,KAAKH;AACd,aAAK,aAAaG,GAAGH,EAAWG,CAAC,CAAC;AAGtC,SAAK,gBAAgBN,EAAQ,iBAAiB,GAC1CI,KACF,KAAK,SAASA,CAAW,GAE3B,KAAK,WAAWC,KAAY;AAAA,EAC7B;AAAA,EACD,iBAAiB;AACf,SAAK,eAAe,IACpB,KAAK,KAAK,UAAU,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAaE,GAAI;AACf,WAAO,KAAK,WAAWA,CAAE;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,WAAW;AACT,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAUA,GAAI;AACZ,WAAO,KAAK,aAAaA,CAAE,EAAE;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,UAAU;AACR,eAAWD,KAAK,KAAK,YAAY;AAC/B,YAAMX,IAAY,KAAK,WAAWW,CAAC;AAEnC,aADeX,EAAU,OACX,KAAK,UAAUA,EAAU,SAAS,KAAKA,EAAU;AAAA,IAChE;AACD,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAaa,GAAMC,GAAiB;AAClC,UAAMd,IAAYD,EAAkBe,CAAe;AAEnD,IADoB,KAAK,QAAQ,QAAQd,EAAU,MAAM,MACrC,OAClB,KAAK,QAAQ,KAAKA,EAAU,MAAM,GAClCA,EAAU,OAAO,GAAG,UAAU,KAAK,gBAAgB,IAAI,GACvDA,EAAU,OAAO,GAAG,UAAU,KAAK,gBAAgB,IAAI,IAEzD,KAAK,WAAWa,CAAI,IAAIb;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,SAASS,GAAa;AACpB,SAAK,cAAcP,EAAeO,GAAa,EAAI,GACnD,KAAK,QAAQ,KAAK,KAAK,WAAW;AAAA,EACnC;AAAA;AAAA,EAED,IAAI,SAAS;AACX,WAAK,KAAK,gBAEV,KAAK,eAAe,IACbM,EAAkB,MAAM,aAAa,KAAK,OAAO,KAF/C,KAAK;AAAA,EAGf;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQC,IAAiB,IAAO;AAC9B,SAAK,KAAK,WAAW,IAAI,GACzB,KAAK,mBAAkB,GACnBA,KACF,KAAK,QAAQ,QAAQ,CAACC,MAAWA,EAAO,QAAO,CAAE,GAEnD,KAAK,aAAa,MAClB,KAAK,UAAU,MACf,KAAK,cAAc,MACnB,KAAK,UAAU;AAAA,EAChB;AACH;","x_google_ignoreList":[0]}