{"version":3,"file":"index299.js","sources":["../../../node_modules/.pnpm/@pixi+assets@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/assets/lib/_virtual/loadImageBitmap.worker.mjs"],"sourcesContent":["const WORKER_CODE = `(function() {\n  \"use strict\";\n  async function loadImageBitmap(url) {\n    const response = await fetch(url);\n    if (!response.ok)\n      throw new Error(\\`[WorkerManager.loadImageBitmap] Failed to fetch \\${url}: \\${response.status} \\${response.statusText}\\`);\n    const imageBlob = await response.blob();\n    return await createImageBitmap(imageBlob);\n  }\n  self.onmessage = async (event) => {\n    try {\n      const imageBitmap = await loadImageBitmap(event.data.data[0]);\n      self.postMessage({\n        data: imageBitmap,\n        uuid: event.data.uuid,\n        id: event.data.id\n      }, [imageBitmap]);\n    } catch (e) {\n      self.postMessage({\n        error: e,\n        uuid: event.data.uuid,\n        id: event.data.id\n      });\n    }\n  };\n})();\n`;\nlet WORKER_URL = null;\nclass WorkerInstance {\n  constructor() {\n    WORKER_URL || (WORKER_URL = URL.createObjectURL(new Blob([WORKER_CODE], { type: \"application/javascript\" }))), this.worker = new Worker(WORKER_URL);\n  }\n}\nWorkerInstance.revokeObjectURL = function() {\n  WORKER_URL && (URL.revokeObjectURL(WORKER_URL), WORKER_URL = null);\n};\nexport {\n  WorkerInstance as default\n};\n//# sourceMappingURL=loadImageBitmap.worker.mjs.map\n"],"names":["WORKER_CODE","WORKER_URL","WorkerInstance"],"mappings":"AAAA,MAAMA,IAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BpB,IAAIC,IAAa;AACjB,MAAMC,EAAe;AAAA,EACnB,cAAc;AACZ,IAAAD,MAAeA,IAAa,IAAI,gBAAgB,IAAI,KAAK,CAACD,CAAW,GAAG,EAAE,MAAM,yBAAwB,CAAE,CAAC,IAAI,KAAK,SAAS,IAAI,OAAOC,CAAU;AAAA,EACnJ;AACH;AACAC,EAAe,kBAAkB,WAAW;AAC1C,EAAAD,MAAe,IAAI,gBAAgBA,CAAU,GAAGA,IAAa;AAC/D;","x_google_ignoreList":[0]}