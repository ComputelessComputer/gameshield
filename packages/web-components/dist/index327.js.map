{"version":3,"file":"index327.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/spritesheet/spritesheetAsset.mjs"],"sourcesContent":["import { LoaderParserPriority } from '../assets/loader/parsers/LoaderParser.mjs';\nimport { Resolver } from '../assets/resolver/Resolver.mjs';\nimport { copySearchParams } from '../assets/utils/copySearchParams.mjs';\nimport { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { path } from '../utils/path.mjs';\nimport { Spritesheet } from './Spritesheet.mjs';\n\n\"use strict\";\nconst validImages = [\n  \"jpg\",\n  \"png\",\n  \"jpeg\",\n  \"avif\",\n  \"webp\",\n  \"basis\",\n  \"etc2\",\n  \"bc7\",\n  \"bc6h\",\n  \"bc5\",\n  \"bc4\",\n  \"bc3\",\n  \"bc2\",\n  \"bc1\",\n  \"eac\",\n  \"astc\"\n];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  keys.forEach((key) => {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach((key) => {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    const basePath = path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: (asset) => asset instanceof Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, false)\n  },\n  /** Resolve the resolution of the asset. */\n  resolver: {\n    extension: {\n      type: ExtensionType.ResolveParser,\n      name: \"resolveSpritesheet\"\n    },\n    test: (value) => {\n      const tempURL = value.split(\"?\")[0];\n      const split = tempURL.split(\".\");\n      const extension = split.pop();\n      const format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: (value) => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal,\n      name: \"spritesheetLoader\"\n    },\n    async testParse(asset, options) {\n      return path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      const {\n        texture: imageTexture,\n        // if user need to use preloaded texture\n        imageFilename,\n        // if user need to use custom filename (not from jsonFile.meta.image)\n        textureOptions\n        // if user need to set texture options on texture\n      } = options?.data ?? {};\n      let basePath = path.dirname(options.src);\n      if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n        basePath += \"/\";\n      }\n      let texture;\n      if (imageTexture instanceof Texture) {\n        texture = imageTexture;\n      } else {\n        const imagePath = copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n        const assets = await loader.load([{ src: imagePath, data: textureOptions }]);\n        texture = assets[imagePath];\n      }\n      const spritesheet = new Spritesheet(\n        texture.source,\n        asset\n      );\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item !== \"string\") {\n            continue;\n          }\n          let itemUrl = basePath + item;\n          if (options.data?.ignoreMultiPack) {\n            continue;\n          }\n          itemUrl = copySearchParams(itemUrl, options.src);\n          promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              textureOptions,\n              ignoreMultiPack: true\n            }\n          }));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res;\n        res.forEach((item) => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    async unload(spritesheet, _resolvedAsset, loader) {\n      await loader.unload(spritesheet.textureSource._sourceOrigin);\n      spritesheet.destroy(false);\n    }\n  }\n};\n\nexport { spritesheetAsset };\n//# sourceMappingURL=spritesheetAsset.mjs.map\n"],"names":["validImages","getCacheableAssets","keys","asset","ignoreMultiPack","out","key","basePath","path","item","i","out2","spritesheetAsset","ExtensionType","Spritesheet","value","split","extension","format","_a","Resolver","LoaderParserPriority","options","loader","imageTexture","imageFilename","textureOptions","texture","Texture","imagePath","copySearchParams","spritesheet","multiPacks","promises","itemUrl","_b","res","sp","_resolvedAsset"],"mappings":"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","x_google_ignoreList":[0]}