{"version":3,"file":"index11.js","sources":["../src/games/snake-game.ts"],"sourcesContent":["import { Game, GameOptions } from '../types';\nimport * as PIXI from 'pixi.js';\n\n/**\n * SnakeGame\n * \n * A simple Snake game implementation for GameShield CAPTCHA.\n */\nexport class SnakeGame implements Game {\n  private app: PIXI.Application | null = null;\n  private snake: PIXI.Graphics[] = [];\n  private food: PIXI.Graphics | null = null;\n  private scoreText: PIXI.Text | null = null;\n  private instructionText: PIXI.Text | null = null;\n  \n  private direction = { x: 0, y: 0 };\n  private nextDirection = { x: 0, y: 0 };\n  private gridSize = 20;\n  private score = 0;\n  private targetScore = 5; // Score needed to pass the CAPTCHA\n  private gameStarted = false;\n  private gameEnded = false;\n  private gameLoopCounter = 0;\n  private gameSpeed = 10; // Update every 10 frames\n  \n  private readonly options: GameOptions;\n  \n  constructor(options: GameOptions) {\n    this.options = options;\n    \n    // Adjust difficulty\n    switch (options.difficulty) {\n      case 'easy':\n        this.targetScore = 3;\n        this.gameSpeed = 12;\n        break;\n      case 'medium':\n        this.targetScore = 5;\n        this.gameSpeed = 10;\n        break;\n      case 'hard':\n        this.targetScore = 8;\n        this.gameSpeed = 7;\n        break;\n    }\n  }\n  \n  /**\n   * Mount the game to a container element\n   */\n  public async mount(container: HTMLElement): Promise<void> {\n    // Create PIXI application\n    this.app = new PIXI.Application({\n      width: this.options.width,\n      height: this.options.height,\n      backgroundColor: 0x1a1a1a,\n      resolution: window.devicePixelRatio || 1,\n      antialias: true\n    });\n    \n    // Add the canvas to the container\n    container.appendChild(this.app.view as unknown as HTMLCanvasElement);\n    \n    // Create game elements\n    this.createGameElements();\n    \n    // Add event listeners\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    \n    // Start game loop\n    this.app.ticker.add(this.gameLoop.bind(this));\n  }\n  \n  /**\n   * Destroy the game and clean up resources\n   */\n  public destroy(): void {\n    if (this.app) {\n      // Remove event listeners\n      window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n      \n      // Destroy PIXI application\n      this.app.destroy(true, { children: true, texture: true, baseTexture: true });\n      this.app = null;\n    }\n    \n    // Reset game state\n    this.snake = [];\n    this.food = null;\n    this.scoreText = null;\n    this.instructionText = null;\n    this.gameStarted = false;\n    this.gameEnded = false;\n    this.score = 0;\n    this.direction = { x: 0, y: 0 };\n    this.nextDirection = { x: 0, y: 0 };\n  }\n  \n  /**\n   * Create game elements\n   */\n  private createGameElements(): void {\n    if (!this.app) return;\n    \n    // Create initial snake (3 segments)\n    const startX = Math.floor(this.app.screen.width / this.gridSize / 2) * this.gridSize;\n    const startY = Math.floor(this.app.screen.height / this.gridSize / 2) * this.gridSize;\n    \n    for (let i = 0; i < 3; i++) {\n      const segment = new PIXI.Graphics();\n      segment.beginFill(0x00ff00);\n      segment.drawRect(0, 0, this.gridSize - 2, this.gridSize - 2);\n      segment.endFill();\n      segment.x = startX - i * this.gridSize;\n      segment.y = startY;\n      this.snake.push(segment);\n      this.app.stage.addChild(segment);\n    }\n    \n    // Create food\n    this.food = new PIXI.Graphics();\n    this.food.beginFill(0xff0000);\n    this.food.drawRect(0, 0, this.gridSize - 2, this.gridSize - 2);\n    this.food.endFill();\n    this.placeFood();\n    this.app.stage.addChild(this.food);\n    \n    // Create score text\n    this.scoreText = new PIXI.Text(`Score: ${this.score}/${this.targetScore}`, {\n      fontFamily: 'Arial',\n      fontSize: 16,\n      fill: 0xffffff\n    });\n    this.scoreText.x = 10;\n    this.scoreText.y = 10;\n    this.app.stage.addChild(this.scoreText);\n    \n    // Create instruction text\n    this.instructionText = new PIXI.Text('Use arrow keys to start', {\n      fontFamily: 'Arial',\n      fontSize: 20,\n      fill: 0xffffff\n    });\n    this.instructionText.x = this.app.screen.width / 2 - this.instructionText.width / 2;\n    this.instructionText.y = this.app.screen.height / 2 - 50;\n    this.app.stage.addChild(this.instructionText);\n  }\n  \n  /**\n   * Place food at a random position\n   */\n  private placeFood(): void {\n    if (!this.app || !this.food) return;\n    \n    // Calculate grid dimensions\n    const gridWidth = Math.floor(this.app.screen.width / this.gridSize);\n    const gridHeight = Math.floor(this.app.screen.height / this.gridSize);\n    \n    // Generate random position\n    let foodX, foodY;\n    let validPosition = false;\n    \n    while (!validPosition) {\n      foodX = Math.floor(Math.random() * gridWidth) * this.gridSize;\n      foodY = Math.floor(Math.random() * gridHeight) * this.gridSize;\n      \n      // Check if position overlaps with snake\n      validPosition = true;\n      for (const segment of this.snake) {\n        if (segment.x === foodX && segment.y === foodY) {\n          validPosition = false;\n          break;\n        }\n      }\n    }\n    \n    this.food.x = foodX;\n    this.food.y = foodY;\n  }\n  \n  /**\n   * Handle keyboard input\n   */\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (!this.gameStarted && !this.gameEnded) {\n      if (\n        event.code === 'ArrowUp' ||\n        event.code === 'ArrowDown' ||\n        event.code === 'ArrowLeft' ||\n        event.code === 'ArrowRight'\n      ) {\n        this.startGame();\n      }\n    }\n    \n    // Set direction based on key press\n    switch (event.code) {\n      case 'ArrowUp':\n        if (this.direction.y === 0) { // Prevent 180-degree turns\n          this.nextDirection = { x: 0, y: -1 };\n        }\n        break;\n      case 'ArrowDown':\n        if (this.direction.y === 0) {\n          this.nextDirection = { x: 0, y: 1 };\n        }\n        break;\n      case 'ArrowLeft':\n        if (this.direction.x === 0) {\n          this.nextDirection = { x: -1, y: 0 };\n        }\n        break;\n      case 'ArrowRight':\n        if (this.direction.x === 0) {\n          this.nextDirection = { x: 1, y: 0 };\n        }\n        break;\n    }\n  }\n  \n  /**\n   * Start the game\n   */\n  private startGame(): void {\n    if (!this.app || !this.instructionText) return;\n    \n    this.gameStarted = true;\n    this.direction = { x: 1, y: 0 }; // Start moving right\n    this.nextDirection = { x: 1, y: 0 };\n    this.app.stage.removeChild(this.instructionText);\n    this.instructionText = null;\n  }\n  \n  /**\n   * End the game\n   */\n  private endGame(success: boolean): void {\n    if (!this.app || this.gameEnded) return;\n    \n    this.gameEnded = true;\n    \n    // Create result text\n    const resultText = new PIXI.Text(\n      success ? 'CAPTCHA Passed!' : 'CAPTCHA Failed!',\n      {\n        fontFamily: 'Arial',\n        fontSize: 24,\n        fill: success ? 0x00ff00 : 0xff0000,\n        fontWeight: 'bold'\n      }\n    );\n    \n    resultText.x = this.app.screen.width / 2 - resultText.width / 2;\n    resultText.y = this.app.screen.height / 2 - resultText.height / 2;\n    this.app.stage.addChild(resultText);\n    \n    // Notify completion\n    setTimeout(() => {\n      this.options.onComplete({\n        success,\n        score: this.score\n      });\n    }, 1500);\n  }\n  \n  /**\n   * Game loop\n   */\n  private gameLoop(delta: number): void {\n    if (!this.app || !this.food || !this.scoreText) return;\n    \n    if (!this.gameStarted || this.gameEnded) return;\n    \n    // Slow down game loop\n    this.gameLoopCounter += delta;\n    if (this.gameLoopCounter < this.gameSpeed) return;\n    this.gameLoopCounter = 0;\n    \n    // Update direction\n    this.direction = { ...this.nextDirection };\n    \n    // Move snake\n    const head = this.snake[0];\n    const newHead = new PIXI.Graphics();\n    newHead.beginFill(0x00ff00);\n    newHead.drawRect(0, 0, this.gridSize - 2, this.gridSize - 2);\n    newHead.endFill();\n    newHead.x = head.x + this.direction.x * this.gridSize;\n    newHead.y = head.y + this.direction.y * this.gridSize;\n    \n    // Check for wall collision\n    if (\n      newHead.x < 0 ||\n      newHead.x >= this.app.screen.width ||\n      newHead.y < 0 ||\n      newHead.y >= this.app.screen.height\n    ) {\n      this.endGame(false);\n      return;\n    }\n    \n    // Check for self collision\n    for (const segment of this.snake) {\n      if (newHead.x === segment.x && newHead.y === segment.y) {\n        this.endGame(false);\n        return;\n      }\n    }\n    \n    // Check for food collision\n    if (newHead.x === this.food.x && newHead.y === this.food.y) {\n      // Eat food\n      this.score += 1;\n      this.scoreText.text = `Score: ${this.score}/${this.targetScore}`;\n      this.placeFood();\n      \n      // Check if player has won\n      if (this.score >= this.targetScore) {\n        this.endGame(true);\n        return;\n      }\n    } else {\n      // Remove tail\n      const tail = this.snake.pop();\n      if (tail) {\n        this.app.stage.removeChild(tail);\n      }\n    }\n    \n    // Add new head\n    this.snake.unshift(newHead);\n    this.app.stage.addChild(newHead);\n  }\n}\n"],"names":["SnakeGame","options","container","PIXI.Application","startX","startY","i","segment","PIXI.Graphics","PIXI.Text","gridWidth","gridHeight","foodX","foodY","validPosition","event","success","resultText","delta","head","newHead","tail"],"mappings":"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"}