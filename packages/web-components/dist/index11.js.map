{"version":3,"file":"index11.js","sources":["../../../node_modules/.pnpm/@pixi+mixin-cache-as-bitmap@7.4.3_@pixi+core@7.4.3_@pixi+display@7.4.3_@pixi+core@7.4.3_a2675f1df205af1aab8f861cccb69e92/node_modules/@pixi/mixin-cache-as-bitmap/lib/index.mjs"],"sourcesContent":["import { Matrix, Rectangle, RenderTexture, utils, BaseTexture, Texture } from \"@pixi/core\";\nimport { DisplayObject } from \"@pixi/display\";\nimport { Sprite } from \"@pixi/sprite\";\nconst _tempMatrix = new Matrix();\nDisplayObject.prototype._cacheAsBitmap = !1;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\nclass CacheData {\n  constructor() {\n    this.textureCacheId = null, this.originalRender = null, this.originalRenderCanvas = null, this.originalCalculateBounds = null, this.originalGetLocalBounds = null, this.originalUpdateTransform = null, this.originalDestroy = null, this.originalMask = null, this.originalFilterArea = null, this.originalContainsPoint = null, this.sprite = null;\n  }\n}\nObject.defineProperties(DisplayObject.prototype, {\n  /**\n   * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n   * but can be overriden for performance. Lower values will reduce memory usage at the expense\n   * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n   * @member {number|null} cacheAsBitmapResolution\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   */\n  cacheAsBitmapResolution: {\n    get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set(resolution) {\n      resolution !== this._cacheAsBitmapResolution && (this._cacheAsBitmapResolution = resolution, this.cacheAsBitmap && (this.cacheAsBitmap = !1, this.cacheAsBitmap = !0));\n    }\n  },\n  /**\n   * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n   * sample count is used.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n   * @member {number|null} cacheAsBitmapMultisample\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   */\n  cacheAsBitmapMultisample: {\n    get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set(multisample) {\n      multisample !== this._cacheAsBitmapMultisample && (this._cacheAsBitmapMultisample = multisample, this.cacheAsBitmap && (this.cacheAsBitmap = !1, this.cacheAsBitmap = !0));\n    }\n  },\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snapshot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get() {\n      return this._cacheAsBitmap;\n    },\n    set(value) {\n      if (this._cacheAsBitmap === value)\n        return;\n      this._cacheAsBitmap = value;\n      let data;\n      value ? (this._cacheData || (this._cacheData = new CacheData()), data = this._cacheData, data.originalRender = this.render, data.originalRenderCanvas = this.renderCanvas, data.originalUpdateTransform = this.updateTransform, data.originalCalculateBounds = this.calculateBounds, data.originalGetLocalBounds = this.getLocalBounds, data.originalDestroy = this.destroy, data.originalContainsPoint = this.containsPoint, data.originalMask = this._mask, data.originalFilterArea = this.filterArea, this.render = this._renderCached, this.renderCanvas = this._renderCachedCanvas, this.destroy = this._cacheAsBitmapDestroy) : (data = this._cacheData, data.sprite && this._destroyCachedDisplayObject(), this.render = data.originalRender, this.renderCanvas = data.originalRenderCanvas, this.calculateBounds = data.originalCalculateBounds, this.getLocalBounds = data.originalGetLocalBounds, this.destroy = data.originalDestroy, this.updateTransform = data.originalUpdateTransform, this.containsPoint = data.originalContainsPoint, this._mask = data.originalMask, this.filterArea = data.originalFilterArea);\n    }\n  }\n});\nDisplayObject.prototype._renderCached = function(renderer) {\n  !this.visible || this.worldAlpha <= 0 || !this.renderable || (this._initCachedDisplayObject(renderer), this._cacheData.sprite.transform._worldID = this.transform._worldID, this._cacheData.sprite.worldAlpha = this.worldAlpha, this._cacheData.sprite._render(renderer));\n};\nDisplayObject.prototype._initCachedDisplayObject = function(renderer) {\n  if (this._cacheData?.sprite)\n    return;\n  const cacheAlpha = this.alpha;\n  this.alpha = 1, renderer.batch.flush();\n  const bounds = this.getLocalBounds(new Rectangle(), !0);\n  if (this.filters?.length) {\n    const padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  const resolution = this.cacheAsBitmapResolution || renderer.resolution;\n  bounds.ceil(resolution), bounds.width = Math.max(bounds.width, 1 / resolution), bounds.height = Math.max(bounds.height, 1 / resolution);\n  const cachedRenderTexture = renderer.renderTexture.current, cachedSourceFrame = renderer.renderTexture.sourceFrame.clone(), cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone(), cachedProjectionTransform = renderer.projection.transform, renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution,\n    multisample: this.cacheAsBitmapMultisample ?? renderer.multisample\n  }), textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n  this._cacheData.textureCacheId = textureCacheId, BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId), Texture.addToCache(renderTexture, textureCacheId);\n  const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  this.render = this._cacheData.originalRender, renderer.render(this, { renderTexture, clear: !0, transform: m, skipUpdateTransform: !1 }), renderer.framebuffer.blit(), renderer.projection.transform = cachedProjectionTransform, renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame), this.render = this._renderCached, this.updateTransform = this.displayObjectUpdateTransform, this.calculateBounds = this._calculateCachedBounds, this.getLocalBounds = this._getCachedLocalBounds, this._mask = null, this.filterArea = null, this.alpha = cacheAlpha;\n  const cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform, cachedSprite.anchor.x = -(bounds.x / bounds.width), cachedSprite.anchor.y = -(bounds.y / bounds.height), cachedSprite.alpha = cacheAlpha, cachedSprite._bounds = this._bounds, this._cacheData.sprite = cachedSprite, this.transform._parentID = -1, this.parent ? this.updateTransform() : (this.enableTempParent(), this.updateTransform(), this.disableTempParent(null)), this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\nDisplayObject.prototype._renderCachedCanvas = function(renderer) {\n  !this.visible || this.worldAlpha <= 0 || !this.renderable || (this._initCachedDisplayObjectCanvas(renderer), this._cacheData.sprite.worldAlpha = this.worldAlpha, this._cacheData.sprite._renderCanvas(renderer));\n};\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function(renderer) {\n  if (this._cacheData?.sprite)\n    return;\n  const bounds = this.getLocalBounds(new Rectangle(), !0), cacheAlpha = this.alpha;\n  this.alpha = 1;\n  const cachedRenderTarget = renderer.canvasContext.activeContext, cachedProjectionTransform = renderer._projTransform, resolution = this.cacheAsBitmapResolution || renderer.resolution;\n  bounds.ceil(resolution), bounds.width = Math.max(bounds.width, 1 / resolution), bounds.height = Math.max(bounds.height, 1 / resolution);\n  const renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution\n  }), textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n  this._cacheData.textureCacheId = textureCacheId, BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId), Texture.addToCache(renderTexture, textureCacheId);\n  const m = _tempMatrix;\n  this.transform.localTransform.copyTo(m), m.invert(), m.tx -= bounds.x, m.ty -= bounds.y, this.renderCanvas = this._cacheData.originalRenderCanvas, renderer.render(this, { renderTexture, clear: !0, transform: m, skipUpdateTransform: !1 }), renderer.canvasContext.activeContext = cachedRenderTarget, renderer._projTransform = cachedProjectionTransform, this.renderCanvas = this._renderCachedCanvas, this.updateTransform = this.displayObjectUpdateTransform, this.calculateBounds = this._calculateCachedBounds, this.getLocalBounds = this._getCachedLocalBounds, this._mask = null, this.filterArea = null, this.alpha = cacheAlpha;\n  const cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform, cachedSprite.anchor.x = -(bounds.x / bounds.width), cachedSprite.anchor.y = -(bounds.y / bounds.height), cachedSprite.alpha = cacheAlpha, cachedSprite._bounds = this._bounds, this._cacheData.sprite = cachedSprite, this.transform._parentID = -1, this.parent ? this.updateTransform() : (this.parent = renderer._tempDisplayObjectParent, this.updateTransform(), this.parent = null), this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\nDisplayObject.prototype._calculateCachedBounds = function() {\n  this._bounds.clear(), this._cacheData.sprite.transform._worldID = this.transform._worldID, this._cacheData.sprite._calculateBounds(), this._bounds.updateID = this._boundsID;\n};\nDisplayObject.prototype._getCachedLocalBounds = function() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\nDisplayObject.prototype._destroyCachedDisplayObject = function() {\n  this._cacheData.sprite._texture.destroy(!0), this._cacheData.sprite = null, BaseTexture.removeFromCache(this._cacheData.textureCacheId), Texture.removeFromCache(this._cacheData.textureCacheId), this._cacheData.textureCacheId = null;\n};\nDisplayObject.prototype._cacheAsBitmapDestroy = function(options) {\n  this.cacheAsBitmap = !1, this.destroy(options);\n};\nexport {\n  CacheData\n};\n//# sourceMappingURL=index.mjs.map\n"],"names":["_tempMatrix","Matrix","DisplayObject","CacheData","resolution","multisample","value","data","renderer","_a","cacheAlpha","bounds","Rectangle","_b","padding","cachedRenderTexture","cachedSourceFrame","cachedDestinationFrame","cachedProjectionTransform","renderTexture","RenderTexture","textureCacheId","utils.uid","BaseTexture","Texture","m","cachedSprite","Sprite","cachedRenderTarget","options"],"mappings":"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","x_google_ignoreList":[0]}