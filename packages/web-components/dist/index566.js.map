{"version":3,"file":"index566.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs"],"sourcesContent":["\"use strict\";\nfunction getBitmapTextLayout(chars, style, font, trimEnd) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    if (trimEnd) {\n      let lastChar = currentLine.chars[index];\n      while (lastChar === \" \") {\n        currentLine.width -= font.chars[lastChar].xAdvance;\n        lastChar = currentLine.chars[--index];\n      }\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && currentLine.width + currentWord.width - adjustedLetterSpacing > adjustedWordWrapWidth;\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n//# sourceMappingURL=getBitmapTextLayout.mjs.map\n"],"names":["getBitmapTextLayout","chars","style","font","trimEnd","layoutData","currentLine","previousChar","firstWord","currentWord","nextWord","word","start","j","position","nextLine","index","lastChar","scale","adjustedLetterSpacing","adjustedWordWrapWidth","i","char","isEnd","charData","spaceWidth","kerning","nextCharWidth","alignCenter","alignRight","alignJustify","measurementData","line","offset","width","indy","spaceIndex","totalSpaces"],"mappings":"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","x_google_ignoreList":[0]}