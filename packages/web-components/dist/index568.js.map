{"version":3,"file":"index568.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n"],"names":["BitmapTextPipe","renderer","bitmapText","graphicsRenderable","instructionSet","syncWithProxy","renderableUid","context","BigPool","proxyGraphics","bitmapFont","BitmapFontManager","SdfShader","chars","style","currentY","bitmapTextLayout","getBitmapTextLayout","index","padding","scale","tx","ty","tint","i","line","j","char","charData","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","a","b","c","d","dx","dy","worldScale","fontScale","distance","uid","ExtensionType","container","proxy"],"mappings":"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","x_google_ignoreList":[0]}