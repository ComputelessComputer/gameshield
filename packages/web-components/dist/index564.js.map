{"version":3,"file":"index564.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/text/TextStyle.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern.mjs';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext.mjs';\nimport { toFillStyle, toStrokeStyle } from '../graphics/shared/utils/convertFillInputToFillStyle.mjs';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey.mjs';\n\n\"use strict\";\nconst _TextStyle = class _TextStyle extends EventEmitter {\n  constructor(style = {}) {\n    super();\n    convertV7Tov8Style(style);\n    const fullStyle = { ..._TextStyle.defaultTextStyle, ...style };\n    for (const key in fullStyle) {\n      const thisKey = key;\n      this[thisKey] = fullStyle[key];\n    }\n    this.update();\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align = value;\n    this.update();\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(value) {\n    this._breakWords = value;\n    this.update();\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(value) {\n    if (value !== null && typeof value === \"object\") {\n      this._dropShadow = this._createProxy({ ..._TextStyle.defaultDropShadow, ...value });\n    } else {\n      this._dropShadow = value ? this._createProxy({ ..._TextStyle.defaultDropShadow }) : null;\n    }\n    this.update();\n  }\n  /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    this._fontFamily = value;\n    this.update();\n  }\n  /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(value) {\n    if (typeof value === \"string\") {\n      this._fontSize = parseInt(value, 10);\n    } else {\n      this._fontSize = value;\n    }\n    this.update();\n  }\n  /**\n   * The font style.\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    this._fontStyle = value.toLowerCase();\n    this.update();\n  }\n  /**\n   * The font variant.\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(value) {\n    this._fontVariant = value;\n    this.update();\n  }\n  /**\n   * The font weight.\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    this._fontWeight = value;\n    this.update();\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(value) {\n    this._leading = value;\n    this.update();\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing = value;\n    this.update();\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(value) {\n    this._lineHeight = value;\n    this.update();\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(value) {\n    this._padding = value;\n    this.update();\n  }\n  /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n  get trim() {\n    return this._trim;\n  }\n  set trim(value) {\n    this._trim = value;\n    this.update();\n  }\n  /**\n   * The baseline of the text that is rendered.\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(value) {\n    this._textBaseline = value;\n    this.update();\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(value) {\n    this._whiteSpace = value;\n    this.update();\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(value) {\n    this._wordWrap = value;\n    this.update();\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(value) {\n    this._wordWrapWidth = value;\n    this.update();\n  }\n  /**\n   * The fill style that will be used to color the text.\n   * This can be:\n   * - A color string like 'red', '#00FF00', or 'rgba(255,0,0,0.5)'\n   * - A hex number like 0xff0000 for red\n   * - A FillStyle object with properties like { color: 0xff0000, alpha: 0.5 }\n   * - A FillGradient for gradient fills\n   * - A FillPattern for pattern/texture fills\n   *\n   * When using a FillGradient, vertical gradients (angle of 90 degrees) are applied per line of text,\n   * while gradients at any other angle are spread across the entire text body as a whole.\n   * @example\n   * // Vertical gradient applied per line\n   * const verticalGradient = new FillGradient(0, 0, 0, 1)\n   *     .addColorStop(0, 0xff0000)\n   *     .addColorStop(1, 0x0000ff);\n   *\n   * const text = new Text({\n   *     text: 'Line 1\\nLine 2',\n   *     style: { fill: verticalGradient }\n   * });\n   *\n   * To manage the gradient in a global scope, set the textureSpace property of the FillGradient to 'global'.\n   * @type {string|number|FillStyle|FillGradient|FillPattern}\n   */\n  get fill() {\n    return this._originalFill;\n  }\n  set fill(value) {\n    if (value === this._originalFill)\n      return;\n    this._originalFill = value;\n    if (this._isFillStyle(value)) {\n      this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () => {\n        this._fill = toFillStyle(\n          { ...this._originalFill },\n          GraphicsContext.defaultFillStyle\n        );\n      });\n    }\n    this._fill = toFillStyle(\n      value === 0 ? \"black\" : value,\n      GraphicsContext.defaultFillStyle\n    );\n    this.update();\n  }\n  /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n  get stroke() {\n    return this._originalStroke;\n  }\n  set stroke(value) {\n    if (value === this._originalStroke)\n      return;\n    this._originalStroke = value;\n    if (this._isFillStyle(value)) {\n      this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () => {\n        this._stroke = toStrokeStyle(\n          { ...this._originalStroke },\n          GraphicsContext.defaultStrokeStyle\n        );\n      });\n    }\n    this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n    this.update();\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this);\n    return this._styleKey;\n  }\n  update() {\n    this._styleKey = null;\n    this.emit(\"update\", this);\n  }\n  /** Resets all properties to the default values */\n  reset() {\n    const defaultStyle = _TextStyle.defaultTextStyle;\n    for (const key in defaultStyle) {\n      this[key] = defaultStyle[key];\n    }\n  }\n  get styleKey() {\n    return this._styleKey || this._generateKey();\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * @returns New cloned TextStyle object\n   */\n  clone() {\n    return new _TextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      leading: this.leading,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      textBaseline: this.textBaseline,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth\n    });\n  }\n  /**\n   * Destroys this text style.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n   */\n  destroy(options = false) {\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fill?.texture) {\n        this._fill.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalFill?.texture) {\n        this._originalFill.texture.destroy(destroyTextureSource);\n      }\n      if (this._stroke?.texture) {\n        this._stroke.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalStroke?.texture) {\n        this._originalStroke.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fill = null;\n    this._stroke = null;\n    this.dropShadow = null;\n    this._originalStroke = null;\n    this._originalFill = null;\n  }\n  _createProxy(value, cb) {\n    return new Proxy(value, {\n      set: (target, property, newValue) => {\n        target[property] = newValue;\n        cb?.(property, newValue);\n        this.update();\n        return true;\n      }\n    });\n  }\n  _isFillStyle(value) {\n    return (value ?? null) !== null && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern);\n  }\n};\n/** The default drop shadow settings */\n_TextStyle.defaultDropShadow = {\n  /** Set alpha for the drop shadow */\n  alpha: 1,\n  /** Set a angle of the drop shadow */\n  angle: Math.PI / 6,\n  /** Set a shadow blur radius */\n  blur: 0,\n  /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n  color: \"black\",\n  /** Set a distance of the drop shadow */\n  distance: 5\n};\n/** The default text style settings */\n_TextStyle.defaultTextStyle = {\n  /**\n   * See {@link TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link TextStyle.breakWords} */\n  breakWords: false,\n  /** See {@link TextStyle.dropShadow} */\n  dropShadow: null,\n  /**\n   * See {@link TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link TextStyle.fontSize}\n   * @type {number|string}\n   */\n  fontSize: 26,\n  /**\n   * See {@link TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link TextStyle.leading} */\n  leading: 0,\n  /** See {@link TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link TextStyle.lineHeight} */\n  lineHeight: 0,\n  /** See {@link TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: null,\n  /**\n   * See {@link TextStyle.textBaseline}\n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link TextStyle.trim} */\n  trim: false,\n  /**\n   * See {@link TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link TextStyle.wordWrap} */\n  wordWrap: false,\n  /** See {@link TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction convertV7Tov8Style(style) {\n  const oldStyle = style;\n  if (typeof oldStyle.dropShadow === \"boolean\" && oldStyle.dropShadow) {\n    const defaults = TextStyle.defaultDropShadow;\n    style.dropShadow = {\n      alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n      angle: oldStyle.dropShadowAngle ?? defaults.angle,\n      blur: oldStyle.dropShadowBlur ?? defaults.blur,\n      color: oldStyle.dropShadowColor ?? defaults.color,\n      distance: oldStyle.dropShadowDistance ?? defaults.distance\n    };\n  }\n  if (oldStyle.strokeThickness !== void 0) {\n    deprecation(v8_0_0, \"strokeThickness is now a part of stroke\");\n    const color = oldStyle.stroke;\n    let obj = {};\n    if (Color.isColorLike(color)) {\n      obj.color = color;\n    } else if (color instanceof FillGradient || color instanceof FillPattern) {\n      obj.fill = color;\n    } else if (Object.hasOwnProperty.call(color, \"color\") || Object.hasOwnProperty.call(color, \"fill\")) {\n      obj = color;\n    } else {\n      throw new Error(\"Invalid stroke value.\");\n    }\n    style.stroke = {\n      ...obj,\n      width: oldStyle.strokeThickness\n    };\n  }\n  if (Array.isArray(oldStyle.fillGradientStops)) {\n    deprecation(v8_0_0, \"gradient fill is now a fill pattern: `new FillGradient(...)`\");\n    let fontSize;\n    if (style.fontSize == null) {\n      style.fontSize = TextStyle.defaultTextStyle.fontSize;\n    } else if (typeof style.fontSize === \"string\") {\n      fontSize = parseInt(style.fontSize, 10);\n    } else {\n      fontSize = style.fontSize;\n    }\n    const gradientFill = new FillGradient({\n      start: { x: 0, y: 0 },\n      end: { x: 0, y: (fontSize || 0) * 1.7 }\n    });\n    const fills = oldStyle.fillGradientStops.map((color) => Color.shared.setValue(color).toNumber());\n    fills.forEach((number, index) => {\n      const ratio = index / (fills.length - 1);\n      gradientFill.addColorStop(ratio, number);\n    });\n    style.fill = {\n      fill: gradientFill\n    };\n  }\n}\n\nexport { TextStyle };\n//# sourceMappingURL=TextStyle.mjs.map\n"],"names":["_TextStyle","EventEmitter","style","convertV7Tov8Style","fullStyle","key","thisKey","value","GraphicsContext","toFillStyle","toStrokeStyle","generateTextStyleKey","defaultStyle","options","destroyTextureSource","_a","_b","_c","_d","cb","target","property","newValue","Color","FillGradient","FillPattern","TextStyle","oldStyle","defaults","deprecation","v8_0_0","color","obj","fontSize","gradientFill","fills","number","index","ratio"],"mappings":"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","x_google_ignoreList":[0]}