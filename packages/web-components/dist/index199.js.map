{"version":3,"file":"index199.js","sources":["../../../node_modules/.pnpm/@pixi+core@7.4.3/node_modules/@pixi/core/lib/filters/spriteMask/SpriteMaskFilter.mjs"],"sourcesContent":["import { Matrix } from \"@pixi/math\";\nimport { TextureMatrix } from \"../../textures/TextureMatrix.mjs\";\nimport { Filter } from \"../Filter.mjs\";\nimport fragment from \"./spriteMaskFilter.frag.mjs\";\nimport vertex from \"./spriteMaskFilter.vert.mjs\";\nclass SpriteMaskFilter extends Filter {\n  /** @ignore */\n  constructor(vertexSrc, fragmentSrc, uniforms) {\n    let sprite = null;\n    typeof vertexSrc != \"string\" && fragmentSrc === void 0 && uniforms === void 0 && (sprite = vertexSrc, vertexSrc = void 0, fragmentSrc = void 0, uniforms = void 0), super(vertexSrc || vertex, fragmentSrc || fragment, uniforms), this.maskSprite = sprite, this.maskMatrix = new Matrix();\n  }\n  /**\n   * Sprite mask\n   * @type {PIXI.DisplayObject}\n   */\n  get maskSprite() {\n    return this._maskSprite;\n  }\n  set maskSprite(value) {\n    this._maskSprite = value, this._maskSprite && (this._maskSprite.renderable = !1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it.\n   */\n  apply(filterManager, input, output, clearMode) {\n    const maskSprite = this._maskSprite, tex = maskSprite._texture;\n    tex.valid && (tex.uvMatrix || (tex.uvMatrix = new TextureMatrix(tex, 0)), tex.uvMatrix.update(), this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0 : 1, this.uniforms.mask = tex, this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite).prepend(tex.uvMatrix.mapCoord), this.uniforms.alpha = maskSprite.worldAlpha, this.uniforms.maskClamp = tex.uvMatrix.uClampFrame, filterManager.applyFilter(this, input, output, clearMode));\n  }\n}\nexport {\n  SpriteMaskFilter\n};\n//# sourceMappingURL=SpriteMaskFilter.mjs.map\n"],"names":["SpriteMaskFilter","Filter","vertexSrc","fragmentSrc","uniforms","sprite","vertex","fragment","Matrix","value","filterManager","input","output","clearMode","maskSprite","tex","TextureMatrix"],"mappings":";;;;;;;;;;;;;;AAKA,MAAMA,UAAyBC,EAAO;AAAA;AAAA,EAEpC,YAAYC,GAAWC,GAAaC,GAAU;AAC5C,QAAIC,IAAS;AACb,WAAOH,KAAa,YAAYC,MAAgB,UAAUC,MAAa,WAAWC,IAASH,GAAWA,IAAY,QAAQC,IAAc,QAAQC,IAAW,SAAS,MAAMF,KAAaI,GAAQH,KAAeI,GAAUH,CAAQ,GAAG,KAAK,aAAaC,GAAQ,KAAK,aAAa,IAAIG;EACpR;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,WAAWC,GAAO;AACpB,SAAK,cAAcA,GAAO,KAAK,gBAAgB,KAAK,YAAY,aAAa;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAMC,GAAeC,GAAOC,GAAQC,GAAW;AAC7C,UAAMC,IAAa,KAAK,aAAaC,IAAMD,EAAW;AACtD,IAAAC,EAAI,UAAUA,EAAI,aAAaA,EAAI,WAAW,IAAIC,EAAcD,GAAK,CAAC,IAAIA,EAAI,SAAS,OAAM,GAAI,KAAK,SAAS,WAAWA,EAAI,YAAY,YAAY,IAAI,GAAG,KAAK,SAAS,OAAOA,GAAK,KAAK,SAAS,cAAcL,EAAc,sBAAsB,KAAK,YAAYI,CAAU,EAAE,QAAQC,EAAI,SAAS,QAAQ,GAAG,KAAK,SAAS,QAAQD,EAAW,YAAY,KAAK,SAAS,YAAYC,EAAI,SAAS,aAAaL,EAAc,YAAY,MAAMC,GAAOC,GAAQC,CAAS;AAAA,EAC9c;AACH;","x_google_ignoreList":[0]}