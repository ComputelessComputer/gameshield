{"version":3,"file":"index446.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/utils/pool/PoolGroup.mjs"],"sourcesContent":["import { Pool } from './Pool.mjs';\n\n\"use strict\";\nclass PoolGroupClass {\n  constructor() {\n    /**\n     * A map to store the pools by their class type.\n     * @private\n     */\n    this._poolsByClass = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Prepopulates a specific pool with a given number of items.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n   * @param {number} total - The number of items to add to the pool.\n   */\n  prepopulate(Class, total) {\n    const classPool = this.getPool(Class);\n    classPool.prepopulate(total);\n  }\n  /**\n   * Gets an item from a specific pool.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(Class, data) {\n    const pool = this.getPool(Class);\n    return pool.get(data);\n  }\n  /**\n   * Returns an item to its respective pool.\n   * @param {PoolItem} item - The item to return to the pool.\n   */\n  return(item) {\n    const pool = this.getPool(item.constructor);\n    pool.return(item);\n  }\n  /**\n   * Gets a specific pool based on the class type.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} ClassType - The constructor of the items in the pool.\n   * @returns {Pool<T>} The pool of the given class type.\n   */\n  getPool(ClassType) {\n    if (!this._poolsByClass.has(ClassType)) {\n      this._poolsByClass.set(ClassType, new Pool(ClassType));\n    }\n    return this._poolsByClass.get(ClassType);\n  }\n  /** gets the usage stats of each pool in the system */\n  stats() {\n    const stats = {};\n    this._poolsByClass.forEach((pool) => {\n      const name = stats[pool._classType.name] ? pool._classType.name + pool._classType.ID : pool._classType.name;\n      stats[name] = {\n        free: pool.totalFree,\n        used: pool.totalUsed,\n        size: pool.totalSize\n      };\n    });\n    return stats;\n  }\n}\nconst BigPool = new PoolGroupClass();\n\nexport { BigPool, PoolGroupClass };\n//# sourceMappingURL=PoolGroup.mjs.map\n"],"names":["PoolGroupClass","Class","total","data","item","ClassType","Pool","stats","pool","name","BigPool"],"mappings":";AAGA,MAAMA,EAAe;AAAA,EACnB,cAAc;AAKZ,SAAK,gBAAgC,oBAAI;EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAYC,GAAOC,GAAO;AAExB,IADkB,KAAK,QAAQD,CAAK,EAC1B,YAAYC,CAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,IAAID,GAAOE,GAAM;AAEf,WADa,KAAK,QAAQF,CAAK,EACnB,IAAIE,CAAI;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,OAAOC,GAAM;AAEX,IADa,KAAK,QAAQA,EAAK,WAAW,EACrC,OAAOA,CAAI;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,QAAQC,GAAW;AACjB,WAAK,KAAK,cAAc,IAAIA,CAAS,KACnC,KAAK,cAAc,IAAIA,GAAW,IAAIC,EAAKD,CAAS,CAAC,GAEhD,KAAK,cAAc,IAAIA,CAAS;AAAA,EACxC;AAAA;AAAA,EAED,QAAQ;AACN,UAAME,IAAQ,CAAA;AACd,gBAAK,cAAc,QAAQ,CAACC,MAAS;AACnC,YAAMC,IAAOF,EAAMC,EAAK,WAAW,IAAI,IAAIA,EAAK,WAAW,OAAOA,EAAK,WAAW,KAAKA,EAAK,WAAW;AACvG,MAAAD,EAAME,CAAI,IAAI;AAAA,QACZ,MAAMD,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,QACX,MAAMA,EAAK;AAAA,MACnB;AAAA,IACA,CAAK,GACMD;AAAA,EACR;AACH;AACK,MAACG,IAAU,IAAIV,EAAc;","x_google_ignoreList":[0]}