{"version":3,"file":"index31.js","sources":["../../../node_modules/.pnpm/@pixi+math@7.4.3/node_modules/@pixi/math/lib/Matrix.mjs"],"sourcesContent":["import { PI_2 } from \"./const.mjs\";\nimport { Point } from \"./Point.mjs\";\nclass Matrix {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.array = null, this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0], this.b = array[1], this.c = array[3], this.d = array[4], this.tx = array[2], this.ty = array[5];\n  }\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    return this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty, this;\n  }\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    this.array || (this.array = new Float32Array(9));\n    const array = out || this.array;\n    return transpose ? (array[0] = this.a, array[1] = this.b, array[2] = 0, array[3] = this.c, array[4] = this.d, array[5] = 0, array[6] = this.tx, array[7] = this.ty, array[8] = 1) : (array[0] = this.a, array[1] = this.c, array[2] = this.tx, array[3] = this.b, array[4] = this.d, array[5] = this.ty, array[6] = 0, array[7] = 0, array[8] = 1), array;\n  }\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {PIXI.Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n    const x = pos.x, y = pos.y;\n    return newPos.x = this.a * x + this.c * y + this.tx, newPos.y = this.b * x + this.d * y + this.ty, newPos;\n  }\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n    const id = 1 / (this.a * this.d + this.c * -this.b), x = pos.x, y = pos.y;\n    return newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id, newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id, newPos;\n  }\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    return this.tx += x, this.ty += y, this;\n  }\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    return this.a *= x, this.d *= y, this.c *= x, this.b *= y, this.tx *= x, this.ty *= y, this;\n  }\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle), sin = Math.sin(angle), a1 = this.a, c1 = this.c, tx1 = this.tx;\n    return this.a = a1 * cos - this.b * sin, this.b = a1 * sin + this.b * cos, this.c = c1 * cos - this.d * sin, this.d = c1 * sin + this.d * cos, this.tx = tx1 * cos - this.ty * sin, this.ty = tx1 * sin + this.ty * cos, this;\n  }\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a, b1 = this.b, c1 = this.c, d1 = this.d;\n    return this.a = matrix.a * a1 + matrix.b * c1, this.b = matrix.a * b1 + matrix.b * d1, this.c = matrix.c * a1 + matrix.d * c1, this.d = matrix.c * b1 + matrix.d * d1, this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx, this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty, this;\n  }\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    return this.a = Math.cos(rotation + skewY) * scaleX, this.b = Math.sin(rotation + skewY) * scaleX, this.c = -Math.sin(rotation - skewX) * scaleY, this.d = Math.cos(rotation - skewX) * scaleY, this.tx = x - (pivotX * this.a + pivotY * this.c), this.ty = y - (pivotX * this.b + pivotY * this.d), this;\n  }\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a, c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c, this.b = a1 * matrix.b + this.b * matrix.d, this.c = c1 * matrix.a + this.d * matrix.c, this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    return this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx, this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty, this;\n  }\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  decompose(transform) {\n    const a = this.a, b = this.b, c = this.c, d = this.d, pivot = transform.pivot, skewX = -Math.atan2(-c, d), skewY = Math.atan2(b, a), delta = Math.abs(skewX + skewY);\n    return delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5 ? (transform.rotation = skewY, transform.skew.x = transform.skew.y = 0) : (transform.rotation = 0, transform.skew.x = skewX, transform.skew.y = skewY), transform.scale.x = Math.sqrt(a * a + b * b), transform.scale.y = Math.sqrt(c * c + d * d), transform.position.x = this.tx + (pivot.x * a + pivot.y * c), transform.position.y = this.ty + (pivot.x * b + pivot.y * d), transform;\n  }\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a, b1 = this.b, c1 = this.c, d1 = this.d, tx1 = this.tx, n = a1 * d1 - b1 * c1;\n    return this.a = d1 / n, this.b = -b1 / n, this.c = -c1 / n, this.d = a1 / n, this.tx = (c1 * this.ty - d1 * tx1) / n, this.ty = -(a1 * this.ty - b1 * tx1) / n, this;\n  }\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  identity() {\n    return this.a = 1, this.b = 0, this.c = 0, this.d = 1, this.tx = 0, this.ty = 0, this;\n  }\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n    return matrix.a = this.a, matrix.b = this.b, matrix.c = this.c, matrix.d = this.d, matrix.tx = this.tx, matrix.ty = this.ty, matrix;\n  }\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  copyTo(matrix) {\n    return matrix.a = this.a, matrix.b = this.b, matrix.c = this.c, matrix.d = this.d, matrix.tx = this.tx, matrix.ty = this.ty, matrix;\n  }\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param {PIXI.Matrix} matrix - The matrix to copy from.\n   * @returns {PIXI.Matrix} this\n   */\n  copyFrom(matrix) {\n    return this.a = matrix.a, this.b = matrix.b, this.c = matrix.c, this.d = matrix.d, this.tx = matrix.tx, this.ty = matrix.ty, this;\n  }\n  /**\n   * A default (identity) matrix\n   * @readonly\n   */\n  static get IDENTITY() {\n    return new Matrix();\n  }\n  /**\n   * A temp matrix\n   * @readonly\n   */\n  static get TEMP_MATRIX() {\n    return new Matrix();\n  }\n}\nMatrix.prototype.toString = function() {\n  return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n};\nexport {\n  Matrix\n};\n//# sourceMappingURL=Matrix.mjs.map\n"],"names":["Matrix","a","b","c","d","tx","ty","array","transpose","out","pos","newPos","Point","x","y","id","angle","cos","sin","a1","c1","tx1","matrix","b1","d1","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","transform","pivot","delta","PI_2","n"],"mappings":"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","x_google_ignoreList":[0]}