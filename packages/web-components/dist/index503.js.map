{"version":3,"file":"index503.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContextSystem.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup.mjs';\nimport { DefaultBatcher } from '../../../rendering/batcher/shared/DefaultBatcher.mjs';\nimport { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet.mjs';\nimport { deprecation, v8_3_4 } from '../../../utils/logging/deprecation.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { buildContextBatches } from './utils/buildContextBatches.mjs';\n\n\"use strict\";\nclass GpuGraphicsContext {\n  constructor() {\n    this.batches = [];\n    this.geometryData = {\n      vertices: [],\n      uvs: [],\n      indices: []\n    };\n  }\n}\nclass GraphicsContextRenderData {\n  constructor() {\n    this.batcher = new DefaultBatcher();\n    this.instructions = new InstructionSet();\n  }\n  init() {\n    this.instructions.reset();\n  }\n  /**\n   * @deprecated since version 8.0.0\n   * Use `batcher.geometry` instead.\n   * @see {Batcher#geometry}\n   */\n  get geometry() {\n    deprecation(v8_3_4, \"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead.\");\n    return this.batcher.geometry;\n  }\n}\nconst _GraphicsContextSystem = class _GraphicsContextSystem {\n  constructor(renderer) {\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    this._gpuContextHash = {};\n    // used for non-batchable graphics\n    this._graphicsDataContextHash = /* @__PURE__ */ Object.create(null);\n    renderer.renderableGC.addManagedHash(this, \"_gpuContextHash\");\n    renderer.renderableGC.addManagedHash(this, \"_graphicsDataContextHash\");\n  }\n  /**\n   * Runner init called, update the default options\n   * @ignore\n   */\n  init(options) {\n    _GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness ?? _GraphicsContextSystem.defaultOptions.bezierSmoothness;\n  }\n  getContextRenderData(context) {\n    return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n  }\n  // Context management functions\n  updateGpuContext(context) {\n    let gpuContext = this._gpuContextHash[context.uid] || this._initContext(context);\n    if (context.dirty) {\n      if (gpuContext) {\n        this._cleanGraphicsContextData(context);\n      } else {\n        gpuContext = this._initContext(context);\n      }\n      buildContextBatches(context, gpuContext);\n      const batchMode = context.batchMode;\n      if (context.customShader || batchMode === \"no-batch\") {\n        gpuContext.isBatchable = false;\n      } else if (batchMode === \"auto\") {\n        gpuContext.isBatchable = gpuContext.geometryData.vertices.length < 400;\n      }\n      context.dirty = false;\n    }\n    return gpuContext;\n  }\n  getGpuContext(context) {\n    return this._gpuContextHash[context.uid] || this._initContext(context);\n  }\n  _initContextRenderData(context) {\n    const graphicsData = BigPool.get(GraphicsContextRenderData);\n    const { batches, geometryData } = this._gpuContextHash[context.uid];\n    const vertexSize = geometryData.vertices.length;\n    const indexSize = geometryData.indices.length;\n    for (let i = 0; i < batches.length; i++) {\n      batches[i].applyTransform = false;\n    }\n    const batcher = graphicsData.batcher;\n    batcher.ensureAttributeBuffer(vertexSize);\n    batcher.ensureIndexBuffer(indexSize);\n    batcher.begin();\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batcher.add(batch);\n    }\n    batcher.finish(graphicsData.instructions);\n    const geometry = batcher.geometry;\n    geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n    geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n    const drawBatches = batcher.batches;\n    for (let i = 0; i < drawBatches.length; i++) {\n      const batch = drawBatches[i];\n      batch.bindGroup = getTextureBatchBindGroup(batch.textures.textures, batch.textures.count);\n    }\n    this._graphicsDataContextHash[context.uid] = graphicsData;\n    return graphicsData;\n  }\n  _initContext(context) {\n    const gpuContext = new GpuGraphicsContext();\n    gpuContext.context = context;\n    this._gpuContextHash[context.uid] = gpuContext;\n    context.on(\"destroy\", this.onGraphicsContextDestroy, this);\n    return this._gpuContextHash[context.uid];\n  }\n  onGraphicsContextDestroy(context) {\n    this._cleanGraphicsContextData(context);\n    context.off(\"destroy\", this.onGraphicsContextDestroy, this);\n    this._gpuContextHash[context.uid] = null;\n  }\n  _cleanGraphicsContextData(context) {\n    const gpuContext = this._gpuContextHash[context.uid];\n    if (!gpuContext.isBatchable) {\n      if (this._graphicsDataContextHash[context.uid]) {\n        BigPool.return(this.getContextRenderData(context));\n        this._graphicsDataContextHash[context.uid] = null;\n      }\n    }\n    if (gpuContext.batches) {\n      gpuContext.batches.forEach((batch) => {\n        BigPool.return(batch);\n      });\n    }\n  }\n  destroy() {\n    for (const i in this._gpuContextHash) {\n      if (this._gpuContextHash[i]) {\n        this.onGraphicsContextDestroy(this._gpuContextHash[i].context);\n      }\n    }\n  }\n};\n/** @ignore */\n_GraphicsContextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"graphicsContext\"\n};\n/** The default options for the GraphicsContextSystem. */\n_GraphicsContextSystem.defaultOptions = {\n  /**\n   * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n   * @default 0.5\n   */\n  bezierSmoothness: 0.5\n};\nlet GraphicsContextSystem = _GraphicsContextSystem;\n\nexport { GpuGraphicsContext, GraphicsContextRenderData, GraphicsContextSystem };\n//# sourceMappingURL=GraphicsContextSystem.mjs.map\n"],"names":["GpuGraphicsContext","GraphicsContextRenderData","DefaultBatcher","InstructionSet","deprecation","v8_3_4","_GraphicsContextSystem","renderer","options","context","gpuContext","buildContextBatches","batchMode","graphicsData","BigPool","batches","geometryData","vertexSize","indexSize","batcher","batch","geometry","drawBatches","getTextureBatchBindGroup","i","ExtensionType","GraphicsContextSystem"],"mappings":"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","x_google_ignoreList":[0]}