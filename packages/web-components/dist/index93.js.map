{"version":3,"file":"index93.js","sources":["../../../node_modules/.pnpm/@pixi+assets@7.4.3_@pixi+core@7.4.3/node_modules/@pixi/assets/lib/loader/parsers/textures/loadTextures.mjs"],"sourcesContent":["import { settings, ExtensionType, utils, BaseTexture, extensions } from \"@pixi/core\";\nimport { checkDataUrl } from \"../../../utils/checkDataUrl.mjs\";\nimport { checkExtension } from \"../../../utils/checkExtension.mjs\";\nimport { LoaderParserPriority } from \"../LoaderParser.mjs\";\nimport { WorkerManager } from \"../WorkerManager.mjs\";\nimport { createTexture } from \"./utils/createTexture.mjs\";\nconst validImageExtensions = [\".jpeg\", \".jpg\", \".png\", \".webp\", \".avif\"], validImageMIMEs = [\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/webp\",\n  \"image/avif\"\n];\nasync function loadImageBitmap(url) {\n  const response = await settings.ADAPTER.fetch(url);\n  if (!response.ok)\n    throw new Error(`[loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\n  const imageBlob = await response.blob();\n  return await createImageBitmap(imageBlob);\n}\nconst loadTextures = {\n  name: \"loadTextures\",\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  config: {\n    preferWorkers: !0,\n    preferCreateImageBitmap: !0,\n    crossOrigin: \"anonymous\"\n  },\n  test(url) {\n    return checkDataUrl(url, validImageMIMEs) || checkExtension(url, validImageExtensions);\n  },\n  async load(url, asset, loader) {\n    const useImageBitmap = globalThis.createImageBitmap && this.config.preferCreateImageBitmap;\n    let src;\n    useImageBitmap ? this.config.preferWorkers && await WorkerManager.isImageBitmapSupported() ? src = await WorkerManager.loadImageBitmap(url) : src = await loadImageBitmap(url) : src = await new Promise((resolve, reject) => {\n      const src2 = new Image();\n      src2.crossOrigin = this.config.crossOrigin, src2.src = url, src2.complete ? resolve(src2) : (src2.onload = () => resolve(src2), src2.onerror = (e) => reject(e));\n    });\n    const options = { ...asset.data };\n    options.resolution ?? (options.resolution = utils.getResolutionOfUrl(url)), useImageBitmap && options.resourceOptions?.ownsImageBitmap === void 0 && (options.resourceOptions = { ...options.resourceOptions }, options.resourceOptions.ownsImageBitmap = !0);\n    const base = new BaseTexture(src, options);\n    return base.resource.src = url, createTexture(base, loader, url);\n  },\n  unload(texture) {\n    texture.destroy(!0);\n  }\n};\nextensions.add(loadTextures);\nexport {\n  loadImageBitmap,\n  loadTextures\n};\n//# sourceMappingURL=loadTextures.mjs.map\n"],"names":["validImageExtensions","validImageMIMEs","loadImageBitmap","url","response","settings","imageBlob","loadTextures","ExtensionType","LoaderParserPriority","checkDataUrl","checkExtension","asset","loader","useImageBitmap","src","WorkerManager","resolve","reject","src2","e","options","utils.getResolutionOfUrl","_a","base","BaseTexture","createTexture","texture","extensions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,MAAMA,IAAuB,CAAC,SAAS,QAAQ,QAAQ,SAAS,OAAO,GAAGC,IAAkB;AAAA,EAC1F;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,eAAeC,EAAgBC,GAAK;AAClC,QAAMC,IAAW,MAAMC,EAAS,QAAQ,MAAMF,CAAG;AACjD,MAAI,CAACC,EAAS;AACZ,UAAM,IAAI,MAAM,qCAAqCD,CAAG,KAAKC,EAAS,MAAM,IAAIA,EAAS,UAAU,EAAE;AACvG,QAAME,IAAY,MAAMF,EAAS;AACjC,SAAO,MAAM,kBAAkBE,CAAS;AAC1C;AACK,MAACC,IAAe;AAAA,EACnB,MAAM;AAAA,EACN,WAAW;AAAA,IACT,MAAMC,EAAc;AAAA,IACpB,UAAUC,EAAqB;AAAA,EAChC;AAAA,EACD,QAAQ;AAAA,IACN,eAAe;AAAA,IACf,yBAAyB;AAAA,IACzB,aAAa;AAAA,EACd;AAAA,EACD,KAAKN,GAAK;AACR,WAAOO,EAAaP,GAAKF,CAAe,KAAKU,EAAeR,GAAKH,CAAoB;AAAA,EACtF;AAAA,EACD,MAAM,KAAKG,GAAKS,GAAOC,GAAQ;;AAC7B,UAAMC,IAAiB,WAAW,qBAAqB,KAAK,OAAO;AACnE,QAAIC;AACJ,IAAAD,IAAiB,KAAK,OAAO,iBAAiB,MAAME,EAAc,2BAA2BD,IAAM,MAAMC,EAAc,gBAAgBb,CAAG,IAAIY,IAAM,MAAMb,EAAgBC,CAAG,IAAIY,IAAM,MAAM,IAAI,QAAQ,CAACE,GAASC,MAAW;AAC5N,YAAMC,IAAO,IAAI;AACjB,MAAAA,EAAK,cAAc,KAAK,OAAO,aAAaA,EAAK,MAAMhB,GAAKgB,EAAK,WAAWF,EAAQE,CAAI,KAAKA,EAAK,SAAS,MAAMF,EAAQE,CAAI,GAAGA,EAAK,UAAU,CAACC,MAAMF,EAAOE,CAAC;AAAA,IACpK,CAAK;AACD,UAAMC,IAAU,EAAE,GAAGT,EAAM,KAAI;AAC/B,IAAAS,EAAQ,eAAeA,EAAQ,aAAaC,EAAyBnB,CAAG,IAAIW,OAAkBS,IAAAF,EAAQ,oBAAR,gBAAAE,EAAyB,qBAAoB,WAAWF,EAAQ,kBAAkB,EAAE,GAAGA,EAAQ,mBAAmBA,EAAQ,gBAAgB,kBAAkB;AAC1P,UAAMG,IAAO,IAAIC,EAAYV,GAAKM,CAAO;AACzC,WAAOG,EAAK,SAAS,MAAMrB,GAAKuB,EAAcF,GAAMX,GAAQV,CAAG;AAAA,EAChE;AAAA,EACD,OAAOwB,GAAS;AACd,IAAAA,EAAQ,QAAQ,EAAE;AAAA,EACnB;AACH;AACAC,EAAW,IAAIrB,CAAY;","x_google_ignoreList":[0]}