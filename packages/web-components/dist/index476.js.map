{"version":3,"file":"index476.js","sources":["../../../node_modules/.pnpm/pixi.js@8.8.1/node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureStyle.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createResourceIdFromString(value) {\n  const id = idHash[value];\n  if (id === void 0) {\n    idHash[value] = uid(\"resource\");\n  }\n  return id;\n}\nconst _TextureStyle = class _TextureStyle extends EventEmitter {\n  /**\n   * @param options - options for the style\n   */\n  constructor(options = {}) {\n    super();\n    this._resourceType = \"textureSampler\";\n    this._touched = 0;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     * @internal\n     * @ignore\n     */\n    this._maxAnisotropy = 1;\n    /**\n     * Has the style been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    options = { ..._TextureStyle.defaultOptions, ...options };\n    this.addressMode = options.addressMode;\n    this.addressModeU = options.addressModeU ?? this.addressModeU;\n    this.addressModeV = options.addressModeV ?? this.addressModeV;\n    this.addressModeW = options.addressModeW ?? this.addressModeW;\n    this.scaleMode = options.scaleMode;\n    this.magFilter = options.magFilter ?? this.magFilter;\n    this.minFilter = options.minFilter ?? this.minFilter;\n    this.mipmapFilter = options.mipmapFilter ?? this.mipmapFilter;\n    this.lodMinClamp = options.lodMinClamp;\n    this.lodMaxClamp = options.lodMaxClamp;\n    this.compare = options.compare;\n    this.maxAnisotropy = options.maxAnisotropy ?? 1;\n  }\n  set addressMode(value) {\n    this.addressModeU = value;\n    this.addressModeV = value;\n    this.addressModeW = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this.addressModeU;\n  }\n  set wrapMode(value) {\n    deprecation(v8_0_0, \"TextureStyle.wrapMode is now TextureStyle.addressMode\");\n    this.addressMode = value;\n  }\n  get wrapMode() {\n    return this.addressMode;\n  }\n  set scaleMode(value) {\n    this.magFilter = value;\n    this.minFilter = value;\n    this.mipmapFilter = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this.magFilter;\n  }\n  /** Specifies the maximum anisotropy value clamp used by the sampler. */\n  set maxAnisotropy(value) {\n    this._maxAnisotropy = Math.min(value, 16);\n    if (this._maxAnisotropy > 1) {\n      this.scaleMode = \"linear\";\n    }\n  }\n  get maxAnisotropy() {\n    return this._maxAnisotropy;\n  }\n  // TODO - move this to WebGL?\n  get _resourceId() {\n    return this._sharedResourceId || this._generateResourceId();\n  }\n  update() {\n    this.emit(\"change\", this);\n    this._sharedResourceId = null;\n  }\n  _generateResourceId() {\n    const bigKey = `${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;\n    this._sharedResourceId = createResourceIdFromString(bigKey);\n    return this._resourceId;\n  }\n  /** Destroys the style */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this.removeAllListeners();\n  }\n};\n/** default options for the style */\n_TextureStyle.defaultOptions = {\n  addressMode: \"clamp-to-edge\",\n  scaleMode: \"linear\"\n};\nlet TextureStyle = _TextureStyle;\n\nexport { TextureStyle };\n//# sourceMappingURL=TextureStyle.mjs.map\n"],"names":["idHash","createResourceIdFromString","value","id","uid","_TextureStyle","EventEmitter","options","deprecation","v8_0_0","bigKey","TextureStyle"],"mappings":";;;AAKA,MAAMA,IAAyB,uBAAO,OAAO,IAAI;AACjD,SAASC,EAA2BC,GAAO;AACzC,QAAMC,IAAKH,EAAOE,CAAK;AACvB,SAAIC,MAAO,WACTH,EAAOE,CAAK,IAAIE,EAAI,UAAU,IAEzBD;AACT;AACA,MAAME,IAAgB,MAAMA,UAAsBC,EAAa;AAAA;AAAA;AAAA;AAAA,EAI7D,YAAYC,IAAU,IAAI;AACxB,aACA,KAAK,gBAAgB,kBACrB,KAAK,WAAW,GAShB,KAAK,iBAAiB,GAKtB,KAAK,YAAY,IACjBA,IAAU,EAAE,GAAGF,EAAc,gBAAgB,GAAGE,EAAO,GACvD,KAAK,cAAcA,EAAQ,aAC3B,KAAK,eAAeA,EAAQ,gBAAgB,KAAK,cACjD,KAAK,eAAeA,EAAQ,gBAAgB,KAAK,cACjD,KAAK,eAAeA,EAAQ,gBAAgB,KAAK,cACjD,KAAK,YAAYA,EAAQ,WACzB,KAAK,YAAYA,EAAQ,aAAa,KAAK,WAC3C,KAAK,YAAYA,EAAQ,aAAa,KAAK,WAC3C,KAAK,eAAeA,EAAQ,gBAAgB,KAAK,cACjD,KAAK,cAAcA,EAAQ,aAC3B,KAAK,cAAcA,EAAQ,aAC3B,KAAK,UAAUA,EAAQ,SACvB,KAAK,gBAAgBA,EAAQ,iBAAiB;AAAA,EAC/C;AAAA,EACD,IAAI,YAAYL,GAAO;AACrB,SAAK,eAAeA,GACpB,KAAK,eAAeA,GACpB,KAAK,eAAeA;AAAA,EACrB;AAAA;AAAA,EAED,IAAI,cAAc;AAChB,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,SAASA,GAAO;AAClB,IAAAM,EAAYC,GAAQ,uDAAuD,GAC3E,KAAK,cAAcP;AAAA,EACpB;AAAA,EACD,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACb;AAAA,EACD,IAAI,UAAUA,GAAO;AACnB,SAAK,YAAYA,GACjB,KAAK,YAAYA,GACjB,KAAK,eAAeA;AAAA,EACrB;AAAA;AAAA,EAED,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAED,IAAI,cAAcA,GAAO;AACvB,SAAK,iBAAiB,KAAK,IAAIA,GAAO,EAAE,GACpC,KAAK,iBAAiB,MACxB,KAAK,YAAY;AAAA,EAEpB;AAAA,EACD,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACb;AAAA;AAAA,EAED,IAAI,cAAc;AAChB,WAAO,KAAK,qBAAqB,KAAK,oBAAmB;AAAA,EAC1D;AAAA,EACD,SAAS;AACP,SAAK,KAAK,UAAU,IAAI,GACxB,KAAK,oBAAoB;AAAA,EAC1B;AAAA,EACD,sBAAsB;AACpB,UAAMQ,IAAS,GAAG,KAAK,YAAY,IAAI,KAAK,YAAY,IAAI,KAAK,YAAY,IAAI,KAAK,SAAS,IAAI,KAAK,SAAS,IAAI,KAAK,YAAY,IAAI,KAAK,WAAW,IAAI,KAAK,WAAW,IAAI,KAAK,OAAO,IAAI,KAAK,cAAc;AACrN,gBAAK,oBAAoBT,EAA2BS,CAAM,GACnD,KAAK;AAAA,EACb;AAAA;AAAA,EAED,UAAU;AACR,SAAK,YAAY,IACjB,KAAK,KAAK,WAAW,IAAI,GACzB,KAAK,KAAK,UAAU,IAAI,GACxB,KAAK,mBAAkB;AAAA,EACxB;AACH;AAEAL,EAAc,iBAAiB;AAAA,EAC7B,aAAa;AAAA,EACb,WAAW;AACb;AACG,IAACM,IAAeN;","x_google_ignoreList":[0]}