{"version":3,"sources":["../src/GameShield.tsx","../src/useGameShield.ts"],"names":["GameShield","forwardRef","gameType","size","difficulty","onSuccess","onFailure","onTimeout","className","style","ref","containerRef","useRef","gameShieldRef","parsedSize","useImperativeHandle","useEffect","createGameShield","jsx","useGameShield","options","isVerifying","setIsVerifying","useState","isVerified","setIsVerified","token","setToken","error","setError","reset","useCallback","handleSuccess","newToken","handleFailure","reason","handleTimeout"],"mappings":"qHAUaA,CAAaC,CAAAA,gBAAAA,CAAmD,SAAoB,CAC/F,QAAAC,CAAAA,CAAAA,CAAW,SACX,IAAAC,CAAAA,CAAAA,CAAO,QACP,UAAAC,CAAAA,CAAAA,CAAa,SACb,SAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,KAAA,CAAAC,CACF,CAAGC,CAAAA,CAAAA,CAAK,CAEN,IAAMC,CAAAA,CAAeC,YAAuB,CAAA,IAAI,CAG1CC,CAAAA,CAAAA,CAAgBD,aAAmD,IAAI,CAAA,CAGvEE,EAAa,OAAOX,CAAAA,EAAS,SAAW,CAAGA,EAAAA,CAAI,CAAOA,EAAAA,CAAAA,CAAAA,CAAAA,CAG5D,OAAAY,yBAAAA,CAAoBL,EAAK,KAAO,CAC9B,MAAO,IAAM,CACPG,EAAc,OAChBA,EAAAA,CAAAA,CAAc,OAAQ,CAAA,KAAA,GAE1B,CACF,EAAE,CAGFG,CAAAA,eAAAA,CAAU,IAAM,CACd,GAAKL,EAAa,OAKlB,CAAA,OAAAE,CAAc,CAAA,OAAA,CAAUI,qBAAiB,CAAA,CACvC,UAAWN,CAAa,CAAA,OAAA,CACxB,SAAAT,CACA,CAAA,IAAA,CAAAC,EACA,UAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,UAAAC,CACF,CAAC,EAGM,IAAM,CACPM,EAAc,OAChBA,GAAAA,CAAAA,CAAc,QAAQ,OAAQ,EAAA,CAC9BA,EAAc,OAAU,CAAA,IAAA,EAE5B,CACF,CAAG,CAAA,CAACX,EAAUC,CAAMC,CAAAA,CAAAA,CAAYC,CAAWC,CAAAA,CAAAA,CAAWC,CAAS,CAAC,EAG9DW,cAAC,CAAA,KAAA,CAAA,CACC,UAAW,CAAwBV,qBAAAA,EAAAA,CAAAA,EAAa,EAAE,CAClD,CAAA,CAAA,KAAA,CAAO,CACL,KAAA,CAAOM,CACP,CAAA,QAAA,CAAU,QACV,WAAa,CAAA,KAAA,CACb,SAAU,UACV,CAAA,QAAA,CAAU,SACV,YAAc,CAAA,KAAA,CACd,SAAW,CAAA,8BAAA,CACX,GAAGL,CACL,EAEA,QAAAS,CAAAA,cAAAA,CAAC,OACC,GAAKP,CAAAA,CAAAA,CACL,UAAU,kCACV,CAAA,KAAA,CAAO,CACL,KAAA,CAAO,MACP,CAAA,MAAA,CAAQ,OACR,OAAS,CAAA,MAAA,CACT,eAAgB,QAChB,CAAA,UAAA,CAAY,SACZ,eAAiB,CAAA,SACnB,CACF,CAAA,CAAA,CACF,CAEJ,CAAC,ECVM,SAASQ,EAAcC,CAAgC,CAAA,GAAyB,CAErF,IAAMT,CAAeC,CAAAA,YAAAA,CAAuB,IAAI,CAAA,CAG1CC,EAAgBD,YAAmD,CAAA,IAAI,EAGvE,CAACS,CAAAA,CAAaC,CAAc,CAAIC,CAAAA,cAAAA,CAAkB,KAAK,CACvD,CAAA,CAACC,EAAYC,CAAa,CAAA,CAAIF,eAAkB,KAAK,CAAA,CACrD,CAACG,CAAOC,CAAAA,CAAQ,CAAIJ,CAAAA,cAAAA,CAAwB,IAAI,CAAA,CAChD,CAACK,CAAOC,CAAAA,CAAQ,EAAIN,cAAwB,CAAA,IAAI,EAGhD,CACJ,QAAA,CAAArB,CAAW,CAAA,QAAA,CACX,IAAAC,CAAAA,CAAAA,CAAO,QACP,UAAAC,CAAAA,CAAAA,CAAa,SACb,SAAAC,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,SAAA,CAAAC,CACF,CAAA,CAAIa,CAGEU,CAAAA,CAAAA,CAAQC,kBAAY,IAAM,CAE9BT,EAAe,IAAI,CAAA,CACnBG,EAAc,KAAK,CAAA,CACnBE,CAAS,CAAA,IAAI,CACbE,CAAAA,CAAAA,CAAS,IAAI,CAGThB,CAAAA,CAAAA,CAAc,SAChBA,CAAc,CAAA,OAAA,CAAQ,QAE1B,CAAA,CAAG,EAAE,CAGL,CAAA,OAAAG,gBAAU,IAAM,CACd,GAAI,CAACL,CAAAA,CAAa,QAChB,OAIFW,CAAAA,CAAe,IAAI,CAAA,CACnBG,CAAc,CAAA,KAAK,EACnBE,CAAS,CAAA,IAAI,EACbE,CAAS,CAAA,IAAI,EAGb,IAAMG,CAAAA,CAAiBC,CAAqB,EAAA,CAC1CX,CAAe,CAAA,KAAK,EACpBG,CAAc,CAAA,IAAI,EAClBE,CAASM,CAAAA,CAAQ,EAGb5B,CACFA,EAAAA,CAAAA,CAAU4B,CAAQ,EAEtB,CAGMC,CAAAA,CAAAA,CAAiBC,GAAmB,CACxCb,CAAAA,CAAe,KAAK,CACpBG,CAAAA,CAAAA,CAAc,KAAK,CACnBI,CAAAA,CAAAA,CAASM,CAAM,CAAA,CAGX7B,CACFA,EAAAA,CAAAA,CAAU6B,CAAM,EAEpB,CAAA,CAGMC,EAAgB,IAAM,CAC1Bd,EAAe,KAAK,CAAA,CACpBG,CAAc,CAAA,KAAK,CACnBI,CAAAA,CAAAA,CAAS,wBAAwB,CAG7BtB,CAAAA,CAAAA,EACFA,IAEJ,CAAA,CAGA,OAAAM,CAAc,CAAA,OAAA,CAAUI,qBAAiB,CAAA,CACvC,SAAWN,CAAAA,CAAAA,CAAa,QACxB,QAAAT,CAAAA,CAAAA,CACA,KAAAC,CACA,CAAA,UAAA,CAAAC,EACA,SAAW4B,CAAAA,CAAAA,CACX,SAAWE,CAAAA,CAAAA,CACX,SAAWE,CAAAA,CACb,CAAC,CAGM,CAAA,IAAM,CACPvB,CAAc,CAAA,OAAA,GAChBA,EAAc,OAAQ,CAAA,OAAA,EACtBA,CAAAA,CAAAA,CAAc,OAAU,CAAA,IAAA,EAE5B,CACF,CAAG,CAAA,CAACX,EAAUC,CAAMC,CAAAA,CAAAA,CAAYC,EAAWC,CAAWC,CAAAA,CAAS,CAAC,CAAA,CAEzD,CACL,GAAA,CAAKI,EACL,WAAAU,CAAAA,CAAAA,CACA,WAAAG,CACA,CAAA,KAAA,CAAAE,EACA,KAAAE,CAAAA,CAAAA,CACA,KAAAE,CAAAA,CACF,CACF","file":"index.js","sourcesContent":["import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { createGameShield } from '@gameshield/core';\nimport { GameShieldProps } from './types';\n\n/**\n * GameShield React component\n * \n * A CAPTCHA alternative that uses interactive games to verify human users.\n * Maintains a perfect 1:1 aspect ratio with a maximum size of 500px.\n */\nexport const GameShield = forwardRef<{ reset: () => void }, GameShieldProps>(function GameShield({\n  gameType = 'random',\n  size = '400px',\n  difficulty = 'medium',\n  onSuccess,\n  onFailure,\n  onTimeout,\n  className,\n  style\n}, ref) {\n  // Reference to the container element\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Reference to the GameShield instance\n  const gameShieldRef = useRef<ReturnType<typeof createGameShield> | null>(null);\n  \n  // Parse size to CSS value\n  const parsedSize = typeof size === 'number' ? `${size}px` : size;\n  \n  // Expose the reset method to the parent component via ref\n  useImperativeHandle(ref, () => ({\n    reset: () => {\n      if (gameShieldRef.current) {\n        gameShieldRef.current.reset();\n      }\n    }\n  }));\n  \n  // Initialize GameShield on mount\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n    \n    // Create GameShield instance\n    gameShieldRef.current = createGameShield({\n      container: containerRef.current,\n      gameType,\n      size,\n      difficulty,\n      onSuccess,\n      onFailure,\n      onTimeout\n    });\n    \n    // Clean up on unmount\n    return () => {\n      if (gameShieldRef.current) {\n        gameShieldRef.current.destroy();\n        gameShieldRef.current = null;\n      }\n    };\n  }, [gameType, size, difficulty, onSuccess, onFailure, onTimeout]);\n  \n  return (\n    <div\n      className={`gameshield-container ${className || ''}`}\n      style={{\n        width: parsedSize,\n        maxWidth: '500px',\n        aspectRatio: '1/1',\n        position: 'relative',\n        overflow: 'hidden',\n        borderRadius: '8px',\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n        ...style\n      }}\n    >\n      <div\n        ref={containerRef}\n        className=\"gameshield-content aspect-square\"\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#1a1a1a'\n        }}\n      />\n    </div>\n  );\n});\n","import { useRef, useEffect, useState, useCallback } from 'react';\nimport { createGameShield, GameType, Difficulty, Size } from '@gameshield/core';\n\n/**\n * Options for the useGameShield hook\n */\ninterface UseGameShieldOptions {\n  /**\n   * The type of game to display\n   * @default 'random'\n   */\n  gameType?: GameType;\n  \n  /**\n   * The size of the game container (maintains 1:1 aspect ratio)\n   * @default '400px'\n   */\n  size?: Size;\n  \n  /**\n   * The difficulty level of the game\n   * @default 'medium'\n   */\n  difficulty?: Difficulty;\n  \n  /**\n   * Callback when verification succeeds, receives token as parameter\n   */\n  onSuccess?: (token: string) => void;\n  \n  /**\n   * Callback when verification fails, receives reason as parameter\n   */\n  onFailure?: (reason: string) => void;\n  \n  /**\n   * Callback when verification times out\n   */\n  onTimeout?: () => void;\n}\n\n/**\n * Return value of the useGameShield hook\n */\ninterface UseGameShieldReturn {\n  /**\n   * Ref to be attached to the container element\n   */\n  ref: React.RefObject<HTMLDivElement>;\n  \n  /**\n   * Whether verification is in progress\n   */\n  isVerifying: boolean;\n  \n  /**\n   * Whether verification was successful\n   */\n  isVerified: boolean;\n  \n  /**\n   * Verification token (if successful)\n   */\n  token: string | null;\n  \n  /**\n   * Error message (if verification failed)\n   */\n  error: string | null;\n  \n  /**\n   * Reset the CAPTCHA\n   */\n  reset: () => void;\n}\n\n/**\n * Custom hook for using GameShield in React components\n * \n * @param options Configuration options\n * @returns Object with ref, state, and methods\n */\nexport function useGameShield(options: UseGameShieldOptions = {}): UseGameShieldReturn {\n  // Reference to the container element\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Reference to the GameShield instance\n  const gameShieldRef = useRef<ReturnType<typeof createGameShield> | null>(null);\n  \n  // State for tracking verification status\n  const [isVerifying, setIsVerifying] = useState<boolean>(false);\n  const [isVerified, setIsVerified] = useState<boolean>(false);\n  const [token, setToken] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Default options\n  const {\n    gameType = 'random',\n    size = '400px',\n    difficulty = 'medium',\n    onSuccess,\n    onFailure,\n    onTimeout\n  } = options;\n  \n  // Reset function\n  const reset = useCallback(() => {\n    // Reset state\n    setIsVerifying(true);\n    setIsVerified(false);\n    setToken(null);\n    setError(null);\n    \n    // Reset GameShield instance\n    if (gameShieldRef.current) {\n      gameShieldRef.current.reset();\n    }\n  }, []);\n  \n  // Initialize GameShield when the container ref is available\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n    \n    // Reset state\n    setIsVerifying(true);\n    setIsVerified(false);\n    setToken(null);\n    setError(null);\n    \n    // Success handler\n    const handleSuccess = (newToken: string) => {\n      setIsVerifying(false);\n      setIsVerified(true);\n      setToken(newToken);\n      \n      // Call external handler if provided\n      if (onSuccess) {\n        onSuccess(newToken);\n      }\n    };\n    \n    // Failure handler\n    const handleFailure = (reason: string) => {\n      setIsVerifying(false);\n      setIsVerified(false);\n      setError(reason);\n      \n      // Call external handler if provided\n      if (onFailure) {\n        onFailure(reason);\n      }\n    };\n    \n    // Timeout handler\n    const handleTimeout = () => {\n      setIsVerifying(false);\n      setIsVerified(false);\n      setError('Verification timed out');\n      \n      // Call external handler if provided\n      if (onTimeout) {\n        onTimeout();\n      }\n    };\n    \n    // Create GameShield instance\n    gameShieldRef.current = createGameShield({\n      container: containerRef.current,\n      gameType,\n      size,\n      difficulty,\n      onSuccess: handleSuccess,\n      onFailure: handleFailure,\n      onTimeout: handleTimeout\n    });\n    \n    // Clean up on unmount\n    return () => {\n      if (gameShieldRef.current) {\n        gameShieldRef.current.destroy();\n        gameShieldRef.current = null;\n      }\n    };\n  }, [gameType, size, difficulty, onSuccess, onFailure, onTimeout]);\n  \n  return {\n    ref: containerRef,\n    isVerifying,\n    isVerified,\n    token,\n    error,\n    reset\n  };\n}\n"]}