{"version":3,"sources":["../src/GameShield.tsx","../src/useGameShield.ts","../src/Captcha.tsx"],"names":["GameShield","forwardRef","gameType","size","difficulty","onSuccess","onFailure","onTimeout","className","style","ref","containerRef","useRef","gameShieldRef","parsedSize","useImperativeHandle","useEffect","createGameShield","jsx","useGameShield","options","isVerifying","setIsVerifying","useState","isVerified","setIsVerified","token","setToken","error","setError","reset","useCallback","handleSuccess","newToken","handleFailure","reason","handleTimeout","Captcha","props","resizeObserver","containerStyle"],"mappings":"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","file":"index.js","sourcesContent":["import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { createGameShield } from '@gameshield/core';\nimport { GameShieldProps } from './types';\n\n/**\n * GameShield React component\n * \n * A CAPTCHA alternative that uses interactive games to verify human users.\n * Maintains a perfect 1:1 aspect ratio with a maximum size of 500px.\n */\nexport const GameShield = forwardRef<{ reset: () => void }, GameShieldProps>(function GameShield({\n  gameType = 'random',\n  size = '100%',\n  difficulty = 'medium',\n  onSuccess,\n  onFailure,\n  onTimeout,\n  className,\n  style\n}, ref) {\n  // Reference to the container element\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Reference to the GameShield instance\n  const gameShieldRef = useRef<ReturnType<typeof createGameShield> | null>(null);\n  \n  // Parse size to CSS value\n  const parsedSize = typeof size === 'number' ? `${size}px` : size;\n  \n  // Expose the reset method to the parent component via ref\n  useImperativeHandle(ref, () => ({\n    reset: () => {\n      if (gameShieldRef.current) {\n        gameShieldRef.current.reset();\n      }\n    }\n  }));\n  \n  // Initialize GameShield on mount\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n    \n    // Small delay to ensure proper container sizing\n    setTimeout(() => {\n      // Create GameShield instance\n      gameShieldRef.current = createGameShield({\n        container: containerRef.current!,\n        gameType,\n        size: parsedSize,\n        difficulty,\n        onSuccess,\n        onFailure,\n        onTimeout\n      });\n    }, 0);\n    \n    // Clean up on unmount\n    return () => {\n      if (gameShieldRef.current) {\n        gameShieldRef.current.destroy();\n        gameShieldRef.current = null;\n      }\n    };\n  }, [gameType, parsedSize, difficulty, onSuccess, onFailure, onTimeout]);\n  \n  return (\n    <div\n      className={`gameshield-container ${className || ''}`}\n      style={{\n        width: '100%',\n        height: '100%',\n        aspectRatio: '1/1',\n        position: 'relative',\n        overflow: 'hidden',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        ...style\n      }}\n    >\n      <div\n        ref={containerRef}\n        className=\"gameshield-content aspect-square\"\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#1a1a1a'\n        }}\n      />\n    </div>\n  );\n});\n","import { useRef, useEffect, useState, useCallback } from 'react';\nimport { createGameShield, GameType, Difficulty, Size } from '@gameshield/core';\n\n/**\n * Options for the useGameShield hook\n */\ninterface UseGameShieldOptions {\n  /**\n   * The type of game to display\n   * @default 'random'\n   */\n  gameType?: GameType;\n  \n  /**\n   * The size of the game container (maintains 1:1 aspect ratio)\n   * @default '400px'\n   */\n  size?: Size;\n  \n  /**\n   * The difficulty level of the game\n   * @default 'medium'\n   */\n  difficulty?: Difficulty;\n  \n  /**\n   * Callback when verification succeeds, receives token as parameter\n   */\n  onSuccess?: (token: string) => void;\n  \n  /**\n   * Callback when verification fails, receives reason as parameter\n   */\n  onFailure?: (reason: string) => void;\n  \n  /**\n   * Callback when verification times out\n   */\n  onTimeout?: () => void;\n}\n\n/**\n * Return value of the useGameShield hook\n */\ninterface UseGameShieldReturn {\n  /**\n   * Ref to be attached to the container element\n   */\n  ref: React.RefObject<HTMLDivElement>;\n  \n  /**\n   * Whether verification is in progress\n   */\n  isVerifying: boolean;\n  \n  /**\n   * Whether verification was successful\n   */\n  isVerified: boolean;\n  \n  /**\n   * Verification token (if successful)\n   */\n  token: string | null;\n  \n  /**\n   * Error message (if verification failed)\n   */\n  error: string | null;\n  \n  /**\n   * Reset the CAPTCHA\n   */\n  reset: () => void;\n}\n\n/**\n * Custom hook for using GameShield in React components\n * \n * @param options Configuration options\n * @returns Object with ref, state, and methods\n */\nexport function useGameShield(options: UseGameShieldOptions = {}): UseGameShieldReturn {\n  // Reference to the container element\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Reference to the GameShield instance\n  const gameShieldRef = useRef<ReturnType<typeof createGameShield> | null>(null);\n  \n  // State for tracking verification status\n  const [isVerifying, setIsVerifying] = useState<boolean>(false);\n  const [isVerified, setIsVerified] = useState<boolean>(false);\n  const [token, setToken] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Default options\n  const {\n    gameType = 'random',\n    size = '400px',\n    difficulty = 'medium',\n    onSuccess,\n    onFailure,\n    onTimeout\n  } = options;\n  \n  // Reset function\n  const reset = useCallback(() => {\n    // Reset state\n    setIsVerifying(true);\n    setIsVerified(false);\n    setToken(null);\n    setError(null);\n    \n    // Reset GameShield instance\n    if (gameShieldRef.current) {\n      gameShieldRef.current.reset();\n    }\n  }, []);\n  \n  // Initialize GameShield when the container ref is available\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n    \n    // Reset state\n    setIsVerifying(true);\n    setIsVerified(false);\n    setToken(null);\n    setError(null);\n    \n    // Success handler\n    const handleSuccess = (newToken: string) => {\n      setIsVerifying(false);\n      setIsVerified(true);\n      setToken(newToken);\n      \n      // Call external handler if provided\n      if (onSuccess) {\n        onSuccess(newToken);\n      }\n    };\n    \n    // Failure handler\n    const handleFailure = (reason: string) => {\n      setIsVerifying(false);\n      setIsVerified(false);\n      setError(reason);\n      \n      // Call external handler if provided\n      if (onFailure) {\n        onFailure(reason);\n      }\n    };\n    \n    // Timeout handler\n    const handleTimeout = () => {\n      setIsVerifying(false);\n      setIsVerified(false);\n      setError('Verification timed out');\n      \n      // Call external handler if provided\n      if (onTimeout) {\n        onTimeout();\n      }\n    };\n    \n    // Create GameShield instance\n    gameShieldRef.current = createGameShield({\n      container: containerRef.current,\n      gameType,\n      size,\n      difficulty,\n      onSuccess: handleSuccess,\n      onFailure: handleFailure,\n      onTimeout: handleTimeout\n    });\n    \n    // Clean up on unmount\n    return () => {\n      if (gameShieldRef.current) {\n        gameShieldRef.current.destroy();\n        gameShieldRef.current = null;\n      }\n    };\n  }, [gameType, size, difficulty, onSuccess, onFailure, onTimeout]);\n  \n  return {\n    ref: containerRef,\n    isVerifying,\n    isVerified,\n    token,\n    error,\n    reset\n  };\n}\n","import React, { useRef, useEffect } from 'react';\nimport { GameShield } from './GameShield';\nimport type { GameShieldProps } from './types';\n\nexport interface CaptchaProps extends Omit<GameShieldProps, 'size'> {\n  /**\n   * Size of the captcha square in pixels\n   * If undefined, the captcha will be contained within its parent element\n   */\n  size?: number;\n}\n\n/**\n * Captcha component for GameShield\n * \n * A simplified interface for the GameShield component that maintains a perfect 1:1 aspect ratio.\n * If size is undefined, it adapts to its parent container size.\n * \n * @example\n * ```tsx\n * <Captcha size={400} className=\"border rounded\" />\n * ```\n */\nexport function Captcha({ size, className, style, ...props }: CaptchaProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  // Use an effect to resize the container when it's parent changes size\n  // Only needed when size is undefined\n  useEffect(() => {\n    if (size !== undefined || !containerRef.current) return;\n    \n    const resizeObserver = new ResizeObserver(() => {\n      // This will trigger a re-render when the parent size changes\n      if (containerRef.current) {\n        containerRef.current.style.width = '100%';\n        containerRef.current.style.height = '100%';\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current.parentElement || containerRef.current);\n    \n    return () => {\n      if (containerRef.current) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [size]);\n  \n  // Determine the styles based on whether size is defined\n  const containerStyle = size !== undefined \n    ? {\n        width: `${size}px`,\n        height: `${size}px`,\n        maxWidth: '100%',\n        maxHeight: '100%',\n        ...style\n      } \n    : {\n        width: '100%',\n        height: '100%',\n        ...style\n      };\n\n  return (\n    <div \n      ref={containerRef}\n      className={`gameshield-captcha-container ${className || ''}`}\n      style={{\n        ...containerStyle,\n        aspectRatio: '1/1',\n        position: 'relative',\n        overflow: 'hidden',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <GameShield \n        size=\"100%\" \n        style={{ width: '100%', height: '100%', maxWidth: '100%', maxHeight: '100%' }}\n        {...props} \n      />\n    </div>\n  );\n}\n"]}